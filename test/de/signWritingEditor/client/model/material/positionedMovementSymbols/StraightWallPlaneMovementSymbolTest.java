package de.signWritingEditor.client.model.material.positionedMovementSymbols;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import de.signWritingEditor.shared.model.domainValue.Symbol;
import de.signWritingEditor.shared.model.material.MovementBaseSymbol;
import de.signWritingEditor.shared.model.material.PositionedMovementSymbol;
import de.signWritingEditor.shared.model.material.SymbolFactory;

public class StraightWallPlaneMovementSymbolTest implements PositionedMovementSymbolTestInterface {

	/**
	 * StraightWallPlane Movement Symbols Group 02 SymbolId 03
	 */
	private PositionedMovementSymbol singleStraightMovementWallPlaneSmall;
	private PositionedMovementSymbol singleStraightMovementWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol singleStraightMovementWallPlaneSmallSchemaArrowhead;

	private PositionedMovementSymbol singleStraightMovementWallPlaneMedium;
	private PositionedMovementSymbol singleStraightMovementWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol singleStraightMovementWallPlaneMediumSchemaArrowhead;

	private PositionedMovementSymbol singleStraightMovementWallPlaneLarge;
	private PositionedMovementSymbol singleStraightMovementWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol singleStraightMovementWallPlaneLargeSchemaArrowhead;

	private PositionedMovementSymbol singleStraightMovementWallPlaneLargest;
	private PositionedMovementSymbol singleStraightMovementWallPlaneLargestEmptyArrowhead;
	private PositionedMovementSymbol singleStraightMovementWallPlaneLargestSchemaArrowhead;

	private PositionedMovementSymbol singleWristFlexWallPlane;
	private PositionedMovementSymbol singleWristFlexWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol singleWristFlexWallPlaneSchemaArrowhead;

	private PositionedMovementSymbol doubleWristFlexWallPlane;
	private PositionedMovementSymbol doubleWristFlexWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol doubleWristFlexWallPlaneSchemaArrowhead;

	private PositionedMovementSymbol tripleWristFlexWallPlane;
	private PositionedMovementSymbol tripleWristFlexWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol tripleWristFlexWallPlaneSchemaArrowhead;

	private PositionedMovementSymbol doubleAlternatingWristFlexWallPlane;
	private PositionedMovementSymbol doubleAlternatingWristFlexWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol doubleAlternatingWristFlexWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol doubleAlternatingWristFlexWallPlaneMirrored;
	private PositionedMovementSymbol doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol tripleAlternatingWristFlexWallPlane;
	private PositionedMovementSymbol tripleAlternatingWristFlexWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol tripleAlternatingWristFlexWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol tripleAlternatingWristFlexWallPlaneMirrored;
	private PositionedMovementSymbol tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol doubleStraightMovementWallPlane;
	private PositionedMovementSymbol doubleStraightMovementWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol doubleStraightMovementWallPlaneSchemaArrowhead;

	private PositionedMovementSymbol tripleStraightMovementWallPlane;
	private PositionedMovementSymbol tripleStraightMovementWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol tripleStraightMovementWallPlaneSchemaArrowhead;

	private PositionedMovementSymbol doubleAlternatingMovementWallPlane;
	private PositionedMovementSymbol doubleAlternatingMovementWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol doubleAlternatingMovementWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol doubleAlternatingMovementWallPlaneMirrored;
	private PositionedMovementSymbol doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol tripleAlternatingMovementWallPlane;
	private PositionedMovementSymbol tripleAlternatingMovementWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol tripleAlternatingMovementWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol tripleAlternatingMovementWallPlaneMirrored;
	private PositionedMovementSymbol tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol crossMovementWallPlane;
	private PositionedMovementSymbol crossMovementWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol crossMovementWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol crossMovementWallPlaneMirrored;
	private PositionedMovementSymbol crossMovementWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol crossMovementWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol bendWallPlaneSmall;
	private PositionedMovementSymbol bendWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol bendWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol bendWallPlaneSmallMirrored;
	private PositionedMovementSymbol bendWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol bendWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol bendWallPlaneMedium;
	private PositionedMovementSymbol bendWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol bendWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol bendWallPlaneMediumMirrored;
	private PositionedMovementSymbol bendWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol bendWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol bendWallPlaneLarge;
	private PositionedMovementSymbol bendWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol bendWallPlaneLargeSchemaArrowhead;
	private PositionedMovementSymbol bendWallPlaneLargeMirrored;
	private PositionedMovementSymbol bendWallPlaneLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol bendWallPlaneLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol cornerWallPlaneSmall;
	private PositionedMovementSymbol cornerWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol cornerWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol cornerWallPlaneSmallMirrored;
	private PositionedMovementSymbol cornerWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol cornerWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol cornerWallPlaneMedium;
	private PositionedMovementSymbol cornerWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol cornerWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol cornerWallPlaneMediumMirrored;
	private PositionedMovementSymbol cornerWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol cornerWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol cornerWallPlaneLarge;
	private PositionedMovementSymbol cornerWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol cornerWallPlaneLargeSchemaArrowhead;
	private PositionedMovementSymbol cornerWallPlaneLargeMirrored;
	private PositionedMovementSymbol cornerWallPlaneLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol cornerWallPlaneLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol cornerWallPlaneWithRotation;
	private PositionedMovementSymbol cornerWallPlaneWithRotationEmptyArrowhead;
	private PositionedMovementSymbol cornerWallPlaneWithRotationSchemaArrowhead;
	private PositionedMovementSymbol cornerWallPlaneWithRotationMirrored;
	private PositionedMovementSymbol cornerWallPlaneWithRotationEmptyArrowheadMirrored;
	private PositionedMovementSymbol cornerWallPlaneWithRotationSchemaArrowheadMirrored;

	private PositionedMovementSymbol checkWallPlaneSmall;
	private PositionedMovementSymbol checkWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol checkWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol checkWallPlaneSmallMirrored;
	private PositionedMovementSymbol checkWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol checkWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol checkWallPlaneMedium;
	private PositionedMovementSymbol checkWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol checkWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol checkWallPlaneMediumMirrored;
	private PositionedMovementSymbol checkWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol checkWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol checkWallPlaneLarge;
	private PositionedMovementSymbol checkWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol checkWallPlaneLargeSchemaArrowhead;
	private PositionedMovementSymbol checkWallPlaneLargeMirrored;
	private PositionedMovementSymbol checkWallPlaneLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol checkWallPlaneLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol boxWallPlaneSmall;
	private PositionedMovementSymbol boxWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol boxWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol boxWallPlaneSmallMirrored;
	private PositionedMovementSymbol boxWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol boxWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol boxWallPlaneMedium;
	private PositionedMovementSymbol boxWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol boxWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol boxWallPlaneMediumMirrored;
	private PositionedMovementSymbol boxWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol boxWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol boxWallPlaneLarge;
	private PositionedMovementSymbol boxWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol boxWallPlaneLargeSchemaArrowhead;
	private PositionedMovementSymbol boxWallPlaneLargeMirrored;
	private PositionedMovementSymbol boxWallPlaneLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol boxWallPlaneLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol zigzagWallPlaneSmall;
	private PositionedMovementSymbol zigzagWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol zigzagWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol zigzagWallPlaneSmallMirrored;
	private PositionedMovementSymbol zigzagWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol zigzagWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol zigzagWallPlaneMedium;
	private PositionedMovementSymbol zigzagWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol zigzagWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol zigzagWallPlaneMediumMirrored;
	private PositionedMovementSymbol zigzagWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol zigzagWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol zigzagWallPlaneLarge;
	private PositionedMovementSymbol zigzagWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol zigzagWallPlaneLargeSchemaArrowhead;
	private PositionedMovementSymbol zigzagWallPlaneLargeMirrored;
	private PositionedMovementSymbol zigzagWallPlaneLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol zigzagWallPlaneLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol peaksWallPlaneSmall;
	private PositionedMovementSymbol peaksWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol peaksWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol peaksWallPlaneSmallMirrored;
	private PositionedMovementSymbol peaksWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol peaksWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol peaksWallPlaneMedium;
	private PositionedMovementSymbol peaksWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol peaksWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol peaksWallPlaneMediumMirrored;
	private PositionedMovementSymbol peaksWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol peaksWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol peaksWallPlaneLarge;
	private PositionedMovementSymbol peaksWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol peaksWallPlaneLargeSchemaArrowhead;
	private PositionedMovementSymbol peaksWallPlaneLargeMirrored;
	private PositionedMovementSymbol peaksWallPlaneLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol peaksWallPlaneLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelRotationSingleWallPlane;
	private PositionedMovementSymbol travelRotationSingleWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol travelRotationSingleWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol travelRotationSingleWallPlaneMirrored;
	private PositionedMovementSymbol travelRotationSingleWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelRotationSingleWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelRotationDoubleWallPlane;
	private PositionedMovementSymbol travelRotationDoubleWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol travelRotationDoubleWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol travelRotationDoubleWallPlaneMirrored;
	private PositionedMovementSymbol travelRotationDoubleWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelRotationDoubleWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelRotationAlternatingWallPlane;
	private PositionedMovementSymbol travelRotationAlternatingWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol travelRotationAlternatingWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol travelRotationAlternatingWallPlaneMirrored;
	private PositionedMovementSymbol travelRotationAlternatingWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelRotationAlternatingWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelRotationSingleFloorPlane;
	private PositionedMovementSymbol travelRotationSingleFloorPlaneEmptyArrowhead;
	private PositionedMovementSymbol travelRotationSingleFloorPlaneSchemaArrowhead;
	private PositionedMovementSymbol travelRotationSingleFloorPlaneMirrored;
	private PositionedMovementSymbol travelRotationSingleFloorPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelRotationSingleFloorPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelRotationDoubleFloorPlane;
	private PositionedMovementSymbol travelRotationDoubleFloorPlaneEmptyArrowhead;
	private PositionedMovementSymbol travelRotationDoubleFloorPlaneSchemaArrowhead;
	private PositionedMovementSymbol travelRotationDoubleFloorPlaneMirrored;
	private PositionedMovementSymbol travelRotationDoubleFloorPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelRotationDoubleFloorPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelRotationAlternatingFloorPlane;
	private PositionedMovementSymbol travelRotationAlternatingFloorPlaneEmptyArrowhead;
	private PositionedMovementSymbol travelRotationAlternatingFloorPlaneSchemaArrowhead;
	private PositionedMovementSymbol travelRotationAlternatingFloorPlaneMirrored;
	private PositionedMovementSymbol travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelShakingWallPlane;
	private PositionedMovementSymbol travelShakingWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol travelShakingWallPlaneSchemaArrowhead;

	private PositionedMovementSymbol travelArmSpiralWallPlaneSingle;
	private PositionedMovementSymbol travelArmSpiralWallPlaneSingleEmptyArrowhead;
	private PositionedMovementSymbol travelArmSpiralWallPlaneSingleSchemaArrowhead;
	private PositionedMovementSymbol travelArmSpiralWallPlaneSingleMirrored;
	private PositionedMovementSymbol travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelArmSpiralWallPlaneDouble;
	private PositionedMovementSymbol travelArmSpiralWallPlaneDoubleEmptyArrowhead;
	private PositionedMovementSymbol travelArmSpiralWallPlaneDoubleSchemaArrowhead;
	private PositionedMovementSymbol travelArmSpiralWallPlaneDoubleMirrored;
	private PositionedMovementSymbol travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored;

	private PositionedMovementSymbol travelArmSpiralWallPlaneTriple;
	private PositionedMovementSymbol travelArmSpiralWallPlaneTripleEmptyArrowhead;
	private PositionedMovementSymbol travelArmSpiralWallPlaneTripleSchemaArrowhead;
	private PositionedMovementSymbol travelArmSpiralWallPlaneTripleMirrored;
	private PositionedMovementSymbol travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored;
	private PositionedMovementSymbol travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored;

	private SymbolFactory symbolFactory;

	@Override
	public void setUp(SymbolFactory symbolFactory) {

		this.symbolFactory = symbolFactory;
		singleStraightMovementWallPlaneSmall = new PositionedMovementSymbol(
				MovementBaseSymbol.SINGLE_STRAIGHT_MOVEMENT_WALL_PLANE_SMALL.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.SINGLE_STRAIGHT_MOVEMENT_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol singleStraightMovementWallPlaneSmallEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-001-01-02-01");
		singleStraightMovementWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(
				singleStraightMovementWallPlaneSmallEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						singleStraightMovementWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol singleStraightMovementWallPlaneSmallSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-001-01-03-01");
		singleStraightMovementWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(
				singleStraightMovementWallPlaneSmallSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						singleStraightMovementWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));

		singleStraightMovementWallPlaneMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.SINGLE_STRAIGHT_MOVEMENT_WALL_PLANE_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.SINGLE_STRAIGHT_MOVEMENT_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol singleStraightMovementWallPlaneMediumEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-001-02-02-01");
		singleStraightMovementWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(
				singleStraightMovementWallPlaneMediumEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						singleStraightMovementWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol singleStraightMovementWallPlaneMediumSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-001-02-03-01");
		singleStraightMovementWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(
				singleStraightMovementWallPlaneMediumSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						singleStraightMovementWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));

		singleStraightMovementWallPlaneLarge = new PositionedMovementSymbol(
				MovementBaseSymbol.SINGLE_STRAIGHT_MOVEMENT_WALL_PLANE_LARGE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.SINGLE_STRAIGHT_MOVEMENT_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol singleStraightMovementWallPlaneLargeEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-001-03-02-01");
		singleStraightMovementWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(
				singleStraightMovementWallPlaneLargeEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						singleStraightMovementWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol singleStraightMovementWallPlaneLargeSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-001-03-03-01");
		singleStraightMovementWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(
				singleStraightMovementWallPlaneLargeSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						singleStraightMovementWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));

		singleStraightMovementWallPlaneLargest = new PositionedMovementSymbol(
				MovementBaseSymbol.SINGLE_STRAIGHT_MOVEMENT_WALL_PLANE_LARGEST.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(MovementBaseSymbol.SINGLE_STRAIGHT_MOVEMENT_WALL_PLANE_LARGEST
						.getIswaSymbol().getBaseSymbol()));
		Symbol singleStraightMovementWallPlaneLargestEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-001-04-02-01");
		singleStraightMovementWallPlaneLargestEmptyArrowhead = new PositionedMovementSymbol(
				singleStraightMovementWallPlaneLargestEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						singleStraightMovementWallPlaneLargestEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol singleStraightMovementWallPlaneLargestSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-001-04-03-01");
		singleStraightMovementWallPlaneLargestSchemaArrowhead = new PositionedMovementSymbol(
				singleStraightMovementWallPlaneLargestSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						singleStraightMovementWallPlaneLargestSchemaArrowheadSymbol.getBaseSymbol()));

		singleWristFlexWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.SINGLE_WRIST_FLEX_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.SINGLE_WRIST_FLEX_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol singleWristFlexWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-001-05-02-01");
		singleWristFlexWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				singleWristFlexWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(singleWristFlexWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol singleWristFlexWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-001-05-03-01");
		singleWristFlexWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				singleWristFlexWallPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(singleWristFlexWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));

		doubleWristFlexWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.DOUBLE_WRIST_FLEX_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.DOUBLE_WRIST_FLEX_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol doubleWristFlexWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-002-02-02-01");
		doubleWristFlexWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				doubleWristFlexWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(doubleWristFlexWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol doubleWristFlexWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-002-02-03-01");
		doubleWristFlexWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				doubleWristFlexWallPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(doubleWristFlexWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));

		tripleWristFlexWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRIPPLE_WRIST_FLEX_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRIPPLE_WRIST_FLEX_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol tripleWristFlexWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-005-02-02-01");
		tripleWristFlexWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				tripleWristFlexWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(tripleWristFlexWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol tripleWristFlexWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-005-02-03-01");
		tripleWristFlexWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				tripleWristFlexWallPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(tripleWristFlexWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));

		doubleAlternatingWristFlexWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.DOUBLE_ALTERNATING_WRIST_FLEX_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.DOUBLE_ALTERNATING_WRIST_FLEX_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol doubleAlternatingWristFlexWallPlaneEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-003-02-02-01");
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						doubleAlternatingWristFlexWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol doubleAlternatingWristFlexWallPlaneSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-003-02-03-01");
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						doubleAlternatingWristFlexWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol doubleAlternatingWristFlexWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-003-02-01-09");
		doubleAlternatingWristFlexWallPlaneMirrored = new PositionedMovementSymbol(
				doubleAlternatingWristFlexWallPlaneMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(doubleAlternatingWristFlexWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-003-02-02-09");
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-003-02-03-09");
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		tripleAlternatingWristFlexWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRIPPLE_ALTERNATING_WRIST_FLEX_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRIPPLE_ALTERNATING_WRIST_FLEX_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol tripleAlternatingWristFlexWallPlaneEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-006-02-02-01");
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						tripleAlternatingWristFlexWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol tripleAlternatingWristFlexWallPlaneSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-006-02-03-01");
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						tripleAlternatingWristFlexWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol tripleAlternatingWristFlexWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-006-02-01-09");
		tripleAlternatingWristFlexWallPlaneMirrored = new PositionedMovementSymbol(
				tripleAlternatingWristFlexWallPlaneMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(tripleAlternatingWristFlexWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-006-02-02-09");
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-006-02-03-09");
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		doubleStraightMovementWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.DOUBLE_STRAIGHT_MOVEMENT_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.DOUBLE_STRAIGHT_MOVEMENT_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol doubleStraightMovementWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-002-01-02-01");
		doubleStraightMovementWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				doubleStraightMovementWallPlaneEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						doubleStraightMovementWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol doubleStraightMovementWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-002-01-03-01");
		doubleStraightMovementWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				doubleStraightMovementWallPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						doubleStraightMovementWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));

		tripleStraightMovementWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRIPPLE_STRAIGHT_MOVEMENT_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRIPPLE_STRAIGHT_MOVEMENT_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol tripleStraightMovementWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-005-01-02-01");
		tripleStraightMovementWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				tripleStraightMovementWallPlaneEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						tripleStraightMovementWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol tripleStraightMovementWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-005-01-03-01");
		tripleStraightMovementWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				tripleStraightMovementWallPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						tripleStraightMovementWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));

		doubleAlternatingMovementWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.DOUBLE_ALTERNATING_MOVEMENT_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.DOUBLE_ALTERNATING_MOVEMENT_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol doubleAlternatingMovementWallPlaneEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-003-01-02-01");
		doubleAlternatingMovementWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				doubleAlternatingMovementWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						doubleAlternatingMovementWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol doubleAlternatingMovementWallPlaneSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-003-01-03-01");
		doubleAlternatingMovementWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				doubleAlternatingMovementWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						doubleAlternatingMovementWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol doubleAlternatingMovementWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-003-01-01-09");
		doubleAlternatingMovementWallPlaneMirrored = new PositionedMovementSymbol(
				doubleAlternatingMovementWallPlaneMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(doubleAlternatingMovementWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol doubleAlternatingMovementWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-003-01-02-09");
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						doubleAlternatingMovementWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol doubleAlternatingMovementWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-003-01-03-09");
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						doubleAlternatingMovementWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		tripleAlternatingMovementWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRIPPLE_ALTERNATING_MOVEMENT_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRIPPLE_ALTERNATING_MOVEMENT_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol tripleAlternatingMovementWallPlaneEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-006-01-02-01");
		tripleAlternatingMovementWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				tripleAlternatingMovementWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						tripleAlternatingMovementWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol tripleAlternatingMovementWallPlaneSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-006-01-03-01");
		tripleAlternatingMovementWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				tripleAlternatingMovementWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						tripleAlternatingMovementWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol tripleAlternatingMovementWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-006-01-01-09");
		tripleAlternatingMovementWallPlaneMirrored = new PositionedMovementSymbol(
				tripleAlternatingMovementWallPlaneMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(tripleAlternatingMovementWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol tripleAlternatingMovementWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-006-01-02-09");
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						tripleAlternatingMovementWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol tripleAlternatingMovementWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-006-01-03-09");
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						tripleAlternatingMovementWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		crossMovementWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.CROSS_MOVEMENT_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CROSS_MOVEMENT_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol crossMovementWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-004-01-02-01");
		crossMovementWallPlaneEmptyArrowhead = new PositionedMovementSymbol(crossMovementWallPlaneEmptyArrowheadSymbol,
				0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(crossMovementWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol crossMovementWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-004-01-03-01");
		crossMovementWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				crossMovementWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(crossMovementWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol crossMovementWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-004-01-01-09");
		crossMovementWallPlaneMirrored = new PositionedMovementSymbol(crossMovementWallPlaneMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(crossMovementWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol crossMovementWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-004-01-02-09");
		crossMovementWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				crossMovementWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						crossMovementWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol crossMovementWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-004-01-03-09");
		crossMovementWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				crossMovementWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						crossMovementWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		bendWallPlaneSmall = new PositionedMovementSymbol(MovementBaseSymbol.BLEND_WALL_PLANE_SMALL.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.BLEND_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol bendWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-007-01-02-01");
		bendWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(bendWallPlaneSmallEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol bendWallPlaneSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-007-01-03-01");
		bendWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(bendWallPlaneSmallSchemaArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol bendWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-03-007-01-01-09");
		bendWallPlaneSmallMirrored = new PositionedMovementSymbol(bendWallPlaneSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol bendWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-007-01-02-09");
		bendWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				bendWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(bendWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol bendWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-007-01-03-09");
		bendWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				bendWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(bendWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		bendWallPlaneMedium = new PositionedMovementSymbol(MovementBaseSymbol.BLEND_WALL_PLANE_MEDIUM.getIswaSymbol(),
				0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.BLEND_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol bendWallPlaneMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-007-02-02-01");
		bendWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(bendWallPlaneMediumEmptyArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol bendWallPlaneMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-007-02-03-01");
		bendWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(bendWallPlaneMediumSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol bendWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-03-007-02-01-09");
		bendWallPlaneMediumMirrored = new PositionedMovementSymbol(bendWallPlaneMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol bendWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-007-02-02-09");
		bendWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				bendWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(bendWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol bendWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-007-02-03-09");
		bendWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				bendWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(bendWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		bendWallPlaneLarge = new PositionedMovementSymbol(MovementBaseSymbol.BLEND_WALL_PLANE_LARGE.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.BLEND_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol bendWallPlaneLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-007-03-02-01");
		bendWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(bendWallPlaneLargeEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol bendWallPlaneLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-007-03-03-01");
		bendWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(bendWallPlaneLargeSchemaArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol bendWallPlaneLargeMirroredSymbol = symbolFactory.createSymbol("02-03-007-03-01-09");
		bendWallPlaneLargeMirrored = new PositionedMovementSymbol(bendWallPlaneLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(bendWallPlaneLargeMirroredSymbol.getBaseSymbol()));
		Symbol bendWallPlaneLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-007-03-02-09");
		bendWallPlaneLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				bendWallPlaneLargeEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(bendWallPlaneLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol bendWallPlaneLargeSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-007-03-03-09");
		bendWallPlaneLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				bendWallPlaneLargeSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(bendWallPlaneLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		cornerWallPlaneSmall = new PositionedMovementSymbol(MovementBaseSymbol.CORNER_WALL_PLANE_SMALL.getIswaSymbol(),
				0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CORNER_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol cornerWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-008-01-02-01");
		cornerWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(cornerWallPlaneSmallEmptyArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-008-01-03-01");
		cornerWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(cornerWallPlaneSmallSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-03-008-01-01-09");
		cornerWallPlaneSmallMirrored = new PositionedMovementSymbol(cornerWallPlaneSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-008-01-02-09");
		cornerWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				cornerWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(cornerWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-008-01-03-09");
		cornerWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				cornerWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(cornerWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		cornerWallPlaneMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.CORNER_WALL_PLANE_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CORNER_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		;
		Symbol cornerWallPlaneMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-008-02-02-01");
		cornerWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(cornerWallPlaneMediumEmptyArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-008-02-03-01");
		cornerWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(cornerWallPlaneMediumSchemaArrowheadSymbol,
				0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-03-008-02-01-09");
		cornerWallPlaneMediumMirrored = new PositionedMovementSymbol(cornerWallPlaneMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-008-02-02-09");
		cornerWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				cornerWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(cornerWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-008-02-03-09");
		cornerWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				cornerWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						cornerWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		cornerWallPlaneLarge = new PositionedMovementSymbol(MovementBaseSymbol.CORNER_WALL_PLANE_LARGE.getIswaSymbol(),
				0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CORNER_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol cornerWallPlaneLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-008-03-02-01");
		cornerWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(cornerWallPlaneLargeEmptyArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-008-03-03-01");
		cornerWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(cornerWallPlaneLargeSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneLargeMirroredSymbol = symbolFactory.createSymbol("02-03-008-03-01-09");
		cornerWallPlaneLargeMirrored = new PositionedMovementSymbol(cornerWallPlaneLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneLargeMirroredSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-008-03-02-09");
		cornerWallPlaneLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				cornerWallPlaneLargeEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(cornerWallPlaneLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneLargeSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-008-03-03-09");
		cornerWallPlaneLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				cornerWallPlaneLargeSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(cornerWallPlaneLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		cornerWallPlaneWithRotation = new PositionedMovementSymbol(
				MovementBaseSymbol.CORNER_WALL_PLANE_WITH_ROTATION.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CORNER_WALL_PLANE_WITH_ROTATION.getIswaSymbol().getBaseSymbol()));
		Symbol cornerWallPlaneWithRotationEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-008-04-02-01");
		cornerWallPlaneWithRotationEmptyArrowhead = new PositionedMovementSymbol(
				cornerWallPlaneWithRotationEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(cornerWallPlaneWithRotationEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneWithRotationSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-008-04-03-01");
		cornerWallPlaneWithRotationSchemaArrowhead = new PositionedMovementSymbol(
				cornerWallPlaneWithRotationSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(cornerWallPlaneWithRotationSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneWithRotationMirroredSymbol = symbolFactory.createSymbol("02-03-008-04-01-09");
		cornerWallPlaneWithRotationMirrored = new PositionedMovementSymbol(cornerWallPlaneWithRotationMirroredSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(cornerWallPlaneWithRotationMirroredSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneWithRotationEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-008-04-02-09");
		cornerWallPlaneWithRotationEmptyArrowheadMirrored = new PositionedMovementSymbol(
				cornerWallPlaneWithRotationEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						cornerWallPlaneWithRotationEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol cornerWallPlaneWithRotationSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-008-04-03-09");
		cornerWallPlaneWithRotationSchemaArrowheadMirrored = new PositionedMovementSymbol(
				cornerWallPlaneWithRotationSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						cornerWallPlaneWithRotationSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		checkWallPlaneSmall = new PositionedMovementSymbol(MovementBaseSymbol.CHECK_WALL_PLANE_SMALL.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CHECK_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol checkWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-009-01-02-01");
		checkWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(checkWallPlaneSmallEmptyArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol checkWallPlaneSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-009-01-03-01");
		checkWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(checkWallPlaneSmallSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol checkWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-03-009-01-01-09");
		checkWallPlaneSmallMirrored = new PositionedMovementSymbol(checkWallPlaneSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol checkWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-009-01-02-09");
		checkWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				checkWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(checkWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol checkWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-009-01-03-09");
		checkWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				checkWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(checkWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		checkWallPlaneMedium = new PositionedMovementSymbol(MovementBaseSymbol.CHECK_WALL_PLANE_MEDIUM.getIswaSymbol(),
				0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CHECK_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol checkWallPlaneMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-009-02-02-01");
		checkWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(checkWallPlaneMediumEmptyArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol checkWallPlaneMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-009-02-03-01");
		checkWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(checkWallPlaneMediumSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol checkWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-03-009-02-01-09");
		checkWallPlaneMediumMirrored = new PositionedMovementSymbol(checkWallPlaneMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol checkWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-009-02-02-09");
		checkWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				checkWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(checkWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol checkWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-009-02-03-09");
		checkWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				checkWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(checkWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		checkWallPlaneLarge = new PositionedMovementSymbol(MovementBaseSymbol.CHECK_WALL_PLANE_LARGE.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CHECK_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol checkWallPlaneLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-009-03-02-01");
		checkWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(checkWallPlaneLargeEmptyArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol checkWallPlaneLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-009-03-03-01");
		checkWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(checkWallPlaneLargeSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol checkWallPlaneLargeMirroredSymbol = symbolFactory.createSymbol("02-03-009-03-01-09");
		checkWallPlaneLargeMirrored = new PositionedMovementSymbol(checkWallPlaneLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(checkWallPlaneLargeMirroredSymbol.getBaseSymbol()));
		Symbol checkWallPlaneLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-009-03-02-09");
		checkWallPlaneLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				checkWallPlaneLargeEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(checkWallPlaneLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol checkWallPlaneLargeSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-009-03-03-09");
		checkWallPlaneLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				checkWallPlaneLargeSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(checkWallPlaneLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		boxWallPlaneSmall = new PositionedMovementSymbol(MovementBaseSymbol.BOX_WALL_PLANE_SMALL.getIswaSymbol(), 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.BOX_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol boxWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-010-01-02-01");
		boxWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(boxWallPlaneSmallEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol boxWallPlaneSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-010-01-03-01");
		boxWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(boxWallPlaneSmallSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol boxWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-03-010-01-01-09");
		boxWallPlaneSmallMirrored = new PositionedMovementSymbol(boxWallPlaneSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol boxWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-010-01-02-09");
		boxWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				boxWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(boxWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol boxWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-010-01-03-09");
		boxWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				boxWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(boxWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		boxWallPlaneMedium = new PositionedMovementSymbol(MovementBaseSymbol.BOX_WALL_PLANE_MEDIUM.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.BOX_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol boxWallPlaneMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-010-02-02-01");
		boxWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(boxWallPlaneMediumEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol boxWallPlaneMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-010-02-03-01");
		boxWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(boxWallPlaneMediumSchemaArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol boxWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-03-010-02-01-09");
		boxWallPlaneMediumMirrored = new PositionedMovementSymbol(boxWallPlaneMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol boxWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-010-02-02-09");
		boxWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				boxWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(boxWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol boxWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-010-02-03-09");
		boxWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				boxWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(boxWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		boxWallPlaneLarge = new PositionedMovementSymbol(MovementBaseSymbol.BOX_WALL_PLANE_LARGE.getIswaSymbol(), 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.BOX_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol boxWallPlaneLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-010-03-02-01");
		boxWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(boxWallPlaneLargeEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol boxWallPlaneLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-010-03-03-01");
		boxWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(boxWallPlaneLargeSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol boxWallPlaneLargeMirroredSymbol = symbolFactory.createSymbol("02-03-010-03-01-09");
		boxWallPlaneLargeMirrored = new PositionedMovementSymbol(boxWallPlaneLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(boxWallPlaneLargeMirroredSymbol.getBaseSymbol()));
		Symbol boxWallPlaneLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-010-03-02-09");
		boxWallPlaneLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				boxWallPlaneLargeEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(boxWallPlaneLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol boxWallPlaneLargeSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-010-03-03-09");
		boxWallPlaneLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				boxWallPlaneLargeSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(boxWallPlaneLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		zigzagWallPlaneSmall = new PositionedMovementSymbol(MovementBaseSymbol.ZIGZAG_WALL_PLANE_SMALL.getIswaSymbol(),
				0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.ZIGZAG_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol zigzagWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-011-01-02-01");
		zigzagWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(zigzagWallPlaneSmallEmptyArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-011-01-03-01");
		zigzagWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(zigzagWallPlaneSmallSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-03-011-01-01-09");
		zigzagWallPlaneSmallMirrored = new PositionedMovementSymbol(zigzagWallPlaneSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-011-01-02-09");
		zigzagWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				zigzagWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(zigzagWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-011-01-03-09");
		zigzagWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				zigzagWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(zigzagWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		zigzagWallPlaneMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.ZIGZAG_WALL_PLANE_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.ZIGZAG_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol zigzagWallPlaneMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-011-02-02-01");
		zigzagWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(zigzagWallPlaneMediumEmptyArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-011-02-03-01");
		zigzagWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(zigzagWallPlaneMediumSchemaArrowheadSymbol,
				0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-03-011-02-01-09");
		zigzagWallPlaneMediumMirrored = new PositionedMovementSymbol(zigzagWallPlaneMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-011-02-02-09");
		zigzagWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				zigzagWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(zigzagWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-011-02-03-09");
		zigzagWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				zigzagWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						zigzagWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		zigzagWallPlaneLarge = new PositionedMovementSymbol(MovementBaseSymbol.ZIGZAG_WALL_PLANE_LARGE.getIswaSymbol(),
				0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.ZIGZAG_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol zigzagWallPlaneLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-011-03-02-01");
		zigzagWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(zigzagWallPlaneLargeEmptyArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-011-03-03-01");
		zigzagWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(zigzagWallPlaneLargeSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneLargeMirroredSymbol = symbolFactory.createSymbol("02-03-011-03-01-09");
		zigzagWallPlaneLargeMirrored = new PositionedMovementSymbol(zigzagWallPlaneLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(zigzagWallPlaneLargeMirroredSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-011-03-02-09");
		zigzagWallPlaneLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				zigzagWallPlaneLargeEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(zigzagWallPlaneLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol zigzagWallPlaneLargeSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-011-03-03-09");
		zigzagWallPlaneLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				zigzagWallPlaneLargeSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(zigzagWallPlaneLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		peaksWallPlaneSmall = new PositionedMovementSymbol(MovementBaseSymbol.PEAKS_WALL_PLANE_SMALL.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.PEAKS_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol peaksWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-012-01-02-01");
		peaksWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(peaksWallPlaneSmallEmptyArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-012-01-03-01");
		peaksWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(peaksWallPlaneSmallSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-03-012-01-01-09");
		peaksWallPlaneSmallMirrored = new PositionedMovementSymbol(peaksWallPlaneSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-012-01-02-09");
		peaksWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				peaksWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(peaksWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-012-01-03-09");
		peaksWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				peaksWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(peaksWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		peaksWallPlaneMedium = new PositionedMovementSymbol(MovementBaseSymbol.PEAKS_WALL_PLANE_MEDIUM.getIswaSymbol(),
				0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.PEAKS_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol peaksWallPlaneMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-012-02-02-01");
		peaksWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(peaksWallPlaneMediumEmptyArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-012-02-03-01");
		peaksWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(peaksWallPlaneMediumSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-03-012-02-01-09");
		peaksWallPlaneMediumMirrored = new PositionedMovementSymbol(peaksWallPlaneMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-012-02-02-09");
		peaksWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				peaksWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(peaksWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-012-02-03-09");
		peaksWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				peaksWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(peaksWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		peaksWallPlaneLarge = new PositionedMovementSymbol(MovementBaseSymbol.PEAKS_WALL_PLANE_LARGE.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.PEAKS_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol peaksWallPlaneLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-012-03-02-01");
		peaksWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(peaksWallPlaneLargeEmptyArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-012-03-03-01");
		peaksWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(peaksWallPlaneLargeSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneLargeMirroredSymbol = symbolFactory.createSymbol("02-03-012-03-01-09");
		peaksWallPlaneLargeMirrored = new PositionedMovementSymbol(peaksWallPlaneLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(peaksWallPlaneLargeMirroredSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-012-03-02-09");
		peaksWallPlaneLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				peaksWallPlaneLargeEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(peaksWallPlaneLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol peaksWallPlaneLargeSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-03-012-03-03-09");
		peaksWallPlaneLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				peaksWallPlaneLargeSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(peaksWallPlaneLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelRotationSingleWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ROTATION_SINGLE_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ROTATION_SINGLE_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol travelRotationSingleWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-013-01-02-01");
		travelRotationSingleWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				travelRotationSingleWallPlaneEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(travelRotationSingleWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationSingleWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-013-01-03-01");
		travelRotationSingleWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				travelRotationSingleWallPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelRotationSingleWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationSingleWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-013-01-01-09");
		travelRotationSingleWallPlaneMirrored = new PositionedMovementSymbol(
				travelRotationSingleWallPlaneMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelRotationSingleWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationSingleWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-013-01-02-09");
		travelRotationSingleWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationSingleWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationSingleWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationSingleWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-013-01-03-09");
		travelRotationSingleWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationSingleWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationSingleWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelRotationDoubleWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ROTATION_DOUBLE_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ROTATION_DOUBLE_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol travelRotationDoubleWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-014-01-02-01");
		travelRotationDoubleWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				travelRotationDoubleWallPlaneEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(travelRotationDoubleWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationDoubleWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-014-01-03-01");
		travelRotationDoubleWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				travelRotationDoubleWallPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelRotationDoubleWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationDoubleWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-014-01-01-09");
		travelRotationDoubleWallPlaneMirrored = new PositionedMovementSymbol(
				travelRotationDoubleWallPlaneMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelRotationDoubleWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationDoubleWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-014-01-02-09");
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationDoubleWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationDoubleWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationDoubleWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-014-01-03-09");
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationDoubleWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationDoubleWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelRotationAlternatingWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ROTATION_ALTERNATING_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ROTATION_ALTERNATING_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		;
		Symbol travelRotationAlternatingWallPlaneEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-015-01-02-01");
		travelRotationAlternatingWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				travelRotationAlternatingWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationAlternatingWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationAlternatingWallPlaneSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-015-01-03-01");
		travelRotationAlternatingWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				travelRotationAlternatingWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationAlternatingWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationAlternatingWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-015-01-01-09");
		travelRotationAlternatingWallPlaneMirrored = new PositionedMovementSymbol(
				travelRotationAlternatingWallPlaneMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(travelRotationAlternatingWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationAlternatingWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-015-01-02-09");
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationAlternatingWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationAlternatingWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationAlternatingWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-015-01-03-09");
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationAlternatingWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationAlternatingWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelRotationSingleFloorPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ROTATION_SINGLE_FLOOR_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ROTATION_SINGLE_FLOOR_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol travelRotationSingleFloorPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-016-01-02-01");
		travelRotationSingleFloorPlaneEmptyArrowhead = new PositionedMovementSymbol(
				travelRotationSingleFloorPlaneEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelRotationSingleFloorPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationSingleFloorPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-016-01-03-01");
		travelRotationSingleFloorPlaneSchemaArrowhead = new PositionedMovementSymbol(
				travelRotationSingleFloorPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelRotationSingleFloorPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationSingleFloorPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-016-01-01-09");
		travelRotationSingleFloorPlaneMirrored = new PositionedMovementSymbol(
				travelRotationSingleFloorPlaneMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelRotationSingleFloorPlaneMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationSingleFloorPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-016-01-02-09");
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationSingleFloorPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationSingleFloorPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationSingleFloorPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-016-01-03-09");
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationSingleFloorPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationSingleFloorPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelRotationDoubleFloorPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ROTATION_DOUBLE_FLOOR_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ROTATION_DOUBLE_FLOOR_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol travelRotationDoubleFloorPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-017-01-02-01");
		travelRotationDoubleFloorPlaneEmptyArrowhead = new PositionedMovementSymbol(
				travelRotationDoubleFloorPlaneEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelRotationDoubleFloorPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationDoubleFloorPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-017-01-03-01");
		travelRotationDoubleFloorPlaneSchemaArrowhead = new PositionedMovementSymbol(
				travelRotationDoubleFloorPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelRotationDoubleFloorPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationDoubleFloorPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-017-01-01-09");
		travelRotationDoubleFloorPlaneMirrored = new PositionedMovementSymbol(
				travelRotationDoubleFloorPlaneMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelRotationDoubleFloorPlaneMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationDoubleFloorPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-017-01-02-09");
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationDoubleFloorPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationDoubleFloorPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationDoubleFloorPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-017-01-03-09");
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationDoubleFloorPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationDoubleFloorPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelRotationAlternatingFloorPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ROTATION_ALTERNATING_FLOOR_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ROTATION_ALTERNATING_FLOOR_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol travelRotationAlternatingFloorPlaneEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-03-018-01-02-01");
		travelRotationAlternatingFloorPlaneEmptyArrowhead = new PositionedMovementSymbol(
				travelRotationAlternatingFloorPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationAlternatingFloorPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationAlternatingFloorPlaneSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-03-018-01-03-01");
		travelRotationAlternatingFloorPlaneSchemaArrowhead = new PositionedMovementSymbol(
				travelRotationAlternatingFloorPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationAlternatingFloorPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelRotationAlternatingFloorPlaneMirroredSymbol = symbolFactory.createSymbol("02-03-018-01-01-09");
		travelRotationAlternatingFloorPlaneMirrored = new PositionedMovementSymbol(
				travelRotationAlternatingFloorPlaneMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(travelRotationAlternatingFloorPlaneMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationAlternatingFloorPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-018-01-02-09");
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationAlternatingFloorPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelRotationAlternatingFloorPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-018-01-03-09");
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelRotationAlternatingFloorPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelShakingWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_SHAKING_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_SHAKING_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol travelShakingWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-019-01-02-01");
		travelShakingWallPlaneEmptyArrowhead = new PositionedMovementSymbol(travelShakingWallPlaneEmptyArrowheadSymbol,
				0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelShakingWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelShakingWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-019-01-03-01");
		travelShakingWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				travelShakingWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelShakingWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));

		travelArmSpiralWallPlaneSingle = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ARM_SPIRAL_WALL_PLANE_SINGLE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ARM_SPIRAL_WALL_PLANE_SINGLE.getIswaSymbol().getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneSingleEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-020-01-02-01");
		travelArmSpiralWallPlaneSingleEmptyArrowhead = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneSingleEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneSingleEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneSingleSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-020-01-03-01");
		travelArmSpiralWallPlaneSingleSchemaArrowhead = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneSingleSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneSingleSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneSingleMirroredSymbol = symbolFactory.createSymbol("02-03-020-01-01-09");
		travelArmSpiralWallPlaneSingleMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneSingleMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelArmSpiralWallPlaneSingleMirroredSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneSingleEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-020-01-02-09");
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneSingleEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneSingleSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-020-01-03-09");
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneSingleSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelArmSpiralWallPlaneDouble = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ARM_SPIRAL_WALL_PLANE_DOUBLE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ARM_SPIRAL_WALL_PLANE_DOUBLE.getIswaSymbol().getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneDoubleEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-020-02-02-01");
		travelArmSpiralWallPlaneDoubleEmptyArrowhead = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneDoubleEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneDoubleEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneDoubleSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-020-02-03-01");
		travelArmSpiralWallPlaneDoubleSchemaArrowhead = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneDoubleSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneDoubleSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneDoubleMirroredSymbol = symbolFactory.createSymbol("02-03-020-02-01-09");
		travelArmSpiralWallPlaneDoubleMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneDoubleMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelArmSpiralWallPlaneDoubleMirroredSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneDoubleEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-020-02-02-09");
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneDoubleEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneDoubleSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-020-02-03-09");
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneDoubleSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		travelArmSpiralWallPlaneTriple = new PositionedMovementSymbol(
				MovementBaseSymbol.TRAVEL_ARM_SPIRAL_WALL_PLANE_TRIPLE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.TRAVEL_ARM_SPIRAL_WALL_PLANE_TRIPLE.getIswaSymbol().getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneTripleEmptyArrowheadSymbol = symbolFactory.createSymbol("02-03-020-03-02-01");
		travelArmSpiralWallPlaneTripleEmptyArrowhead = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneTripleEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneTripleEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneTripleSchemaArrowheadSymbol = symbolFactory.createSymbol("02-03-020-03-03-01");
		travelArmSpiralWallPlaneTripleSchemaArrowhead = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneTripleSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneTripleSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneTripleMirroredSymbol = symbolFactory.createSymbol("02-03-020-03-01-09");
		travelArmSpiralWallPlaneTripleMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneTripleMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(travelArmSpiralWallPlaneTripleMirroredSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneTripleEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-020-03-02-09");
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneTripleEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol travelArmSpiralWallPlaneTripleSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-03-020-03-03-09");
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored = new PositionedMovementSymbol(
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						travelArmSpiralWallPlaneTripleSchemaArrowheadMirroredSymbol.getBaseSymbol()));

	}

	@Override
	public void testCanIncrease() {

		assertTrue(singleStraightMovementWallPlaneSmall.canIncrease());
		assertTrue(singleStraightMovementWallPlaneSmallEmptyArrowhead.canIncrease());
		assertTrue(singleStraightMovementWallPlaneSmallSchemaArrowhead.canIncrease());

		assertFalse(singleStraightMovementWallPlaneMedium.canIncrease());
		assertFalse(singleStraightMovementWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(singleStraightMovementWallPlaneMediumSchemaArrowhead.canIncrease());

		assertFalse(singleStraightMovementWallPlaneLarge.canIncrease());
		assertFalse(singleStraightMovementWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(singleStraightMovementWallPlaneLargeSchemaArrowhead.canIncrease());

		assertFalse(singleStraightMovementWallPlaneLargest.canIncrease());
		assertFalse(singleStraightMovementWallPlaneLargestEmptyArrowhead.canIncrease());
		assertFalse(singleStraightMovementWallPlaneLargestSchemaArrowhead.canIncrease());

		assertTrue(singleWristFlexWallPlane.canIncrease());
		assertTrue(singleWristFlexWallPlaneEmptyArrowhead.canIncrease());
		assertTrue(singleWristFlexWallPlaneSchemaArrowhead.canIncrease());

		assertTrue(doubleWristFlexWallPlane.canIncrease());
		assertTrue(doubleWristFlexWallPlaneEmptyArrowhead.canIncrease());
		assertTrue(doubleWristFlexWallPlaneSchemaArrowhead.canIncrease());

		assertFalse(tripleWristFlexWallPlane.canIncrease());
		assertFalse(tripleWristFlexWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(tripleWristFlexWallPlaneSchemaArrowhead.canIncrease());

		assertFalse(doubleAlternatingWristFlexWallPlane.canIncrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneMirrored.canIncrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(tripleAlternatingWristFlexWallPlane.canIncrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneMirrored.canIncrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertTrue(doubleStraightMovementWallPlane.canIncrease());
		assertTrue(doubleStraightMovementWallPlaneEmptyArrowhead.canIncrease());
		assertTrue(doubleStraightMovementWallPlaneSchemaArrowhead.canIncrease());

		assertFalse(tripleStraightMovementWallPlane.canIncrease());
		assertFalse(tripleStraightMovementWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(tripleStraightMovementWallPlaneSchemaArrowhead.canIncrease());

		assertFalse(doubleAlternatingMovementWallPlane.canIncrease());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(doubleAlternatingMovementWallPlaneMirrored.canIncrease());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(tripleAlternatingMovementWallPlane.canIncrease());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(tripleAlternatingMovementWallPlaneMirrored.canIncrease());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(crossMovementWallPlane.canIncrease());
		assertFalse(crossMovementWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(crossMovementWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(crossMovementWallPlaneMirrored.canIncrease());
		assertFalse(crossMovementWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(crossMovementWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(bendWallPlaneSmall.canIncrease());
		assertFalse(bendWallPlaneSmallEmptyArrowhead.canIncrease());
		assertFalse(bendWallPlaneSmallSchemaArrowhead.canIncrease());
		assertFalse(bendWallPlaneSmallMirrored.canIncrease());
		assertFalse(bendWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(bendWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(bendWallPlaneMedium.canIncrease());
		assertFalse(bendWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(bendWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(bendWallPlaneMediumMirrored.canIncrease());
		assertFalse(bendWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(bendWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(bendWallPlaneLarge.canIncrease());
		assertFalse(bendWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(bendWallPlaneLargeSchemaArrowhead.canIncrease());
		assertFalse(bendWallPlaneLargeMirrored.canIncrease());
		assertFalse(bendWallPlaneLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(bendWallPlaneLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(cornerWallPlaneSmall.canIncrease());
		assertFalse(cornerWallPlaneSmallEmptyArrowhead.canIncrease());
		assertFalse(cornerWallPlaneSmallSchemaArrowhead.canIncrease());
		assertFalse(cornerWallPlaneSmallMirrored.canIncrease());
		assertFalse(cornerWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(cornerWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(cornerWallPlaneMedium.canIncrease());
		assertFalse(cornerWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(cornerWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(cornerWallPlaneMediumMirrored.canIncrease());
		assertFalse(cornerWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(cornerWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(cornerWallPlaneLarge.canIncrease());
		assertFalse(cornerWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(cornerWallPlaneLargeSchemaArrowhead.canIncrease());
		assertFalse(cornerWallPlaneLargeMirrored.canIncrease());
		assertFalse(cornerWallPlaneLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(cornerWallPlaneLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(cornerWallPlaneWithRotation.canIncrease());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowhead.canIncrease());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowhead.canIncrease());
		assertFalse(cornerWallPlaneWithRotationMirrored.canIncrease());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canIncrease());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canIncrease());

		assertFalse(checkWallPlaneSmall.canIncrease());
		assertFalse(checkWallPlaneSmallEmptyArrowhead.canIncrease());
		assertFalse(checkWallPlaneSmallSchemaArrowhead.canIncrease());
		assertFalse(checkWallPlaneSmallMirrored.canIncrease());
		assertFalse(checkWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(checkWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(checkWallPlaneMedium.canIncrease());
		assertFalse(checkWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(checkWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(checkWallPlaneMediumMirrored.canIncrease());
		assertFalse(checkWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(checkWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(checkWallPlaneLarge.canIncrease());
		assertFalse(checkWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(checkWallPlaneLargeSchemaArrowhead.canIncrease());
		assertFalse(checkWallPlaneLargeMirrored.canIncrease());
		assertFalse(checkWallPlaneLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(checkWallPlaneLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(boxWallPlaneSmall.canIncrease());
		assertFalse(boxWallPlaneSmallEmptyArrowhead.canIncrease());
		assertFalse(boxWallPlaneSmallSchemaArrowhead.canIncrease());
		assertFalse(boxWallPlaneSmallMirrored.canIncrease());
		assertFalse(boxWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(boxWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(boxWallPlaneMedium.canIncrease());
		assertFalse(boxWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(boxWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(boxWallPlaneMediumMirrored.canIncrease());
		assertFalse(boxWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(boxWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(boxWallPlaneLarge.canIncrease());
		assertFalse(boxWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(boxWallPlaneLargeSchemaArrowhead.canIncrease());
		assertFalse(boxWallPlaneLargeMirrored.canIncrease());
		assertFalse(boxWallPlaneLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(boxWallPlaneLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(zigzagWallPlaneSmall.canIncrease());
		assertFalse(zigzagWallPlaneSmallEmptyArrowhead.canIncrease());
		assertFalse(zigzagWallPlaneSmallSchemaArrowhead.canIncrease());
		assertFalse(zigzagWallPlaneSmallMirrored.canIncrease());
		assertFalse(zigzagWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(zigzagWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(zigzagWallPlaneMedium.canIncrease());
		assertFalse(zigzagWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(zigzagWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(zigzagWallPlaneMediumMirrored.canIncrease());
		assertFalse(zigzagWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(zigzagWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(zigzagWallPlaneLarge.canIncrease());
		assertFalse(zigzagWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(zigzagWallPlaneLargeSchemaArrowhead.canIncrease());
		assertFalse(zigzagWallPlaneLargeMirrored.canIncrease());
		assertFalse(zigzagWallPlaneLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(zigzagWallPlaneLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(peaksWallPlaneSmall.canIncrease());
		assertFalse(peaksWallPlaneSmallEmptyArrowhead.canIncrease());
		assertFalse(peaksWallPlaneSmallSchemaArrowhead.canIncrease());
		assertFalse(peaksWallPlaneSmallMirrored.canIncrease());
		assertFalse(peaksWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(peaksWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(peaksWallPlaneMedium.canIncrease());
		assertFalse(peaksWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(peaksWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(peaksWallPlaneMediumMirrored.canIncrease());
		assertFalse(peaksWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(peaksWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(peaksWallPlaneLarge.canIncrease());
		assertFalse(peaksWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(peaksWallPlaneLargeSchemaArrowhead.canIncrease());
		assertFalse(peaksWallPlaneLargeMirrored.canIncrease());
		assertFalse(peaksWallPlaneLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(peaksWallPlaneLargeSchemaArrowheadMirrored.canIncrease());

		assertTrue(travelRotationSingleWallPlane.canIncrease());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowhead.canIncrease());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowhead.canIncrease());
		assertTrue(travelRotationSingleWallPlaneMirrored.canIncrease());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(travelRotationDoubleWallPlane.canIncrease());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(travelRotationDoubleWallPlaneMirrored.canIncrease());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(travelRotationAlternatingWallPlane.canIncrease());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(travelRotationAlternatingWallPlaneMirrored.canIncrease());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertTrue(travelRotationSingleFloorPlane.canIncrease());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowhead.canIncrease());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowhead.canIncrease());
		assertTrue(travelRotationSingleFloorPlaneMirrored.canIncrease());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canIncrease());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(travelRotationDoubleFloorPlane.canIncrease());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowhead.canIncrease());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowhead.canIncrease());
		assertFalse(travelRotationDoubleFloorPlaneMirrored.canIncrease());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(travelRotationAlternatingFloorPlane.canIncrease());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowhead.canIncrease());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowhead.canIncrease());
		assertFalse(travelRotationAlternatingFloorPlaneMirrored.canIncrease());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(travelShakingWallPlane.canIncrease());
		assertFalse(travelShakingWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(travelShakingWallPlaneSchemaArrowhead.canIncrease());

		assertTrue(travelArmSpiralWallPlaneSingle.canIncrease());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowhead.canIncrease());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowhead.canIncrease());
		assertTrue(travelArmSpiralWallPlaneSingleMirrored.canIncrease());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canIncrease());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canIncrease());

		assertTrue(travelArmSpiralWallPlaneDouble.canIncrease());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canIncrease());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canIncrease());
		assertTrue(travelArmSpiralWallPlaneDoubleMirrored.canIncrease());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canIncrease());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canIncrease());

		assertFalse(travelArmSpiralWallPlaneTriple.canIncrease());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowhead.canIncrease());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowhead.canIncrease());
		assertFalse(travelArmSpiralWallPlaneTripleMirrored.canIncrease());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canIncrease());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canIncrease());

	}

	@Override
	public void testIncrease() {

		singleStraightMovementWallPlaneSmall.increase();
		assertEquals(doubleStraightMovementWallPlane.getSymbol(), singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.increase();
		assertEquals(doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol(),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.increase();
		assertEquals(doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol(),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		singleWristFlexWallPlane.increase();
		assertEquals(doubleWristFlexWallPlane.getSymbol(), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.increase();
		assertEquals(doubleWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.increase();
		assertEquals(doubleWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleWristFlexWallPlane.increase();
		assertEquals(tripleWristFlexWallPlane.getSymbol(), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.increase();
		assertEquals(tripleWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.increase();
		assertEquals(tripleWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleStraightMovementWallPlane.increase();
		assertEquals(tripleStraightMovementWallPlane.getSymbol(), doubleStraightMovementWallPlane.getSymbol());
		doubleStraightMovementWallPlaneEmptyArrowhead.increase();
		assertEquals(tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol(),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleStraightMovementWallPlaneSchemaArrowhead.increase();
		assertEquals(tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol(),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleWallPlane.increase();
		assertEquals(travelRotationDoubleWallPlane.getSymbol(), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.increase();
		assertEquals(travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol(),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.increase();
		assertEquals(travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol(),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneMirrored.increase();
		assertEquals(travelRotationDoubleWallPlaneMirrored.getSymbol(),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.increase();
		assertEquals(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.increase();
		assertEquals(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlane.increase();
		assertEquals(travelRotationDoubleFloorPlane.getSymbol(), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.increase();
		assertEquals(travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.increase();
		assertEquals(travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneMirrored.increase();
		assertEquals(travelRotationDoubleFloorPlaneMirrored.getSymbol(),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.increase();
		assertEquals(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.increase();
		assertEquals(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneSingle.increase();
		assertEquals(travelArmSpiralWallPlaneDouble.getSymbol(), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.increase();
		assertEquals(travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol(),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.increase();
		assertEquals(travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol(),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.increase();
		assertEquals(travelArmSpiralWallPlaneDoubleMirrored.getSymbol(),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.increase();
		assertEquals(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.increase();
		assertEquals(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDouble.increase();
		assertEquals(travelArmSpiralWallPlaneTriple.getSymbol(), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.increase();
		assertEquals(travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol(),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.increase();
		assertEquals(travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol(),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.increase();
		assertEquals(travelArmSpiralWallPlaneTripleMirrored.getSymbol(),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.increase();
		assertEquals(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.increase();
		assertEquals(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
	}

	@Override
	public void testCanDecrease() {

		assertFalse(singleStraightMovementWallPlaneSmall.canDecrease());
		assertFalse(singleStraightMovementWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(singleStraightMovementWallPlaneSmallSchemaArrowhead.canDecrease());

		assertFalse(singleStraightMovementWallPlaneMedium.canDecrease());
		assertFalse(singleStraightMovementWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(singleStraightMovementWallPlaneMediumSchemaArrowhead.canDecrease());

		assertFalse(singleStraightMovementWallPlaneLarge.canDecrease());
		assertFalse(singleStraightMovementWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(singleStraightMovementWallPlaneLargeSchemaArrowhead.canDecrease());

		assertFalse(singleStraightMovementWallPlaneLargest.canDecrease());
		assertFalse(singleStraightMovementWallPlaneLargestEmptyArrowhead.canDecrease());
		assertFalse(singleStraightMovementWallPlaneLargestSchemaArrowhead.canDecrease());

		assertFalse(singleWristFlexWallPlane.canDecrease());
		assertFalse(singleWristFlexWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(singleWristFlexWallPlaneSchemaArrowhead.canDecrease());

		assertTrue(doubleWristFlexWallPlane.canDecrease());
		assertTrue(doubleWristFlexWallPlaneEmptyArrowhead.canDecrease());
		assertTrue(doubleWristFlexWallPlaneSchemaArrowhead.canDecrease());

		assertTrue(tripleWristFlexWallPlane.canDecrease());
		assertTrue(tripleWristFlexWallPlaneEmptyArrowhead.canDecrease());
		assertTrue(tripleWristFlexWallPlaneSchemaArrowhead.canDecrease());

		assertFalse(doubleAlternatingWristFlexWallPlane.canDecrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneMirrored.canDecrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(tripleAlternatingWristFlexWallPlane.canDecrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneMirrored.canDecrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertTrue(doubleStraightMovementWallPlane.canDecrease());
		assertTrue(doubleStraightMovementWallPlaneEmptyArrowhead.canDecrease());
		assertTrue(doubleStraightMovementWallPlaneSchemaArrowhead.canDecrease());

		assertTrue(tripleStraightMovementWallPlane.canDecrease());
		assertTrue(tripleStraightMovementWallPlaneEmptyArrowhead.canDecrease());
		assertTrue(tripleStraightMovementWallPlaneSchemaArrowhead.canDecrease());

		assertFalse(doubleAlternatingMovementWallPlane.canDecrease());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(doubleAlternatingMovementWallPlaneMirrored.canDecrease());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(tripleAlternatingMovementWallPlane.canDecrease());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(tripleAlternatingMovementWallPlaneMirrored.canDecrease());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(crossMovementWallPlane.canDecrease());
		assertFalse(crossMovementWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(crossMovementWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(crossMovementWallPlaneMirrored.canDecrease());
		assertFalse(crossMovementWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(crossMovementWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(bendWallPlaneSmall.canDecrease());
		assertFalse(bendWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(bendWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(bendWallPlaneSmallMirrored.canDecrease());
		assertFalse(bendWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(bendWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(bendWallPlaneMedium.canDecrease());
		assertFalse(bendWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(bendWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(bendWallPlaneMediumMirrored.canDecrease());
		assertFalse(bendWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(bendWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(bendWallPlaneLarge.canDecrease());
		assertFalse(bendWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(bendWallPlaneLargeSchemaArrowhead.canDecrease());
		assertFalse(bendWallPlaneLargeMirrored.canDecrease());
		assertFalse(bendWallPlaneLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(bendWallPlaneLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(cornerWallPlaneSmall.canDecrease());
		assertFalse(cornerWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(cornerWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(cornerWallPlaneSmallMirrored.canDecrease());
		assertFalse(cornerWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(cornerWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(cornerWallPlaneMedium.canDecrease());
		assertFalse(cornerWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(cornerWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(cornerWallPlaneMediumMirrored.canDecrease());
		assertFalse(cornerWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(cornerWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(cornerWallPlaneLarge.canDecrease());
		assertFalse(cornerWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(cornerWallPlaneLargeSchemaArrowhead.canDecrease());
		assertFalse(cornerWallPlaneLargeMirrored.canDecrease());
		assertFalse(cornerWallPlaneLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(cornerWallPlaneLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(cornerWallPlaneWithRotation.canDecrease());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowhead.canDecrease());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowhead.canDecrease());
		assertFalse(cornerWallPlaneWithRotationMirrored.canDecrease());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canDecrease());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canDecrease());

		assertFalse(checkWallPlaneSmall.canDecrease());
		assertFalse(checkWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(checkWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(checkWallPlaneSmallMirrored.canDecrease());
		assertFalse(checkWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(checkWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(checkWallPlaneMedium.canDecrease());
		assertFalse(checkWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(checkWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(checkWallPlaneMediumMirrored.canDecrease());
		assertFalse(checkWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(checkWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(checkWallPlaneLarge.canDecrease());
		assertFalse(checkWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(checkWallPlaneLargeSchemaArrowhead.canDecrease());
		assertFalse(checkWallPlaneLargeMirrored.canDecrease());
		assertFalse(checkWallPlaneLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(checkWallPlaneLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(boxWallPlaneSmall.canDecrease());
		assertFalse(boxWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(boxWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(boxWallPlaneSmallMirrored.canDecrease());
		assertFalse(boxWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(boxWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(boxWallPlaneMedium.canDecrease());
		assertFalse(boxWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(boxWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(boxWallPlaneMediumMirrored.canDecrease());
		assertFalse(boxWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(boxWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(boxWallPlaneLarge.canDecrease());
		assertFalse(boxWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(boxWallPlaneLargeSchemaArrowhead.canDecrease());
		assertFalse(boxWallPlaneLargeMirrored.canDecrease());
		assertFalse(boxWallPlaneLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(boxWallPlaneLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(zigzagWallPlaneSmall.canDecrease());
		assertFalse(zigzagWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(zigzagWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(zigzagWallPlaneSmallMirrored.canDecrease());
		assertFalse(zigzagWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(zigzagWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(zigzagWallPlaneMedium.canDecrease());
		assertFalse(zigzagWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(zigzagWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(zigzagWallPlaneMediumMirrored.canDecrease());
		assertFalse(zigzagWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(zigzagWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(zigzagWallPlaneLarge.canDecrease());
		assertFalse(zigzagWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(zigzagWallPlaneLargeSchemaArrowhead.canDecrease());
		assertFalse(zigzagWallPlaneLargeMirrored.canDecrease());
		assertFalse(zigzagWallPlaneLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(zigzagWallPlaneLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(peaksWallPlaneSmall.canDecrease());
		assertFalse(peaksWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(peaksWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(peaksWallPlaneSmallMirrored.canDecrease());
		assertFalse(peaksWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(peaksWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(peaksWallPlaneMedium.canDecrease());
		assertFalse(peaksWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(peaksWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(peaksWallPlaneMediumMirrored.canDecrease());
		assertFalse(peaksWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(peaksWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(peaksWallPlaneLarge.canDecrease());
		assertFalse(peaksWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(peaksWallPlaneLargeSchemaArrowhead.canDecrease());
		assertFalse(peaksWallPlaneLargeMirrored.canDecrease());
		assertFalse(peaksWallPlaneLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(peaksWallPlaneLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(travelRotationSingleWallPlane.canDecrease());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(travelRotationSingleWallPlaneMirrored.canDecrease());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertTrue(travelRotationDoubleWallPlane.canDecrease());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowhead.canDecrease());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowhead.canDecrease());
		assertTrue(travelRotationDoubleWallPlaneMirrored.canDecrease());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(travelRotationAlternatingWallPlane.canDecrease());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(travelRotationAlternatingWallPlaneMirrored.canDecrease());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(travelRotationSingleFloorPlane.canDecrease());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowhead.canDecrease());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowhead.canDecrease());
		assertFalse(travelRotationSingleFloorPlaneMirrored.canDecrease());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canDecrease());

		assertTrue(travelRotationDoubleFloorPlane.canDecrease());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowhead.canDecrease());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowhead.canDecrease());
		assertTrue(travelRotationDoubleFloorPlaneMirrored.canDecrease());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canDecrease());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(travelRotationAlternatingFloorPlane.canDecrease());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowhead.canDecrease());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowhead.canDecrease());
		assertFalse(travelRotationAlternatingFloorPlaneMirrored.canDecrease());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(travelShakingWallPlane.canDecrease());
		assertFalse(travelShakingWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(travelShakingWallPlaneSchemaArrowhead.canDecrease());

		assertFalse(travelArmSpiralWallPlaneSingle.canDecrease());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowhead.canDecrease());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowhead.canDecrease());
		assertFalse(travelArmSpiralWallPlaneSingleMirrored.canDecrease());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canDecrease());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canDecrease());

		assertTrue(travelArmSpiralWallPlaneDouble.canDecrease());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canDecrease());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canDecrease());
		assertTrue(travelArmSpiralWallPlaneDoubleMirrored.canDecrease());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canDecrease());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canDecrease());

		assertTrue(travelArmSpiralWallPlaneTriple.canDecrease());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowhead.canDecrease());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowhead.canDecrease());
		assertTrue(travelArmSpiralWallPlaneTripleMirrored.canDecrease());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canDecrease());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canDecrease());

	}

	@Override
	public void testDecrease() {

		doubleWristFlexWallPlane.decrease();
		assertEquals(singleWristFlexWallPlane.getSymbol(), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.decrease();
		assertEquals(singleWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.decrease();
		assertEquals(singleWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleWristFlexWallPlane.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleStraightMovementWallPlane.decrease();
		assertEquals(singleStraightMovementWallPlaneSmall.getSymbol(), doubleStraightMovementWallPlane.getSymbol());
		doubleStraightMovementWallPlaneEmptyArrowhead.decrease();
		assertEquals(singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol(),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleStraightMovementWallPlaneSchemaArrowhead.decrease();
		assertEquals(singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol(),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleStraightMovementWallPlane.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-01-01"), tripleStraightMovementWallPlane.getSymbol());
		tripleStraightMovementWallPlaneEmptyArrowhead.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-02-01"),
				tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleStraightMovementWallPlaneSchemaArrowhead.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-03-01"),
				tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleWallPlane.decrease();
		assertEquals(travelRotationSingleWallPlane.getSymbol(), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.decrease();
		assertEquals(travelRotationSingleWallPlaneEmptyArrowhead.getSymbol(),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.decrease();
		assertEquals(travelRotationSingleWallPlaneSchemaArrowhead.getSymbol(),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneMirrored.decrease();
		assertEquals(travelRotationSingleWallPlaneMirrored.getSymbol(),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.decrease();
		assertEquals(travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.decrease();
		assertEquals(travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.decrease();
		assertEquals(travelRotationSingleFloorPlane.getSymbol(), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.decrease();
		assertEquals(travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.decrease();
		assertEquals(travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.decrease();
		assertEquals(travelRotationSingleFloorPlaneMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.decrease();
		assertEquals(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.decrease();
		assertEquals(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDouble.decrease();
		assertEquals(travelArmSpiralWallPlaneSingle.getSymbol(), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.decrease();
		assertEquals(travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol(),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.decrease();
		assertEquals(travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol(),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.decrease();
		assertEquals(travelArmSpiralWallPlaneSingleMirrored.getSymbol(),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.decrease();
		assertEquals(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.decrease();
		assertEquals(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTriple.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.decrease();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
	}

	@Override
	public void testCanRotate() {

		assertTrue(singleStraightMovementWallPlaneSmall.canRotate());
		assertTrue(singleStraightMovementWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(singleStraightMovementWallPlaneSmallSchemaArrowhead.canRotate());

		assertTrue(singleStraightMovementWallPlaneMedium.canRotate());
		assertTrue(singleStraightMovementWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(singleStraightMovementWallPlaneMediumSchemaArrowhead.canRotate());

		assertTrue(singleStraightMovementWallPlaneLarge.canRotate());
		assertTrue(singleStraightMovementWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(singleStraightMovementWallPlaneLargeSchemaArrowhead.canRotate());

		assertTrue(singleStraightMovementWallPlaneLargest.canRotate());
		assertTrue(singleStraightMovementWallPlaneLargestEmptyArrowhead.canRotate());
		assertTrue(singleStraightMovementWallPlaneLargestSchemaArrowhead.canRotate());

		assertTrue(singleWristFlexWallPlane.canRotate());
		assertTrue(singleWristFlexWallPlaneEmptyArrowhead.canRotate());
		assertTrue(singleWristFlexWallPlaneSchemaArrowhead.canRotate());

		assertTrue(doubleWristFlexWallPlane.canRotate());
		assertTrue(doubleWristFlexWallPlaneEmptyArrowhead.canRotate());
		assertTrue(doubleWristFlexWallPlaneSchemaArrowhead.canRotate());

		assertTrue(tripleWristFlexWallPlane.canRotate());
		assertTrue(tripleWristFlexWallPlaneEmptyArrowhead.canRotate());
		assertTrue(tripleWristFlexWallPlaneSchemaArrowhead.canRotate());

		assertTrue(doubleAlternatingWristFlexWallPlane.canRotate());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canRotate());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canRotate());
		assertTrue(doubleAlternatingWristFlexWallPlaneMirrored.canRotate());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(tripleAlternatingWristFlexWallPlane.canRotate());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canRotate());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canRotate());
		assertTrue(tripleAlternatingWristFlexWallPlaneMirrored.canRotate());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(doubleStraightMovementWallPlane.canRotate());
		assertTrue(doubleStraightMovementWallPlaneEmptyArrowhead.canRotate());
		assertTrue(doubleStraightMovementWallPlaneSchemaArrowhead.canRotate());

		assertTrue(tripleStraightMovementWallPlane.canRotate());
		assertTrue(tripleStraightMovementWallPlaneEmptyArrowhead.canRotate());
		assertTrue(tripleStraightMovementWallPlaneSchemaArrowhead.canRotate());

		assertTrue(doubleAlternatingMovementWallPlane.canRotate());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowhead.canRotate());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowhead.canRotate());
		assertTrue(doubleAlternatingMovementWallPlaneMirrored.canRotate());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(tripleAlternatingMovementWallPlane.canRotate());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowhead.canRotate());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowhead.canRotate());
		assertTrue(tripleAlternatingMovementWallPlaneMirrored.canRotate());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(crossMovementWallPlane.canRotate());
		assertTrue(crossMovementWallPlaneEmptyArrowhead.canRotate());
		assertTrue(crossMovementWallPlaneSchemaArrowhead.canRotate());
		assertTrue(crossMovementWallPlaneMirrored.canRotate());
		assertTrue(crossMovementWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(crossMovementWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(bendWallPlaneSmall.canRotate());
		assertTrue(bendWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(bendWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(bendWallPlaneSmallMirrored.canRotate());
		assertTrue(bendWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(bendWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(bendWallPlaneMedium.canRotate());
		assertTrue(bendWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(bendWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(bendWallPlaneMediumMirrored.canRotate());
		assertTrue(bendWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(bendWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(bendWallPlaneLarge.canRotate());
		assertTrue(bendWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(bendWallPlaneLargeSchemaArrowhead.canRotate());
		assertTrue(bendWallPlaneLargeMirrored.canRotate());
		assertTrue(bendWallPlaneLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(bendWallPlaneLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(cornerWallPlaneSmall.canRotate());
		assertTrue(cornerWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(cornerWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(cornerWallPlaneSmallMirrored.canRotate());
		assertTrue(cornerWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(cornerWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(cornerWallPlaneMedium.canRotate());
		assertTrue(cornerWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(cornerWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(cornerWallPlaneMediumMirrored.canRotate());
		assertTrue(cornerWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(cornerWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(cornerWallPlaneLarge.canRotate());
		assertTrue(cornerWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(cornerWallPlaneLargeSchemaArrowhead.canRotate());
		assertTrue(cornerWallPlaneLargeMirrored.canRotate());
		assertTrue(cornerWallPlaneLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(cornerWallPlaneLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(cornerWallPlaneWithRotation.canRotate());
		assertTrue(cornerWallPlaneWithRotationEmptyArrowhead.canRotate());
		assertTrue(cornerWallPlaneWithRotationSchemaArrowhead.canRotate());
		assertTrue(cornerWallPlaneWithRotationMirrored.canRotate());
		assertTrue(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canRotate());
		assertTrue(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canRotate());

		assertTrue(checkWallPlaneSmall.canRotate());
		assertTrue(checkWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(checkWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(checkWallPlaneSmallMirrored.canRotate());
		assertTrue(checkWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(checkWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(checkWallPlaneMedium.canRotate());
		assertTrue(checkWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(checkWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(checkWallPlaneMediumMirrored.canRotate());
		assertTrue(checkWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(checkWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(checkWallPlaneLarge.canRotate());
		assertTrue(checkWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(checkWallPlaneLargeSchemaArrowhead.canRotate());
		assertTrue(checkWallPlaneLargeMirrored.canRotate());
		assertTrue(checkWallPlaneLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(checkWallPlaneLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(boxWallPlaneSmall.canRotate());
		assertTrue(boxWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(boxWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(boxWallPlaneSmallMirrored.canRotate());
		assertTrue(boxWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(boxWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(boxWallPlaneMedium.canRotate());
		assertTrue(boxWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(boxWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(boxWallPlaneMediumMirrored.canRotate());
		assertTrue(boxWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(boxWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(boxWallPlaneLarge.canRotate());
		assertTrue(boxWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(boxWallPlaneLargeSchemaArrowhead.canRotate());
		assertTrue(boxWallPlaneLargeMirrored.canRotate());
		assertTrue(boxWallPlaneLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(boxWallPlaneLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(zigzagWallPlaneSmall.canRotate());
		assertTrue(zigzagWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(zigzagWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(zigzagWallPlaneSmallMirrored.canRotate());
		assertTrue(zigzagWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(zigzagWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(zigzagWallPlaneMedium.canRotate());
		assertTrue(zigzagWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(zigzagWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(zigzagWallPlaneMediumMirrored.canRotate());
		assertTrue(zigzagWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(zigzagWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(zigzagWallPlaneLarge.canRotate());
		assertTrue(zigzagWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(zigzagWallPlaneLargeSchemaArrowhead.canRotate());
		assertTrue(zigzagWallPlaneLargeMirrored.canRotate());
		assertTrue(zigzagWallPlaneLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(zigzagWallPlaneLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(peaksWallPlaneSmall.canRotate());
		assertTrue(peaksWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(peaksWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(peaksWallPlaneSmallMirrored.canRotate());
		assertTrue(peaksWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(peaksWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(peaksWallPlaneMedium.canRotate());
		assertTrue(peaksWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(peaksWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(peaksWallPlaneMediumMirrored.canRotate());
		assertTrue(peaksWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(peaksWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(peaksWallPlaneLarge.canRotate());
		assertTrue(peaksWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(peaksWallPlaneLargeSchemaArrowhead.canRotate());
		assertTrue(peaksWallPlaneLargeMirrored.canRotate());
		assertTrue(peaksWallPlaneLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(peaksWallPlaneLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(travelRotationSingleWallPlane.canRotate());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowhead.canRotate());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowhead.canRotate());
		assertTrue(travelRotationSingleWallPlaneMirrored.canRotate());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(travelRotationDoubleWallPlane.canRotate());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowhead.canRotate());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowhead.canRotate());
		assertTrue(travelRotationDoubleWallPlaneMirrored.canRotate());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(travelRotationAlternatingWallPlane.canRotate());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowhead.canRotate());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowhead.canRotate());
		assertTrue(travelRotationAlternatingWallPlaneMirrored.canRotate());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(travelRotationSingleFloorPlane.canRotate());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowhead.canRotate());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowhead.canRotate());
		assertTrue(travelRotationSingleFloorPlaneMirrored.canRotate());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(travelRotationDoubleFloorPlane.canRotate());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowhead.canRotate());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowhead.canRotate());
		assertTrue(travelRotationDoubleFloorPlaneMirrored.canRotate());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(travelRotationAlternatingFloorPlane.canRotate());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowhead.canRotate());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowhead.canRotate());
		assertTrue(travelRotationAlternatingFloorPlaneMirrored.canRotate());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(travelShakingWallPlane.canRotate());
		assertTrue(travelShakingWallPlaneEmptyArrowhead.canRotate());
		assertTrue(travelShakingWallPlaneSchemaArrowhead.canRotate());

		assertTrue(travelArmSpiralWallPlaneSingle.canRotate());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowhead.canRotate());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowhead.canRotate());
		assertTrue(travelArmSpiralWallPlaneSingleMirrored.canRotate());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canRotate());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canRotate());

		assertTrue(travelArmSpiralWallPlaneDouble.canRotate());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canRotate());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canRotate());
		assertTrue(travelArmSpiralWallPlaneDoubleMirrored.canRotate());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canRotate());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canRotate());

		assertTrue(travelArmSpiralWallPlaneTriple.canRotate());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowhead.canRotate());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowhead.canRotate());
		assertTrue(travelArmSpiralWallPlaneTripleMirrored.canRotate());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canRotate());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canRotate());

	}

	@Override
	public void testRotateClockwise() {
		singleStraightMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-08"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-07"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-06"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-05"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-04"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-03"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-02"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-01"),
				singleStraightMovementWallPlaneSmall.getSymbol());

		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-08"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-07"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-06"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-05"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-04"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-03"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-02"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-01"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-08"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-07"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-06"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-05"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-04"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-03"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-02"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-01"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-08"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-07"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-06"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-05"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-04"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-03"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-02"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-01"),
				singleStraightMovementWallPlaneMedium.getSymbol());

		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-08"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-07"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-06"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-05"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-04"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-03"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-02"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-01"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-08"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-07"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-06"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-05"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-04"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-03"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-02"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-01"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-08"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-07"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-06"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-05"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-04"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-03"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-02"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-01"),
				singleStraightMovementWallPlaneLarge.getSymbol());

		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-08"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-07"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-06"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-05"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-04"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-03"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-02"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-01"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-08"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-07"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-06"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-05"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-04"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-03"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-02"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-01"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-08"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-07"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-06"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-05"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-04"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-03"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-02"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());

		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-08"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-07"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-06"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-05"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-04"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-03"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-02"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-08"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-07"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-06"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-05"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-04"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-03"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-02"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());

		singleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-08"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-07"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-06"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-05"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-04"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-03"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-02"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-01"), singleWristFlexWallPlane.getSymbol());

		doubleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-08"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-07"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-06"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-05"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-04"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-03"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-02"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"), doubleWristFlexWallPlane.getSymbol());

		tripleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-08"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-07"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-06"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-05"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-04"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-03"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-02"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-01"), tripleWristFlexWallPlane.getSymbol());

		singleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-08"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-07"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-06"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-05"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-04"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-03"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-02"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-01"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-08"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-07"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-06"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-05"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-04"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-03"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-02"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-08"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-07"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-06"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-05"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-04"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-03"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-02"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-01"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		singleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-08"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-07"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-06"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-05"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-04"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-03"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-02"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-01"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-08"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-07"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-06"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-05"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-04"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-03"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-02"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-08"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-07"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-06"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-05"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-04"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-03"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-02"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-01"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-08"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-07"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-06"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-05"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-04"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-03"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-02"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-01"), doubleAlternatingWristFlexWallPlane.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-08"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-07"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-06"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-05"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-04"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-03"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-02"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-01"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-08"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-07"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-06"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-05"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-04"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-03"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-02"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-01"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-10"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-11"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-12"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-13"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-14"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-15"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-16"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-09"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-10"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-11"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-12"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-13"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-14"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-15"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-16"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-09"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-10"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-11"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-12"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-13"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-14"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-15"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-16"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-09"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-08"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-07"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-06"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-05"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-04"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-03"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-02"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-01"), tripleAlternatingWristFlexWallPlane.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-08"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-07"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-06"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-05"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-04"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-03"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-02"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-01"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-08"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-07"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-06"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-05"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-04"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-03"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-02"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-01"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-10"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-11"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-12"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-13"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-14"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-15"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-16"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-09"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-10"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-11"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-12"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-13"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-14"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-15"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-16"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-09"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-10"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-11"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-12"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-13"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-14"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-15"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-16"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-09"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		doubleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-08"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-07"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-06"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-05"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-04"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-03"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-02"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-01"), doubleAlternatingMovementWallPlane.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-08"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-07"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-06"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-05"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-04"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-03"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-02"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-01"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-08"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-07"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-06"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-05"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-04"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-03"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-02"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-01"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-10"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-11"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-12"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-13"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-14"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-15"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-16"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-09"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-10"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-11"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-12"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-13"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-14"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-15"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-16"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-09"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-10"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-11"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-12"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-13"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-14"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-15"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-16"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-09"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-08"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-07"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-06"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-05"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-04"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-03"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-02"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-01"), tripleAlternatingMovementWallPlane.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-08"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-07"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-06"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-05"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-04"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-03"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-02"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-01"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-08"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-07"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-06"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-05"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-04"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-03"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-02"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-01"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-10"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-11"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-12"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-13"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-14"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-15"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-16"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-09"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-10"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-11"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-12"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-13"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-14"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-15"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-16"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-09"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-10"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-11"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-12"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-13"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-14"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-15"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-16"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-09"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		crossMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-08"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-07"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-06"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-05"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-04"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-03"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-02"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-01"), crossMovementWallPlane.getSymbol());

		crossMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-08"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-07"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-06"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-05"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-04"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-03"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-02"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-01"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());

		crossMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-08"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-07"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-06"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-05"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-04"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-03"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-02"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-01"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());

		crossMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-10"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-11"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-12"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-13"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-14"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-15"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-16"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-09"), crossMovementWallPlaneMirrored.getSymbol());

		crossMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-10"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-11"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-12"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-13"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-14"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-15"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-16"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-09"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		crossMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-10"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-11"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-12"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-13"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-14"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-15"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-16"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-09"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotation.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-08"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-07"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-06"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-05"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-04"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-03"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-02"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-01"), cornerWallPlaneWithRotation.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-08"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-07"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-06"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-05"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-04"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-03"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-02"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-01"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-08"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-07"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-06"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-05"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-04"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-03"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-02"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-01"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());

		cornerWallPlaneWithRotationMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-10"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-11"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-12"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-13"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-14"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-15"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-16"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-09"), cornerWallPlaneWithRotationMirrored.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-10"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-11"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-12"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-13"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-14"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-15"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-16"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-09"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-10"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-11"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-12"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-13"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-14"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-15"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-16"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-09"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-08"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-07"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-06"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-05"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-04"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-03"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-02"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-01"), bendWallPlaneSmall.getSymbol());

		bendWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-08"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-07"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-06"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-05"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-04"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-03"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-02"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-01"), bendWallPlaneSmallEmptyArrowhead.getSymbol());

		bendWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-08"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-07"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-06"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-05"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-04"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-03"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-02"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-01"), bendWallPlaneSmallSchemaArrowhead.getSymbol());

		bendWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-10"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-11"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-12"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-13"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-14"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-15"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-16"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-09"), bendWallPlaneSmallMirrored.getSymbol());

		bendWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-10"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-11"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-12"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-13"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-14"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-15"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-16"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-09"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-10"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-11"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-12"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-13"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-14"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-15"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-16"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-09"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-08"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-07"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-06"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-05"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-04"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-03"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-02"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-01"), bendWallPlaneMedium.getSymbol());

		bendWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-08"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-07"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-06"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-05"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-04"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-03"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-02"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-01"), bendWallPlaneMediumEmptyArrowhead.getSymbol());

		bendWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-08"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-07"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-06"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-05"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-04"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-03"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-02"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-01"), bendWallPlaneMediumSchemaArrowhead.getSymbol());

		bendWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-10"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-11"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-12"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-13"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-14"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-15"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-16"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-09"), bendWallPlaneMediumMirrored.getSymbol());

		bendWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-10"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-11"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-12"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-13"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-14"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-15"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-16"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-09"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-10"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-11"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-12"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-13"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-14"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-15"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-16"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-09"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-08"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-07"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-06"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-05"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-04"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-03"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-02"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-01"), bendWallPlaneLarge.getSymbol());

		bendWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-08"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-07"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-06"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-05"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-04"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-03"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-02"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-01"), bendWallPlaneLargeEmptyArrowhead.getSymbol());

		bendWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-08"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-07"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-06"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-05"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-04"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-03"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-02"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-01"), bendWallPlaneLargeSchemaArrowhead.getSymbol());

		bendWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-10"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-11"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-12"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-13"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-14"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-15"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-16"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-09"), bendWallPlaneLargeMirrored.getSymbol());

		bendWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-10"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-11"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-12"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-13"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-14"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-15"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-16"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-09"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-10"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-11"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-12"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-13"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-14"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-15"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-16"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-09"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-08"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-07"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-06"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-05"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-04"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-03"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-02"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-01"), cornerWallPlaneSmall.getSymbol());

		cornerWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-08"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-07"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-06"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-05"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-04"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-03"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-02"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-01"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());

		cornerWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-08"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-07"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-06"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-05"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-04"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-03"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-02"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-01"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());

		cornerWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-10"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-11"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-12"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-13"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-14"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-15"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-16"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-09"), cornerWallPlaneSmallMirrored.getSymbol());

		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-10"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-11"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-12"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-13"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-14"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-15"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-16"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-09"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-10"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-11"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-12"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-13"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-14"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-15"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-16"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-09"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-08"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-07"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-06"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-05"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-04"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-03"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-02"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-01"), cornerWallPlaneMedium.getSymbol());

		cornerWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-08"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-07"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-06"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-05"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-04"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-03"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-02"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-01"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());

		cornerWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-08"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-07"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-06"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-05"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-04"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-03"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-02"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-01"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());

		cornerWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-10"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-11"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-12"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-13"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-14"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-15"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-16"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-09"), cornerWallPlaneMediumMirrored.getSymbol());

		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-10"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-11"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-12"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-13"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-14"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-15"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-16"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-09"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-10"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-11"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-12"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-13"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-14"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-15"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-16"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-09"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-08"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-07"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-06"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-05"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-04"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-03"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-02"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-01"), cornerWallPlaneLarge.getSymbol());

		cornerWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-08"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-07"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-06"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-05"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-04"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-03"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-02"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-01"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());

		cornerWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-08"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-07"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-06"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-05"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-04"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-03"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-02"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-01"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());

		cornerWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-10"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-11"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-12"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-13"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-14"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-15"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-16"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-09"), cornerWallPlaneLargeMirrored.getSymbol());

		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-10"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-11"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-12"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-13"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-14"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-15"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-16"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-09"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-10"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-11"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-12"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-13"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-14"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-15"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-16"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-09"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-08"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-07"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-06"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-05"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-04"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-03"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-02"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-01"), checkWallPlaneSmall.getSymbol());

		checkWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-08"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-07"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-06"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-05"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-04"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-03"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-02"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-01"), checkWallPlaneSmallEmptyArrowhead.getSymbol());

		checkWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-08"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-07"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-06"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-05"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-04"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-03"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-02"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-01"), checkWallPlaneSmallSchemaArrowhead.getSymbol());

		checkWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-10"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-11"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-12"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-13"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-14"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-15"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-16"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-09"), checkWallPlaneSmallMirrored.getSymbol());

		checkWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-10"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-11"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-12"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-13"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-14"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-15"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-16"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-09"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-10"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-11"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-12"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-13"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-14"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-15"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-16"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-09"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-08"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-07"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-06"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-05"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-04"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-03"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-02"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-01"), checkWallPlaneMedium.getSymbol());

		checkWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-08"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-07"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-06"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-05"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-04"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-03"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-02"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-01"), checkWallPlaneMediumEmptyArrowhead.getSymbol());

		checkWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-08"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-07"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-06"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-05"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-04"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-03"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-02"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-01"), checkWallPlaneMediumSchemaArrowhead.getSymbol());

		checkWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-10"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-11"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-12"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-13"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-14"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-15"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-16"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-09"), checkWallPlaneMediumMirrored.getSymbol());

		checkWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-10"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-11"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-12"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-13"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-14"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-15"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-16"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-09"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-10"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-11"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-12"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-13"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-14"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-15"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-16"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-09"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-08"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-07"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-06"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-05"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-04"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-03"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-02"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-01"), checkWallPlaneLarge.getSymbol());

		checkWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-08"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-07"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-06"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-05"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-04"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-03"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-02"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-01"), checkWallPlaneLargeEmptyArrowhead.getSymbol());

		checkWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-08"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-07"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-06"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-05"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-04"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-03"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-02"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-01"), checkWallPlaneLargeSchemaArrowhead.getSymbol());

		checkWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-10"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-11"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-12"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-13"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-14"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-15"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-16"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-09"), checkWallPlaneLargeMirrored.getSymbol());

		checkWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-10"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-11"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-12"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-13"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-14"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-15"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-16"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-09"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-10"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-11"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-12"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-13"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-14"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-15"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-16"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-09"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-08"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-07"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-06"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-05"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-04"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-03"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-02"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-01"), boxWallPlaneSmall.getSymbol());

		boxWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-08"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-07"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-06"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-05"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-04"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-03"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-02"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-01"), boxWallPlaneSmallEmptyArrowhead.getSymbol());

		boxWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-08"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-07"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-06"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-05"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-04"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-03"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-02"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-01"), boxWallPlaneSmallSchemaArrowhead.getSymbol());

		boxWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-10"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-11"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-12"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-13"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-14"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-15"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-16"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-09"), boxWallPlaneSmallMirrored.getSymbol());

		boxWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-10"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-11"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-12"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-13"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-14"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-15"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-16"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-09"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-10"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-11"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-12"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-13"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-14"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-15"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-16"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-09"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-08"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-07"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-06"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-05"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-04"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-03"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-02"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-01"), boxWallPlaneMedium.getSymbol());

		boxWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-08"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-07"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-06"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-05"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-04"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-03"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-02"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-01"), boxWallPlaneMediumEmptyArrowhead.getSymbol());

		boxWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-08"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-07"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-06"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-05"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-04"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-03"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-02"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-01"), boxWallPlaneMediumSchemaArrowhead.getSymbol());

		boxWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-10"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-11"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-12"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-13"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-14"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-15"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-16"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-09"), boxWallPlaneMediumMirrored.getSymbol());

		boxWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-10"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-11"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-12"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-13"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-14"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-15"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-16"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-09"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-10"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-11"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-12"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-13"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-14"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-15"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-16"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-09"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-08"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-07"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-06"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-05"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-04"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-03"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-02"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-01"), boxWallPlaneLarge.getSymbol());

		boxWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-08"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-07"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-06"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-05"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-04"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-03"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-02"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-01"), boxWallPlaneLargeEmptyArrowhead.getSymbol());

		boxWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-08"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-07"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-06"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-05"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-04"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-03"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-02"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-01"), boxWallPlaneLargeSchemaArrowhead.getSymbol());

		boxWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-10"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-11"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-12"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-13"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-14"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-15"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-16"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-09"), boxWallPlaneLargeMirrored.getSymbol());

		boxWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-10"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-11"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-12"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-13"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-14"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-15"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-16"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-09"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-10"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-11"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-12"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-13"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-14"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-15"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-16"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-09"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-08"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-07"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-06"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-05"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-04"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-03"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-02"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-01"), zigzagWallPlaneSmall.getSymbol());

		zigzagWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-08"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-07"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-06"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-05"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-04"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-03"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-02"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-01"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());

		zigzagWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-08"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-07"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-06"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-05"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-04"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-03"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-02"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-01"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());

		zigzagWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-10"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-11"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-12"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-13"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-14"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-15"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-16"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-09"), zigzagWallPlaneSmallMirrored.getSymbol());

		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-10"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-11"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-12"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-13"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-14"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-15"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-16"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-09"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-10"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-11"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-12"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-13"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-14"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-15"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-16"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-09"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-08"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-07"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-06"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-05"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-04"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-03"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-02"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-01"), zigzagWallPlaneMedium.getSymbol());

		zigzagWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-08"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-07"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-06"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-05"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-04"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-03"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-02"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-01"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());

		zigzagWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-08"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-07"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-06"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-05"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-04"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-03"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-02"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-01"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());

		zigzagWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-10"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-11"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-12"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-13"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-14"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-15"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-16"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-09"), zigzagWallPlaneMediumMirrored.getSymbol());

		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-10"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-11"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-12"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-13"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-14"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-15"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-16"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-09"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-10"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-11"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-12"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-13"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-14"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-15"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-16"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-09"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-08"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-07"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-06"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-05"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-04"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-03"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-02"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-01"), zigzagWallPlaneLarge.getSymbol());

		zigzagWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-08"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-07"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-06"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-05"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-04"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-03"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-02"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-01"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());

		zigzagWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-08"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-07"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-06"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-05"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-04"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-03"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-02"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-01"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());

		zigzagWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-10"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-11"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-12"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-13"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-14"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-15"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-16"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-09"), zigzagWallPlaneLargeMirrored.getSymbol());

		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-10"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-11"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-12"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-13"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-14"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-15"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-16"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-09"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-10"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-11"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-12"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-13"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-14"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-15"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-16"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-09"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-08"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-07"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-06"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-05"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-04"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-03"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-02"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-01"), peaksWallPlaneSmall.getSymbol());

		peaksWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-08"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-07"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-06"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-05"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-04"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-03"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-02"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-01"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());

		peaksWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-08"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-07"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-06"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-05"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-04"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-03"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-02"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-01"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());

		peaksWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-10"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-11"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-12"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-13"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-14"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-15"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-16"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-09"), peaksWallPlaneSmallMirrored.getSymbol());

		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-10"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-11"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-12"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-13"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-14"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-15"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-16"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-09"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-10"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-11"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-12"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-13"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-14"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-15"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-16"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-09"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-08"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-07"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-06"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-05"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-04"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-03"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-02"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-01"), peaksWallPlaneMedium.getSymbol());

		peaksWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-08"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-07"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-06"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-05"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-04"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-03"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-02"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-01"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());

		peaksWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-08"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-07"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-06"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-05"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-04"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-03"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-02"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-01"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());

		peaksWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-10"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-11"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-12"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-13"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-14"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-15"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-16"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-09"), peaksWallPlaneMediumMirrored.getSymbol());

		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-10"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-11"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-12"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-13"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-14"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-15"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-16"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-09"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-10"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-11"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-12"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-13"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-14"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-15"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-16"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-09"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-08"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-07"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-06"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-05"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-04"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-03"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-02"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-01"), peaksWallPlaneLarge.getSymbol());

		peaksWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-08"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-07"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-06"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-05"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-04"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-03"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-02"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-01"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());

		peaksWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-08"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-07"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-06"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-05"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-04"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-03"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-02"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-01"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());

		peaksWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-10"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-11"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-12"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-13"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-14"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-15"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-16"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-09"), peaksWallPlaneLargeMirrored.getSymbol());

		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-10"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-11"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-12"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-13"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-14"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-15"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-16"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-09"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-10"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-11"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-12"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-13"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-14"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-15"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-16"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-09"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-08"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-07"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-06"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-05"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-04"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-03"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-02"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-01"), travelRotationSingleWallPlane.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-08"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-07"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-06"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-05"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-04"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-03"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-02"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-08"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-07"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-06"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-05"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-04"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-03"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-02"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-10"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-11"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-12"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-13"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-14"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-15"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-16"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-10"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-11"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-12"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-13"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-14"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-15"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-16"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-10"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-11"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-12"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-13"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-14"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-15"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-16"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-08"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-07"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-06"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-05"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-04"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-03"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-02"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-01"), travelRotationDoubleWallPlane.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-08"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-07"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-06"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-05"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-04"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-03"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-02"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-08"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-07"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-06"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-05"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-04"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-03"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-02"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-10"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-11"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-12"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-13"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-14"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-15"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-16"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-10"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-11"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-12"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-13"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-14"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-15"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-16"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-10"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-11"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-12"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-13"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-14"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-15"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-16"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-08"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-07"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-06"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-05"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-04"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-03"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-02"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-01"), travelRotationAlternatingWallPlane.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-08"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-07"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-06"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-05"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-04"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-03"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-02"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-08"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-07"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-06"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-05"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-04"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-03"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-02"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-10"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-11"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-12"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-13"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-14"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-15"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-16"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-10"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-11"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-12"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-13"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-14"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-15"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-16"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-10"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-11"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-12"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-13"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-14"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-15"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-16"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-08"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-06"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-05"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-04"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-02"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-08"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-06"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-05"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-04"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-02"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-08"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-06"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-05"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-04"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-02"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-10"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-12"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-13"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-14"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-16"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-10"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-12"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-13"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-14"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-16"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-10"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-12"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-13"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-14"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-16"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-08"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-06"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-05"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-04"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-02"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-08"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-06"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-05"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-04"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-02"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-08"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-06"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-05"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-04"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-02"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-10"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-12"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-13"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-14"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-16"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-10"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-12"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-13"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-14"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-16"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-10"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-12"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-13"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-14"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-16"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-08"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-06"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-05"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-04"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-02"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-08"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-06"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-05"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-04"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-02"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-08"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-06"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-05"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-04"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-02"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-10"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-12"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-13"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-14"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-16"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-10"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-12"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-13"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-14"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-16"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-10"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-12"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-13"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-14"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-16"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelShakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-08"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-07"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-06"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-05"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-04"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-03"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-02"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-01"), travelShakingWallPlane.getSymbol());

		travelShakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-08"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-07"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-06"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-05"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-04"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-03"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-02"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-01"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());

		travelShakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-08"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-07"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-06"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-05"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-04"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-03"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-02"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-01"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingle.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-08"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-07"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-06"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-05"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-04"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-03"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-02"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"), travelArmSpiralWallPlaneSingle.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-08"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-07"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-06"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-05"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-04"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-03"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-02"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-08"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-07"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-06"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-05"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-04"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-03"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-02"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-10"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-11"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-12"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-13"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-14"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-15"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-16"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-10"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-11"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-12"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-13"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-14"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-15"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-16"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-10"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-11"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-12"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-13"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-14"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-15"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-16"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-08"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-07"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-06"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-05"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-04"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-03"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-02"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"), travelArmSpiralWallPlaneDouble.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-08"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-07"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-06"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-05"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-04"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-03"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-02"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-08"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-07"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-06"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-05"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-04"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-03"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-02"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-10"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-11"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-12"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-13"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-14"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-15"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-16"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-10"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-11"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-12"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-13"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-14"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-15"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-16"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-10"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-11"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-12"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-13"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-14"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-15"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-16"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTriple.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-08"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-07"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-06"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-05"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-04"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-03"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-02"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"), travelArmSpiralWallPlaneTriple.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-08"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-07"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-06"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-05"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-04"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-03"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-02"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-08"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-07"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-06"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-05"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-04"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-03"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-02"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-10"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-11"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-12"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-13"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-14"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-15"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-16"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-10"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-11"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-12"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-13"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-14"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-15"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-16"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-10"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-11"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-12"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-13"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-14"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-15"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-16"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testRotateCounterClockwise() {

		singleStraightMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-02"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-03"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-04"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-05"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-06"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-07"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-08"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-01"),
				singleStraightMovementWallPlaneSmall.getSymbol());

		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-02"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-03"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-04"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-05"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-06"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-07"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-08"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-01"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-02"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-03"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-04"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-05"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-06"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-07"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-08"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-01"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-02"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-03"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-04"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-05"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-06"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-07"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-08"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-01"),
				singleStraightMovementWallPlaneMedium.getSymbol());

		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-02"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-03"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-04"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-05"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-06"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-07"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-08"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-01"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-02"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-03"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-04"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-05"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-06"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-07"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-08"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-01"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-02"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-03"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-04"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-05"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-06"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-07"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-08"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-01"),
				singleStraightMovementWallPlaneLarge.getSymbol());

		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-02"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-03"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-04"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-05"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-06"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-07"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-08"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-01"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-02"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-03"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-04"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-05"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-06"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-07"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-08"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-01"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-02"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-03"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-04"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-05"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-06"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-07"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-08"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());

		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-02"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-03"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-04"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-05"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-06"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-07"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-08"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-02"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-03"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-04"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-05"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-06"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-07"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-08"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-02"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-03"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-04"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-05"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-06"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-07"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-08"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());

		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-02"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-03"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-04"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-05"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-06"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-07"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-08"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-02"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-03"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-04"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-05"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-06"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-07"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-08"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());

		singleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-02"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-03"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-04"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-05"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-06"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-07"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-08"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-01"), singleWristFlexWallPlane.getSymbol());

		doubleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-02"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-03"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-04"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-05"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-06"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-07"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-08"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"), doubleWristFlexWallPlane.getSymbol());

		tripleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-02"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-03"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-04"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-05"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-06"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-07"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-08"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-01"), tripleWristFlexWallPlane.getSymbol());

		singleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-02"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-03"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-04"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-05"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-06"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-07"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-08"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-01"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-02"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-03"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-04"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-05"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-06"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-07"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-08"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-02"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-03"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-04"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-05"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-06"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-07"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-08"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-01"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		singleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-02"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-03"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-04"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-05"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-06"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-07"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-08"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-01"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-02"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-03"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-04"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-05"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-06"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-07"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-08"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-02"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-03"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-04"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-05"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-06"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-07"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-08"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-01"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-02"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-03"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-04"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-05"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-06"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-07"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-08"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-01"), doubleAlternatingWristFlexWallPlane.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-02"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-03"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-04"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-05"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-06"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-07"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-08"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-01"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-02"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-03"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-04"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-05"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-06"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-07"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-08"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-01"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-16"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-15"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-14"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-13"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-12"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-11"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-10"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-09"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-16"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-15"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-14"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-13"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-12"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-11"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-10"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-09"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-16"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-15"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-14"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-13"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-12"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-11"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-10"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-09"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-02"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-03"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-04"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-05"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-06"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-07"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-08"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-01"), tripleAlternatingWristFlexWallPlane.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-02"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-03"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-04"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-05"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-06"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-07"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-08"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-01"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-02"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-03"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-04"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-05"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-06"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-07"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-08"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-01"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-16"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-15"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-14"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-13"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-12"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-11"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-10"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-09"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-16"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-15"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-14"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-13"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-12"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-11"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-10"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-09"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-16"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-15"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-14"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-13"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-12"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-11"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-10"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-09"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		doubleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-02"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-03"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-04"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-05"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-06"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-07"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-08"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-01"), doubleAlternatingMovementWallPlane.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-02"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-03"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-04"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-05"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-06"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-07"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-08"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-01"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-02"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-03"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-04"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-05"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-06"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-07"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-08"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-01"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-16"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-15"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-14"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-13"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-12"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-11"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-10"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-09"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-16"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-15"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-14"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-13"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-12"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-11"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-10"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-09"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-16"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-15"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-14"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-13"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-12"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-11"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-10"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-09"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-02"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-03"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-04"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-05"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-06"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-07"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-08"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-01"), tripleAlternatingMovementWallPlane.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-02"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-03"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-04"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-05"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-06"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-07"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-08"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-01"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-02"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-03"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-04"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-05"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-06"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-07"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-08"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-01"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-16"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-15"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-14"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-13"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-12"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-11"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-10"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-09"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-16"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-15"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-14"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-13"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-12"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-11"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-10"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-09"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-16"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-15"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-14"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-13"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-12"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-11"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-10"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-09"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		crossMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-02"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-03"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-04"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-05"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-06"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-07"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-08"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-01"), crossMovementWallPlane.getSymbol());

		crossMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-02"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-03"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-04"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-05"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-06"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-07"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-08"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-01"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());

		crossMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-02"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-03"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-04"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-05"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-06"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-07"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-08"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-01"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());

		crossMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-16"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-15"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-14"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-13"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-12"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-11"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-10"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-09"), crossMovementWallPlaneMirrored.getSymbol());

		crossMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-16"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-15"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-14"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-13"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-12"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-11"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-10"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-09"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		crossMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-16"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-15"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-14"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-13"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-12"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-11"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-10"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-09"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotation.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-02"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-03"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-04"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-05"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-06"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-07"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-08"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-01"), cornerWallPlaneWithRotation.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-02"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-03"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-04"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-05"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-06"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-07"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-08"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-01"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-02"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-03"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-04"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-05"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-06"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-07"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-08"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-01"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());

		cornerWallPlaneWithRotationMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-16"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-15"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-14"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-13"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-12"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-11"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-10"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-09"), cornerWallPlaneWithRotationMirrored.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-16"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-15"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-14"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-13"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-12"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-11"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-10"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-09"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-16"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-15"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-14"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-13"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-12"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-11"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-10"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-09"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-02"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-03"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-04"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-05"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-06"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-07"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-08"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-01"), bendWallPlaneSmall.getSymbol());

		bendWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-02"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-03"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-04"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-05"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-06"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-07"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-08"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-01"), bendWallPlaneSmallEmptyArrowhead.getSymbol());

		bendWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-02"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-03"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-04"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-05"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-06"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-07"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-08"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-01"), bendWallPlaneSmallSchemaArrowhead.getSymbol());

		bendWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-16"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-15"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-14"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-13"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-12"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-11"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-10"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-09"), bendWallPlaneSmallMirrored.getSymbol());

		bendWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-16"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-15"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-14"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-13"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-12"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-11"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-10"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-09"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-16"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-15"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-14"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-13"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-12"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-11"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-10"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-09"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-02"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-03"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-04"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-05"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-06"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-07"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-08"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-01"), bendWallPlaneMedium.getSymbol());

		bendWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-02"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-03"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-04"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-05"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-06"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-07"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-08"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-01"), bendWallPlaneMediumEmptyArrowhead.getSymbol());

		bendWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-02"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-03"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-04"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-05"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-06"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-07"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-08"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-01"), bendWallPlaneMediumSchemaArrowhead.getSymbol());

		bendWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-16"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-15"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-14"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-13"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-12"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-11"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-10"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-09"), bendWallPlaneMediumMirrored.getSymbol());

		bendWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-16"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-15"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-14"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-13"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-12"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-11"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-10"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-09"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-16"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-15"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-14"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-13"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-12"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-11"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-10"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-09"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-02"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-03"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-04"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-05"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-06"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-07"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-08"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-01"), bendWallPlaneLarge.getSymbol());

		bendWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-02"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-03"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-04"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-05"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-06"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-07"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-08"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-01"), bendWallPlaneLargeEmptyArrowhead.getSymbol());

		bendWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-02"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-03"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-04"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-05"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-06"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-07"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-08"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-01"), bendWallPlaneLargeSchemaArrowhead.getSymbol());

		bendWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-16"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-15"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-14"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-13"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-12"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-11"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-10"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-09"), bendWallPlaneLargeMirrored.getSymbol());

		bendWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-16"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-15"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-14"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-13"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-12"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-11"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-10"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-09"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-16"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-15"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-14"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-13"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-12"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-11"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-10"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-09"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-02"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-03"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-04"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-05"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-06"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-07"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-08"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-01"), cornerWallPlaneSmall.getSymbol());

		cornerWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-02"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-03"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-04"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-05"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-06"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-07"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-08"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-01"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());

		cornerWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-02"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-03"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-04"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-05"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-06"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-07"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-08"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-01"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());

		cornerWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-16"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-15"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-14"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-13"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-12"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-11"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-10"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-09"), cornerWallPlaneSmallMirrored.getSymbol());

		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-16"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-15"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-14"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-13"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-12"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-11"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-10"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-09"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-16"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-15"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-14"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-13"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-12"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-11"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-10"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-09"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-02"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-03"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-04"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-05"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-06"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-07"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-08"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-01"), cornerWallPlaneMedium.getSymbol());

		cornerWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-02"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-03"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-04"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-05"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-06"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-07"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-08"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-01"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());

		cornerWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-02"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-03"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-04"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-05"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-06"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-07"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-08"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-01"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());

		cornerWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-16"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-15"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-14"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-13"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-12"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-11"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-10"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-09"), cornerWallPlaneMediumMirrored.getSymbol());

		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-16"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-15"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-14"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-13"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-12"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-11"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-10"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-09"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-16"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-15"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-14"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-13"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-12"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-11"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-10"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-09"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-02"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-03"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-04"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-05"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-06"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-07"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-08"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-01"), cornerWallPlaneLarge.getSymbol());

		cornerWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-02"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-03"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-04"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-05"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-06"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-07"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-08"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-01"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());

		cornerWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-02"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-03"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-04"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-05"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-06"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-07"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-08"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-01"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());

		cornerWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-16"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-15"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-14"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-13"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-12"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-11"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-10"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-09"), cornerWallPlaneLargeMirrored.getSymbol());

		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-16"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-15"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-14"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-13"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-12"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-11"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-10"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-09"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-16"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-15"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-14"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-13"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-12"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-11"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-10"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-09"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-02"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-03"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-04"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-05"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-06"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-07"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-08"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-01"), checkWallPlaneSmall.getSymbol());

		checkWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-02"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-03"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-04"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-05"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-06"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-07"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-08"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-01"), checkWallPlaneSmallEmptyArrowhead.getSymbol());

		checkWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-02"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-03"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-04"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-05"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-06"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-07"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-08"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-01"), checkWallPlaneSmallSchemaArrowhead.getSymbol());

		checkWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-16"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-15"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-14"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-13"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-12"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-11"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-10"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-09"), checkWallPlaneSmallMirrored.getSymbol());

		checkWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-16"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-15"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-14"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-13"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-12"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-11"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-10"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-09"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-16"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-15"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-14"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-13"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-12"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-11"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-10"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-09"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-02"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-03"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-04"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-05"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-06"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-07"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-08"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-01"), checkWallPlaneMedium.getSymbol());

		checkWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-02"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-03"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-04"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-05"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-06"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-07"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-08"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-01"), checkWallPlaneMediumEmptyArrowhead.getSymbol());

		checkWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-02"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-03"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-04"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-05"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-06"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-07"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-08"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-01"), checkWallPlaneMediumSchemaArrowhead.getSymbol());

		checkWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-16"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-15"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-14"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-13"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-12"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-11"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-10"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-09"), checkWallPlaneMediumMirrored.getSymbol());

		checkWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-16"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-15"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-14"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-13"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-12"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-11"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-10"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-09"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-16"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-15"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-14"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-13"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-12"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-11"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-10"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-09"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-02"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-03"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-04"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-05"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-06"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-07"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-08"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-01"), checkWallPlaneLarge.getSymbol());

		checkWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-02"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-03"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-04"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-05"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-06"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-07"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-08"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-01"), checkWallPlaneLargeEmptyArrowhead.getSymbol());

		checkWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-02"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-03"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-04"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-05"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-06"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-07"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-08"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-01"), checkWallPlaneLargeSchemaArrowhead.getSymbol());

		checkWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-16"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-15"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-14"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-13"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-12"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-11"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-10"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-09"), checkWallPlaneLargeMirrored.getSymbol());

		checkWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-16"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-15"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-14"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-13"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-12"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-11"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-10"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-09"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-16"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-15"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-14"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-13"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-12"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-11"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-10"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-09"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-02"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-03"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-04"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-05"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-06"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-07"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-08"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-01"), boxWallPlaneSmall.getSymbol());

		boxWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-02"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-03"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-04"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-05"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-06"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-07"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-08"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-01"), boxWallPlaneSmallEmptyArrowhead.getSymbol());

		boxWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-02"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-03"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-04"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-05"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-06"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-07"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-08"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-01"), boxWallPlaneSmallSchemaArrowhead.getSymbol());

		boxWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-16"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-15"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-14"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-13"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-12"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-11"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-10"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-09"), boxWallPlaneSmallMirrored.getSymbol());

		boxWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-16"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-15"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-14"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-13"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-12"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-11"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-10"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-09"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-16"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-15"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-14"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-13"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-12"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-11"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-10"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-09"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-02"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-03"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-04"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-05"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-06"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-07"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-08"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-01"), boxWallPlaneMedium.getSymbol());

		boxWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-02"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-03"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-04"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-05"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-06"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-07"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-08"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-01"), boxWallPlaneMediumEmptyArrowhead.getSymbol());

		boxWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-02"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-03"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-04"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-05"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-06"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-07"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-08"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-01"), boxWallPlaneMediumSchemaArrowhead.getSymbol());

		boxWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-16"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-15"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-14"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-13"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-12"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-11"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-10"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-09"), boxWallPlaneMediumMirrored.getSymbol());

		boxWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-16"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-15"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-14"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-13"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-12"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-11"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-10"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-09"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-16"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-15"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-14"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-13"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-12"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-11"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-10"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-09"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-02"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-03"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-04"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-05"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-06"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-07"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-08"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-01"), boxWallPlaneLarge.getSymbol());

		boxWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-02"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-03"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-04"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-05"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-06"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-07"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-08"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-01"), boxWallPlaneLargeEmptyArrowhead.getSymbol());

		boxWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-02"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-03"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-04"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-05"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-06"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-07"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-08"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-01"), boxWallPlaneLargeSchemaArrowhead.getSymbol());

		boxWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-16"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-15"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-14"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-13"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-12"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-11"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-10"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-09"), boxWallPlaneLargeMirrored.getSymbol());

		boxWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-16"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-15"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-14"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-13"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-12"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-11"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-10"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-09"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-16"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-15"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-14"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-13"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-12"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-11"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-10"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-09"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-02"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-03"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-04"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-05"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-06"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-07"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-08"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-01"), zigzagWallPlaneSmall.getSymbol());

		zigzagWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-02"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-03"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-04"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-05"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-06"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-07"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-08"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-01"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());

		zigzagWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-02"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-03"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-04"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-05"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-06"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-07"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-08"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-01"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());

		zigzagWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-16"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-15"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-14"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-13"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-12"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-11"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-10"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-09"), zigzagWallPlaneSmallMirrored.getSymbol());

		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-16"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-15"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-14"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-13"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-12"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-11"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-10"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-09"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-16"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-15"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-14"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-13"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-12"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-11"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-10"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-09"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-02"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-03"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-04"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-05"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-06"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-07"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-08"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-01"), zigzagWallPlaneMedium.getSymbol());

		zigzagWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-02"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-03"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-04"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-05"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-06"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-07"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-08"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-01"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());

		zigzagWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-02"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-03"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-04"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-05"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-06"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-07"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-08"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-01"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());

		zigzagWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-16"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-15"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-14"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-13"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-12"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-11"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-10"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-09"), zigzagWallPlaneMediumMirrored.getSymbol());

		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-16"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-15"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-14"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-13"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-12"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-11"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-10"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-09"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-16"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-15"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-14"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-13"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-12"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-11"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-10"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-09"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-02"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-03"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-04"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-05"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-06"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-07"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-08"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-01"), zigzagWallPlaneLarge.getSymbol());

		zigzagWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-02"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-03"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-04"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-05"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-06"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-07"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-08"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-01"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());

		zigzagWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-02"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-03"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-04"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-05"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-06"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-07"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-08"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-01"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());

		zigzagWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-16"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-15"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-14"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-13"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-12"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-11"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-10"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-09"), zigzagWallPlaneLargeMirrored.getSymbol());

		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-16"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-15"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-14"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-13"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-12"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-11"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-10"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-09"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-16"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-15"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-14"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-13"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-12"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-11"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-10"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-09"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-02"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-03"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-04"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-05"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-06"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-07"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-08"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-01"), peaksWallPlaneSmall.getSymbol());

		peaksWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-02"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-03"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-04"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-05"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-06"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-07"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-08"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-01"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());

		peaksWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-02"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-03"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-04"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-05"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-06"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-07"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-08"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-01"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());

		peaksWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-16"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-15"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-14"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-13"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-12"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-11"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-10"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-09"), peaksWallPlaneSmallMirrored.getSymbol());

		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-16"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-15"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-14"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-13"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-12"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-11"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-10"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-09"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-16"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-15"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-14"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-13"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-12"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-11"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-10"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-09"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-02"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-03"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-04"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-05"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-06"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-07"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-08"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-01"), peaksWallPlaneMedium.getSymbol());

		peaksWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-02"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-03"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-04"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-05"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-06"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-07"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-08"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-01"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());

		peaksWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-02"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-03"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-04"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-05"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-06"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-07"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-08"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-01"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());

		peaksWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-16"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-15"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-14"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-13"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-12"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-11"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-10"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-09"), peaksWallPlaneMediumMirrored.getSymbol());

		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-16"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-15"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-14"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-13"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-12"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-11"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-10"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-09"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-16"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-15"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-14"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-13"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-12"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-11"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-10"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-09"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-02"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-03"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-04"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-05"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-06"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-07"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-08"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-01"), peaksWallPlaneLarge.getSymbol());

		peaksWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-02"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-03"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-04"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-05"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-06"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-07"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-08"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-01"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());

		peaksWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-02"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-03"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-04"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-05"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-06"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-07"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-08"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-01"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());

		peaksWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-16"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-15"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-14"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-13"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-12"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-11"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-10"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-09"), peaksWallPlaneLargeMirrored.getSymbol());

		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-16"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-15"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-14"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-13"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-12"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-11"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-10"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-09"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-16"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-15"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-14"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-13"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-12"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-11"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-10"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-09"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-02"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-03"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-04"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-05"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-06"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-07"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-08"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-01"), travelRotationSingleWallPlane.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-02"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-03"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-04"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-05"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-06"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-07"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-08"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-02"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-03"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-04"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-05"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-06"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-07"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-08"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-16"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-15"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-14"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-13"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-12"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-11"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-10"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-16"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-15"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-14"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-13"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-12"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-11"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-10"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-16"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-15"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-14"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-13"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-12"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-11"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-10"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-02"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-03"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-04"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-05"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-06"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-07"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-08"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-01"), travelRotationDoubleWallPlane.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-02"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-03"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-04"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-05"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-06"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-07"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-08"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-02"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-03"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-04"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-05"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-06"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-07"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-08"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-16"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-15"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-14"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-13"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-12"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-11"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-10"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-16"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-15"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-14"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-13"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-12"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-11"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-10"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-16"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-15"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-14"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-13"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-12"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-11"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-10"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-02"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-03"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-04"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-05"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-06"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-07"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-08"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-01"), travelRotationAlternatingWallPlane.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-02"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-03"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-04"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-05"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-06"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-07"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-08"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-02"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-03"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-04"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-05"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-06"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-07"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-08"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-16"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-15"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-14"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-13"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-12"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-11"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-10"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-16"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-15"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-14"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-13"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-12"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-11"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-10"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-16"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-15"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-14"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-13"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-12"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-11"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-10"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-02"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-04"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-05"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-06"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-08"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-02"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-04"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-05"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-06"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-08"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-02"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-04"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-05"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-06"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-08"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-16"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-14"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-13"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-12"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-10"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-16"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-14"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-13"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-12"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-10"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-16"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-14"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-13"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-12"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-10"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-02"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-04"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-05"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-06"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-08"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-02"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-04"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-05"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-06"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-08"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-02"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-04"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-05"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-06"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-08"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-16"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-14"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-13"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-12"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-10"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-16"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-14"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-13"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-12"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-10"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-16"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-14"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-13"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-12"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-10"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-02"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-04"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-05"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-06"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-08"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-02"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-04"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-05"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-06"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-08"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-02"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-04"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-05"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-06"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-08"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-16"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-14"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-13"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-12"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-10"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-16"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-14"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-13"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-12"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-10"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-16"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-14"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-13"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-12"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-10"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelShakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-02"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-03"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-04"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-05"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-06"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-07"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-08"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-01"), travelShakingWallPlane.getSymbol());

		travelShakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-02"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-03"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-04"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-05"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-06"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-07"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-08"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-01"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());

		travelShakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-02"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-03"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-04"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-05"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-06"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-07"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-08"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-01"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingle.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-02"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-03"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-04"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-05"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-06"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-07"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-08"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"), travelArmSpiralWallPlaneSingle.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-02"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-03"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-04"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-05"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-06"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-07"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-08"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-02"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-03"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-04"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-05"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-06"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-07"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-08"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-16"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-15"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-14"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-13"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-12"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-11"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-10"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-16"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-15"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-14"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-13"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-12"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-11"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-10"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-16"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-15"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-14"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-13"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-12"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-11"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-10"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-02"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-03"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-04"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-05"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-06"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-07"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-08"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"), travelArmSpiralWallPlaneDouble.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-02"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-03"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-04"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-05"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-06"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-07"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-08"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-02"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-03"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-04"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-05"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-06"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-07"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-08"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-16"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-15"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-14"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-13"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-12"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-11"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-10"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-16"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-15"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-14"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-13"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-12"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-11"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-10"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-16"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-15"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-14"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-13"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-12"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-11"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-10"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTriple.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-02"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-03"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-04"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-05"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-06"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-07"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-08"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"), travelArmSpiralWallPlaneTriple.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-02"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-03"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-04"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-05"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-06"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-07"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-08"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-02"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-03"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-04"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-05"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-06"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-07"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-08"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-16"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-15"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-14"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-13"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-12"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-11"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-10"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-16"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-15"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-14"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-13"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-12"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-11"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-10"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-16"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-15"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-14"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-13"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-12"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-11"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-10"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanMirror() {
		assertTrue(singleStraightMovementWallPlaneSmall.canMirror());
		assertTrue(singleStraightMovementWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(singleStraightMovementWallPlaneSmallSchemaArrowhead.canMirror());

		assertTrue(singleStraightMovementWallPlaneMedium.canMirror());
		assertTrue(singleStraightMovementWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(singleStraightMovementWallPlaneMediumSchemaArrowhead.canMirror());

		assertTrue(singleStraightMovementWallPlaneLarge.canMirror());
		assertTrue(singleStraightMovementWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(singleStraightMovementWallPlaneLargeSchemaArrowhead.canMirror());

		assertTrue(singleStraightMovementWallPlaneLargest.canMirror());
		assertTrue(singleStraightMovementWallPlaneLargestEmptyArrowhead.canMirror());
		assertTrue(singleStraightMovementWallPlaneLargestSchemaArrowhead.canMirror());

		assertTrue(singleWristFlexWallPlane.canMirror());
		assertTrue(singleWristFlexWallPlaneEmptyArrowhead.canMirror());
		assertTrue(singleWristFlexWallPlaneSchemaArrowhead.canMirror());

		assertTrue(doubleWristFlexWallPlane.canMirror());
		assertTrue(doubleWristFlexWallPlaneEmptyArrowhead.canMirror());
		assertTrue(doubleWristFlexWallPlaneSchemaArrowhead.canMirror());

		assertTrue(tripleWristFlexWallPlane.canMirror());
		assertTrue(tripleWristFlexWallPlaneEmptyArrowhead.canMirror());
		assertTrue(tripleWristFlexWallPlaneSchemaArrowhead.canMirror());

		assertTrue(doubleAlternatingWristFlexWallPlane.canMirror());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canMirror());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canMirror());
		assertTrue(doubleAlternatingWristFlexWallPlaneMirrored.canMirror());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(tripleAlternatingWristFlexWallPlane.canMirror());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canMirror());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canMirror());
		assertTrue(tripleAlternatingWristFlexWallPlaneMirrored.canMirror());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(doubleStraightMovementWallPlane.canMirror());
		assertTrue(doubleStraightMovementWallPlaneEmptyArrowhead.canMirror());
		assertTrue(doubleStraightMovementWallPlaneSchemaArrowhead.canMirror());

		assertTrue(tripleStraightMovementWallPlane.canMirror());
		assertTrue(tripleStraightMovementWallPlaneEmptyArrowhead.canMirror());
		assertTrue(tripleStraightMovementWallPlaneSchemaArrowhead.canMirror());

		assertTrue(doubleAlternatingMovementWallPlane.canMirror());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowhead.canMirror());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowhead.canMirror());
		assertTrue(doubleAlternatingMovementWallPlaneMirrored.canMirror());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(tripleAlternatingMovementWallPlane.canMirror());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowhead.canMirror());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowhead.canMirror());
		assertTrue(tripleAlternatingMovementWallPlaneMirrored.canMirror());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(crossMovementWallPlane.canMirror());
		assertTrue(crossMovementWallPlaneEmptyArrowhead.canMirror());
		assertTrue(crossMovementWallPlaneSchemaArrowhead.canMirror());
		assertTrue(crossMovementWallPlaneMirrored.canMirror());
		assertTrue(crossMovementWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(crossMovementWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(bendWallPlaneSmall.canMirror());
		assertTrue(bendWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(bendWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(bendWallPlaneSmallMirrored.canMirror());
		assertTrue(bendWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(bendWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(bendWallPlaneMedium.canMirror());
		assertTrue(bendWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(bendWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(bendWallPlaneMediumMirrored.canMirror());
		assertTrue(bendWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(bendWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(bendWallPlaneLarge.canMirror());
		assertTrue(bendWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(bendWallPlaneLargeSchemaArrowhead.canMirror());
		assertTrue(bendWallPlaneLargeMirrored.canMirror());
		assertTrue(bendWallPlaneLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(bendWallPlaneLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(cornerWallPlaneSmall.canMirror());
		assertTrue(cornerWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(cornerWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(cornerWallPlaneSmallMirrored.canMirror());
		assertTrue(cornerWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(cornerWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(cornerWallPlaneMedium.canMirror());
		assertTrue(cornerWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(cornerWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(cornerWallPlaneMediumMirrored.canMirror());
		assertTrue(cornerWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(cornerWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(cornerWallPlaneLarge.canMirror());
		assertTrue(cornerWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(cornerWallPlaneLargeSchemaArrowhead.canMirror());
		assertTrue(cornerWallPlaneLargeMirrored.canMirror());
		assertTrue(cornerWallPlaneLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(cornerWallPlaneLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(cornerWallPlaneWithRotation.canMirror());
		assertTrue(cornerWallPlaneWithRotationEmptyArrowhead.canMirror());
		assertTrue(cornerWallPlaneWithRotationSchemaArrowhead.canMirror());
		assertTrue(cornerWallPlaneWithRotationMirrored.canMirror());
		assertTrue(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canMirror());
		assertTrue(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canMirror());

		assertTrue(checkWallPlaneSmall.canMirror());
		assertTrue(checkWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(checkWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(checkWallPlaneSmallMirrored.canMirror());
		assertTrue(checkWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(checkWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(checkWallPlaneMedium.canMirror());
		assertTrue(checkWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(checkWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(checkWallPlaneMediumMirrored.canMirror());
		assertTrue(checkWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(checkWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(checkWallPlaneLarge.canMirror());
		assertTrue(checkWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(checkWallPlaneLargeSchemaArrowhead.canMirror());
		assertTrue(checkWallPlaneLargeMirrored.canMirror());
		assertTrue(checkWallPlaneLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(checkWallPlaneLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(boxWallPlaneSmall.canMirror());
		assertTrue(boxWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(boxWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(boxWallPlaneSmallMirrored.canMirror());
		assertTrue(boxWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(boxWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(boxWallPlaneMedium.canMirror());
		assertTrue(boxWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(boxWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(boxWallPlaneMediumMirrored.canMirror());
		assertTrue(boxWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(boxWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(boxWallPlaneLarge.canMirror());
		assertTrue(boxWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(boxWallPlaneLargeSchemaArrowhead.canMirror());
		assertTrue(boxWallPlaneLargeMirrored.canMirror());
		assertTrue(boxWallPlaneLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(boxWallPlaneLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(zigzagWallPlaneSmall.canMirror());
		assertTrue(zigzagWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(zigzagWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(zigzagWallPlaneSmallMirrored.canMirror());
		assertTrue(zigzagWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(zigzagWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(zigzagWallPlaneMedium.canMirror());
		assertTrue(zigzagWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(zigzagWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(zigzagWallPlaneMediumMirrored.canMirror());
		assertTrue(zigzagWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(zigzagWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(zigzagWallPlaneLarge.canMirror());
		assertTrue(zigzagWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(zigzagWallPlaneLargeSchemaArrowhead.canMirror());
		assertTrue(zigzagWallPlaneLargeMirrored.canMirror());
		assertTrue(zigzagWallPlaneLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(zigzagWallPlaneLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(peaksWallPlaneSmall.canMirror());
		assertTrue(peaksWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(peaksWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(peaksWallPlaneSmallMirrored.canMirror());
		assertTrue(peaksWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(peaksWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(peaksWallPlaneMedium.canMirror());
		assertTrue(peaksWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(peaksWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(peaksWallPlaneMediumMirrored.canMirror());
		assertTrue(peaksWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(peaksWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(peaksWallPlaneLarge.canMirror());
		assertTrue(peaksWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(peaksWallPlaneLargeSchemaArrowhead.canMirror());
		assertTrue(peaksWallPlaneLargeMirrored.canMirror());
		assertTrue(peaksWallPlaneLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(peaksWallPlaneLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(travelRotationSingleWallPlane.canMirror());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowhead.canMirror());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowhead.canMirror());
		assertTrue(travelRotationSingleWallPlaneMirrored.canMirror());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(travelRotationDoubleWallPlane.canMirror());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowhead.canMirror());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowhead.canMirror());
		assertTrue(travelRotationDoubleWallPlaneMirrored.canMirror());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(travelRotationAlternatingWallPlane.canMirror());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowhead.canMirror());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowhead.canMirror());
		assertTrue(travelRotationAlternatingWallPlaneMirrored.canMirror());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(travelRotationSingleFloorPlane.canMirror());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowhead.canMirror());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowhead.canMirror());
		assertTrue(travelRotationSingleFloorPlaneMirrored.canMirror());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(travelRotationDoubleFloorPlane.canMirror());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowhead.canMirror());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowhead.canMirror());
		assertTrue(travelRotationDoubleFloorPlaneMirrored.canMirror());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(travelRotationAlternatingFloorPlane.canMirror());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowhead.canMirror());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowhead.canMirror());
		assertTrue(travelRotationAlternatingFloorPlaneMirrored.canMirror());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(travelShakingWallPlane.canMirror());
		assertTrue(travelShakingWallPlaneEmptyArrowhead.canMirror());
		assertTrue(travelShakingWallPlaneSchemaArrowhead.canMirror());

		assertTrue(travelArmSpiralWallPlaneSingle.canMirror());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowhead.canMirror());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowhead.canMirror());
		assertTrue(travelArmSpiralWallPlaneSingleMirrored.canMirror());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canMirror());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canMirror());

		assertTrue(travelArmSpiralWallPlaneDouble.canMirror());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canMirror());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canMirror());
		assertTrue(travelArmSpiralWallPlaneDoubleMirrored.canMirror());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canMirror());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canMirror());

		assertTrue(travelArmSpiralWallPlaneTriple.canMirror());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowhead.canMirror());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowhead.canMirror());
		assertTrue(travelArmSpiralWallPlaneTripleMirrored.canMirror());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canMirror());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canMirror());

	}

	@Override
	public void testMirror() {

		singleStraightMovementWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-01"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-01"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-01"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-01"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-01"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-01"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-01"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-01"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-01"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargest.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());

		singleWristFlexWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-01"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-01"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-01"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleWristFlexWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleWristFlexWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-01"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-01"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-01"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingMovementWallPlane.mirror();
		assertEquals(doubleAlternatingMovementWallPlaneMirrored.getSymbol(),
				doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-01"), doubleAlternatingMovementWallPlane.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol(),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-01"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol(),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-01"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneMirrored.mirror();
		assertEquals(doubleAlternatingMovementWallPlaneMirrored.getSymbol(),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-09"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol(),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-09"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol(),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-09"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlane.mirror();
		assertEquals(doubleAlternatingWristFlexWallPlaneMirrored.getSymbol(),
				doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-01"), doubleAlternatingWristFlexWallPlane.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.mirror();
		assertEquals(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol(),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-01"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.mirror();
		assertEquals(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-01"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneMirrored.mirror();
		assertEquals(doubleAlternatingWristFlexWallPlaneMirrored.getSymbol(),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-09"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-09"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-09"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		doubleStraightMovementWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-01-01"), doubleStraightMovementWallPlane.getSymbol());
		doubleStraightMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-02-01"),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleStraightMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-03-01"),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleStraightMovementWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-01-01"), tripleStraightMovementWallPlane.getSymbol());
		tripleStraightMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-02-01"),
				tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleStraightMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-03-01"),
				tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingMovementWallPlane.mirror();
		assertEquals(tripleAlternatingMovementWallPlaneMirrored.getSymbol(),
				tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-01"), tripleAlternatingMovementWallPlane.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol(),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-01"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol(),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-01"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneMirrored.mirror();
		assertEquals(tripleAlternatingMovementWallPlaneMirrored.getSymbol(),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-09"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol(),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-09"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol(),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-09"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlane.mirror();
		assertEquals(tripleAlternatingWristFlexWallPlaneMirrored.getSymbol(),
				tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-01"), tripleAlternatingWristFlexWallPlane.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.mirror();
		assertEquals(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol(),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-01"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.mirror();
		assertEquals(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-01"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneMirrored.mirror();
		assertEquals(tripleAlternatingWristFlexWallPlaneMirrored.getSymbol(),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-09"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-09"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-09"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		crossMovementWallPlane.mirror();
		assertEquals(crossMovementWallPlaneMirrored.getSymbol(), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-01"), crossMovementWallPlane.getSymbol());

		crossMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol(),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-01"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());

		crossMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol(),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-01"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());

		crossMovementWallPlaneMirrored.mirror();
		assertEquals(crossMovementWallPlane.getSymbol(), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-09"), crossMovementWallPlaneMirrored.getSymbol());

		crossMovementWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(crossMovementWallPlaneEmptyArrowhead.getSymbol(),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-09"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		crossMovementWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(crossMovementWallPlaneSchemaArrowhead.getSymbol(),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-09"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneSmall.mirror();
		assertEquals(bendWallPlaneSmallMirrored.getSymbol(), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-01"), bendWallPlaneSmall.getSymbol());

		bendWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-01"), bendWallPlaneSmallEmptyArrowhead.getSymbol());

		bendWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-01"), bendWallPlaneSmallSchemaArrowhead.getSymbol());

		bendWallPlaneSmallMirrored.mirror();
		assertEquals(bendWallPlaneSmall.getSymbol(), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-09"), bendWallPlaneSmallMirrored.getSymbol());

		bendWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(bendWallPlaneSmallEmptyArrowhead.getSymbol(),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-09"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(bendWallPlaneSmallSchemaArrowhead.getSymbol(),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-09"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneMedium.mirror();
		assertEquals(bendWallPlaneMediumMirrored.getSymbol(), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-01"), bendWallPlaneMedium.getSymbol());

		bendWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-01"), bendWallPlaneMediumEmptyArrowhead.getSymbol());

		bendWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-01"), bendWallPlaneMediumSchemaArrowhead.getSymbol());

		bendWallPlaneMediumMirrored.mirror();
		assertEquals(bendWallPlaneMedium.getSymbol(), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-09"), bendWallPlaneMediumMirrored.getSymbol());

		bendWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(bendWallPlaneMediumEmptyArrowhead.getSymbol(),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-09"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(bendWallPlaneMediumSchemaArrowhead.getSymbol(),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-09"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneLarge.mirror();
		assertEquals(bendWallPlaneLargeMirrored.getSymbol(), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-01"), bendWallPlaneLarge.getSymbol());

		bendWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol(),
				bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-01"), bendWallPlaneLargeEmptyArrowhead.getSymbol());

		bendWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol(),
				bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-01"), bendWallPlaneLargeSchemaArrowhead.getSymbol());

		bendWallPlaneLargeMirrored.mirror();
		assertEquals(bendWallPlaneLarge.getSymbol(), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-09"), bendWallPlaneLargeMirrored.getSymbol());

		bendWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(bendWallPlaneLargeEmptyArrowhead.getSymbol(),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-09"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(bendWallPlaneLargeSchemaArrowhead.getSymbol(),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-09"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneSmall.mirror();
		assertEquals(cornerWallPlaneSmallMirrored.getSymbol(), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-01"), cornerWallPlaneSmall.getSymbol());

		cornerWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-01"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());

		cornerWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-01"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());

		cornerWallPlaneSmallMirrored.mirror();
		assertEquals(cornerWallPlaneSmall.getSymbol(), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-09"), cornerWallPlaneSmallMirrored.getSymbol());

		cornerWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(cornerWallPlaneSmallEmptyArrowhead.getSymbol(),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-09"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(cornerWallPlaneSmallSchemaArrowhead.getSymbol(),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-09"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneMedium.mirror();
		assertEquals(cornerWallPlaneMediumMirrored.getSymbol(), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-01"), cornerWallPlaneMedium.getSymbol());

		cornerWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-01"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());

		cornerWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-01"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());

		cornerWallPlaneMediumMirrored.mirror();
		assertEquals(cornerWallPlaneMedium.getSymbol(), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-09"), cornerWallPlaneMediumMirrored.getSymbol());

		cornerWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(cornerWallPlaneMediumEmptyArrowhead.getSymbol(),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-09"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(cornerWallPlaneMediumSchemaArrowhead.getSymbol(),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-09"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneLarge.mirror();
		assertEquals(cornerWallPlaneLargeMirrored.getSymbol(), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-01"), cornerWallPlaneLarge.getSymbol());

		cornerWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol(),
				cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-01"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());

		cornerWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol(),
				cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-01"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());

		cornerWallPlaneLargeMirrored.mirror();
		assertEquals(cornerWallPlaneLarge.getSymbol(), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-09"), cornerWallPlaneLargeMirrored.getSymbol());

		cornerWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(cornerWallPlaneLargeEmptyArrowhead.getSymbol(),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-09"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(cornerWallPlaneLargeSchemaArrowhead.getSymbol(),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-09"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotation.mirror();
		assertEquals(cornerWallPlaneWithRotationMirrored.getSymbol(), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-01"), cornerWallPlaneWithRotation.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowhead.mirror();
		assertEquals(cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol(),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-01"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowhead.mirror();
		assertEquals(cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol(),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-01"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());

		cornerWallPlaneWithRotationMirrored.mirror();
		assertEquals(cornerWallPlaneWithRotation.getSymbol(), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-09"), cornerWallPlaneWithRotationMirrored.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowheadMirrored.mirror();
		assertEquals(cornerWallPlaneWithRotationEmptyArrowhead.getSymbol(),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-09"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowheadMirrored.mirror();
		assertEquals(cornerWallPlaneWithRotationSchemaArrowhead.getSymbol(),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-09"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneSmall.mirror();
		assertEquals(checkWallPlaneSmallMirrored.getSymbol(), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-01"), checkWallPlaneSmall.getSymbol());

		checkWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-01"), checkWallPlaneSmallEmptyArrowhead.getSymbol());

		checkWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-01"), checkWallPlaneSmallSchemaArrowhead.getSymbol());

		checkWallPlaneSmallMirrored.mirror();
		assertEquals(checkWallPlaneSmall.getSymbol(), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-09"), checkWallPlaneSmallMirrored.getSymbol());

		checkWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(checkWallPlaneSmallEmptyArrowhead.getSymbol(),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-09"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(checkWallPlaneSmallSchemaArrowhead.getSymbol(),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-09"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneMedium.mirror();
		assertEquals(checkWallPlaneMediumMirrored.getSymbol(), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-01"), checkWallPlaneMedium.getSymbol());

		checkWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-01"), checkWallPlaneMediumEmptyArrowhead.getSymbol());

		checkWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-01"), checkWallPlaneMediumSchemaArrowhead.getSymbol());

		checkWallPlaneMediumMirrored.mirror();
		assertEquals(checkWallPlaneMedium.getSymbol(), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-09"), checkWallPlaneMediumMirrored.getSymbol());

		checkWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(checkWallPlaneMediumEmptyArrowhead.getSymbol(),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-09"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(checkWallPlaneMediumSchemaArrowhead.getSymbol(),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-09"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneLarge.mirror();
		assertEquals(checkWallPlaneLargeMirrored.getSymbol(), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-01"), checkWallPlaneLarge.getSymbol());

		checkWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol(),
				checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-01"), checkWallPlaneLargeEmptyArrowhead.getSymbol());

		checkWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol(),
				checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-01"), checkWallPlaneLargeSchemaArrowhead.getSymbol());

		checkWallPlaneLargeMirrored.mirror();
		assertEquals(checkWallPlaneLarge.getSymbol(), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-09"), checkWallPlaneLargeMirrored.getSymbol());

		checkWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(checkWallPlaneLargeEmptyArrowhead.getSymbol(),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-09"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(checkWallPlaneLargeSchemaArrowhead.getSymbol(),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-09"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneSmall.mirror();
		assertEquals(boxWallPlaneSmallMirrored.getSymbol(), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-01"), boxWallPlaneSmall.getSymbol());

		boxWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol(), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-01"), boxWallPlaneSmallEmptyArrowhead.getSymbol());

		boxWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-01"), boxWallPlaneSmallSchemaArrowhead.getSymbol());

		boxWallPlaneSmallMirrored.mirror();
		assertEquals(boxWallPlaneSmall.getSymbol(), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-09"), boxWallPlaneSmallMirrored.getSymbol());

		boxWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(boxWallPlaneSmallEmptyArrowhead.getSymbol(), boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-09"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(boxWallPlaneSmallSchemaArrowhead.getSymbol(),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-09"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneMedium.mirror();
		assertEquals(boxWallPlaneMediumMirrored.getSymbol(), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-01"), boxWallPlaneMedium.getSymbol());

		boxWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-01"), boxWallPlaneMediumEmptyArrowhead.getSymbol());

		boxWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-01"), boxWallPlaneMediumSchemaArrowhead.getSymbol());

		boxWallPlaneMediumMirrored.mirror();
		assertEquals(boxWallPlaneMedium.getSymbol(), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-09"), boxWallPlaneMediumMirrored.getSymbol());

		boxWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(boxWallPlaneMediumEmptyArrowhead.getSymbol(),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-09"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(boxWallPlaneMediumSchemaArrowhead.getSymbol(),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-09"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneLarge.mirror();
		assertEquals(boxWallPlaneLargeMirrored.getSymbol(), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-01"), boxWallPlaneLarge.getSymbol());

		boxWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol(), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-01"), boxWallPlaneLargeEmptyArrowhead.getSymbol());

		boxWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol(),
				boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-01"), boxWallPlaneLargeSchemaArrowhead.getSymbol());

		boxWallPlaneLargeMirrored.mirror();
		assertEquals(boxWallPlaneLarge.getSymbol(), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-09"), boxWallPlaneLargeMirrored.getSymbol());

		boxWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(boxWallPlaneLargeEmptyArrowhead.getSymbol(), boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-09"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(boxWallPlaneLargeSchemaArrowhead.getSymbol(),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-09"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmall.mirror();
		assertEquals(zigzagWallPlaneSmallMirrored.getSymbol(), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-01"), zigzagWallPlaneSmall.getSymbol());

		zigzagWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-01"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());

		zigzagWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-01"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());

		zigzagWallPlaneSmallMirrored.mirror();
		assertEquals(zigzagWallPlaneSmall.getSymbol(), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-09"), zigzagWallPlaneSmallMirrored.getSymbol());

		zigzagWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(zigzagWallPlaneSmallEmptyArrowhead.getSymbol(),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-09"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(zigzagWallPlaneSmallSchemaArrowhead.getSymbol(),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-09"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneMedium.mirror();
		assertEquals(zigzagWallPlaneMediumMirrored.getSymbol(), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-01"), zigzagWallPlaneMedium.getSymbol());

		zigzagWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-01"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());

		zigzagWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-01"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());

		zigzagWallPlaneMediumMirrored.mirror();
		assertEquals(zigzagWallPlaneMedium.getSymbol(), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-09"), zigzagWallPlaneMediumMirrored.getSymbol());

		zigzagWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(zigzagWallPlaneMediumEmptyArrowhead.getSymbol(),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-09"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(zigzagWallPlaneMediumSchemaArrowhead.getSymbol(),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-09"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneLarge.mirror();
		assertEquals(zigzagWallPlaneLargeMirrored.getSymbol(), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-01"), zigzagWallPlaneLarge.getSymbol());

		zigzagWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol(),
				zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-01"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());

		zigzagWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol(),
				zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-01"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());

		zigzagWallPlaneLargeMirrored.mirror();
		assertEquals(zigzagWallPlaneLarge.getSymbol(), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-09"), zigzagWallPlaneLargeMirrored.getSymbol());

		zigzagWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(zigzagWallPlaneLargeEmptyArrowhead.getSymbol(),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-09"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(zigzagWallPlaneLargeSchemaArrowhead.getSymbol(),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-09"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneSmall.mirror();
		assertEquals(peaksWallPlaneSmallMirrored.getSymbol(), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-01"), peaksWallPlaneSmall.getSymbol());

		peaksWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-01"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());

		peaksWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-01"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());

		peaksWallPlaneSmallMirrored.mirror();
		assertEquals(peaksWallPlaneSmall.getSymbol(), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-09"), peaksWallPlaneSmallMirrored.getSymbol());

		peaksWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(peaksWallPlaneSmallEmptyArrowhead.getSymbol(),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-09"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(peaksWallPlaneSmallSchemaArrowhead.getSymbol(),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-09"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneMedium.mirror();
		assertEquals(peaksWallPlaneMediumMirrored.getSymbol(), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-01"), peaksWallPlaneMedium.getSymbol());

		peaksWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-01"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());

		peaksWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-01"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());

		peaksWallPlaneMediumMirrored.mirror();
		assertEquals(peaksWallPlaneMedium.getSymbol(), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-09"), peaksWallPlaneMediumMirrored.getSymbol());

		peaksWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(peaksWallPlaneMediumEmptyArrowhead.getSymbol(),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-09"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(peaksWallPlaneMediumSchemaArrowhead.getSymbol(),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-09"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneLarge.mirror();
		assertEquals(peaksWallPlaneLargeMirrored.getSymbol(), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-01"), peaksWallPlaneLarge.getSymbol());

		peaksWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol(),
				peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-01"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());

		peaksWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol(),
				peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-01"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());

		peaksWallPlaneLargeMirrored.mirror();
		assertEquals(peaksWallPlaneLarge.getSymbol(), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-09"), peaksWallPlaneLargeMirrored.getSymbol());

		peaksWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(peaksWallPlaneLargeEmptyArrowhead.getSymbol(),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-09"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(peaksWallPlaneLargeSchemaArrowhead.getSymbol(),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-09"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlane.mirror();
		assertEquals(travelRotationSingleWallPlaneMirrored.getSymbol(), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-01"), travelRotationSingleWallPlane.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleWallPlaneMirrored.mirror();
		assertEquals(travelRotationSingleWallPlane.getSymbol(), travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationSingleWallPlaneEmptyArrowhead.getSymbol(),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationSingleWallPlaneSchemaArrowhead.getSymbol(),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlane.mirror();
		assertEquals(travelRotationDoubleWallPlaneMirrored.getSymbol(), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-01"), travelRotationDoubleWallPlane.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleWallPlaneMirrored.mirror();
		assertEquals(travelRotationDoubleWallPlane.getSymbol(), travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol(),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol(),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlane.mirror();
		assertEquals(travelRotationAlternatingWallPlaneMirrored.getSymbol(),
				travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-01"), travelRotationAlternatingWallPlane.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneMirrored.mirror();
		assertEquals(travelRotationAlternatingWallPlane.getSymbol(),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol(),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol(),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlane.mirror();
		assertEquals(travelRotationSingleFloorPlaneMirrored.getSymbol(), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(travelRotationSingleFloorPlane.getSymbol(), travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.mirror();
		assertEquals(travelRotationDoubleFloorPlaneMirrored.getSymbol(), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(travelRotationDoubleFloorPlane.getSymbol(), travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneMirrored.getSymbol(),
				travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(travelRotationAlternatingFloorPlane.getSymbol(),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneSingle.mirror();
		assertEquals(travelArmSpiralWallPlaneSingleMirrored.getSymbol(), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"), travelArmSpiralWallPlaneSingle.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowhead.mirror();
		assertEquals(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowhead.mirror();
		assertEquals(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneSingle.getSymbol(), travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol(),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol(),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDouble.mirror();
		assertEquals(travelArmSpiralWallPlaneDoubleMirrored.getSymbol(), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"), travelArmSpiralWallPlaneDouble.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowhead.mirror();
		assertEquals(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowhead.mirror();
		assertEquals(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneDouble.getSymbol(), travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol(),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol(),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTriple.mirror();
		assertEquals(travelArmSpiralWallPlaneTripleMirrored.getSymbol(), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"), travelArmSpiralWallPlaneTriple.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowhead.mirror();
		assertEquals(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowhead.mirror();
		assertEquals(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol(),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneTriple.getSymbol(), travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol(),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.mirror();
		assertEquals(travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol(),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlane.mirror();
		assertEquals(travelRotationSingleFloorPlaneMirrored.getSymbol(), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlane.rotateCounterClockwise();
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-10"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-02"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlane.rotateCounterClockwise();
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-12"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-04"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlane.rotateCounterClockwise();
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-13"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-05"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlane.rotateCounterClockwise();
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-14"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-06"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlane.rotateCounterClockwise();
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-16"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-08"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlane.rotateCounterClockwise();

		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(travelRotationSingleFloorPlane.getSymbol(), travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-08"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-16"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-06"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-14"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-05"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-13"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-04"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-12"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-02"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-10"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-10"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-02"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-12"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-04"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-13"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-05"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-14"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-06"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-16"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-08"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.rotateCounterClockwise();

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-08"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-16"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-06"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-14"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-05"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-13"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-04"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-12"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-02"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-10"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-10"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-02"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-12"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-04"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-13"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-05"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-14"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-06"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-16"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-08"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.rotateCounterClockwise();

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-08"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-16"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-06"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-14"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-05"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-13"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-04"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-12"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-02"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-10"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.mirror();
		assertEquals(travelRotationDoubleFloorPlaneMirrored.getSymbol(), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-10"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-02"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-12"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-04"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-13"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-05"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-14"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-06"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlane.rotateCounterClockwise();
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-16"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-08"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlane.rotateCounterClockwise();

		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(travelRotationDoubleFloorPlane.getSymbol(), travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-08"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-16"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-06"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-14"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-05"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-13"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-04"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-12"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-02"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-10"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-10"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-02"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-12"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-04"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-13"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-05"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-14"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-06"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-16"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-08"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.rotateCounterClockwise();

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-08"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-16"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-06"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-14"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-05"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-13"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-04"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-12"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-02"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-10"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-10"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-02"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-12"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-04"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-13"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-05"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-14"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-06"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-16"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-08"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.rotateCounterClockwise();

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-08"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-16"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-06"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-14"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-05"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-13"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-04"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-12"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-02"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-10"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneMirrored.getSymbol(),
				travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-10"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-02"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-12"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-04"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-13"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-05"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-14"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-06"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlane.rotateCounterClockwise();
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-16"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-08"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlane.rotateCounterClockwise();

		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(travelRotationAlternatingFloorPlane.getSymbol(),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-08"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-16"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-06"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-14"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-05"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-13"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-04"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-12"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-02"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-10"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-10"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-02"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-12"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-04"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-13"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-05"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-14"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-06"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-16"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-08"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.rotateCounterClockwise();

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-08"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-16"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-06"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-14"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-05"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-13"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-04"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-12"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-02"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-10"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-10"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-02"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-12"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-04"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-13"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-05"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-14"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-06"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-16"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-08"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-08"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-16"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-06"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-14"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-05"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-13"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-04"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-12"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-02"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-10"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelShakingWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-01"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-01"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-01"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingle.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"), travelArmSpiralWallPlaneSingle.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDouble.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"), travelArmSpiralWallPlaneDouble.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTriple.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"), travelArmSpiralWallPlaneTriple.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
	}

	@Override
	public void testCanMirrorVertically() {

		assertTrue(singleStraightMovementWallPlaneSmall.canMirrorVertically());
		assertTrue(singleStraightMovementWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(singleStraightMovementWallPlaneSmallSchemaArrowhead.canMirrorVertically());

		assertTrue(singleStraightMovementWallPlaneMedium.canMirrorVertically());
		assertTrue(singleStraightMovementWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(singleStraightMovementWallPlaneMediumSchemaArrowhead.canMirrorVertically());

		assertTrue(singleStraightMovementWallPlaneLarge.canMirrorVertically());
		assertTrue(singleStraightMovementWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(singleStraightMovementWallPlaneLargeSchemaArrowhead.canMirrorVertically());

		assertTrue(singleStraightMovementWallPlaneLargest.canMirrorVertically());
		assertTrue(singleStraightMovementWallPlaneLargestEmptyArrowhead.canMirrorVertically());
		assertTrue(singleStraightMovementWallPlaneLargestSchemaArrowhead.canMirrorVertically());

		assertTrue(singleWristFlexWallPlane.canMirrorVertically());
		assertTrue(singleWristFlexWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(singleWristFlexWallPlaneSchemaArrowhead.canMirrorVertically());

		assertTrue(doubleWristFlexWallPlane.canMirrorVertically());
		assertTrue(doubleWristFlexWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(doubleWristFlexWallPlaneSchemaArrowhead.canMirrorVertically());

		assertTrue(tripleWristFlexWallPlane.canMirrorVertically());
		assertTrue(tripleWristFlexWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(tripleWristFlexWallPlaneSchemaArrowhead.canMirrorVertically());

		assertTrue(doubleAlternatingWristFlexWallPlane.canMirrorVertically());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(doubleAlternatingWristFlexWallPlaneMirrored.canMirrorVertically());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(tripleAlternatingWristFlexWallPlane.canMirrorVertically());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(tripleAlternatingWristFlexWallPlaneMirrored.canMirrorVertically());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(doubleStraightMovementWallPlane.canMirrorVertically());
		assertTrue(doubleStraightMovementWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(doubleStraightMovementWallPlaneSchemaArrowhead.canMirrorVertically());

		assertTrue(tripleStraightMovementWallPlane.canMirrorVertically());
		assertTrue(tripleStraightMovementWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(tripleStraightMovementWallPlaneSchemaArrowhead.canMirrorVertically());

		assertTrue(doubleAlternatingMovementWallPlane.canMirrorVertically());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(doubleAlternatingMovementWallPlaneMirrored.canMirrorVertically());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(tripleAlternatingMovementWallPlane.canMirrorVertically());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(tripleAlternatingMovementWallPlaneMirrored.canMirrorVertically());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(crossMovementWallPlane.canMirrorVertically());
		assertTrue(crossMovementWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(crossMovementWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(crossMovementWallPlaneMirrored.canMirrorVertically());
		assertTrue(crossMovementWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(crossMovementWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(bendWallPlaneSmall.canMirrorVertically());
		assertTrue(bendWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(bendWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(bendWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(bendWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(bendWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(bendWallPlaneMedium.canMirrorVertically());
		assertTrue(bendWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(bendWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(bendWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(bendWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(bendWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(bendWallPlaneLarge.canMirrorVertically());
		assertTrue(bendWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(bendWallPlaneLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(bendWallPlaneLargeMirrored.canMirrorVertically());
		assertTrue(bendWallPlaneLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(bendWallPlaneLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(cornerWallPlaneSmall.canMirrorVertically());
		assertTrue(cornerWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(cornerWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(cornerWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(cornerWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(cornerWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(cornerWallPlaneMedium.canMirrorVertically());
		assertTrue(cornerWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(cornerWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(cornerWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(cornerWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(cornerWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(cornerWallPlaneLarge.canMirrorVertically());
		assertTrue(cornerWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(cornerWallPlaneLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(cornerWallPlaneLargeMirrored.canMirrorVertically());
		assertTrue(cornerWallPlaneLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(cornerWallPlaneLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(cornerWallPlaneWithRotation.canMirrorVertically());
		assertTrue(cornerWallPlaneWithRotationEmptyArrowhead.canMirrorVertically());
		assertTrue(cornerWallPlaneWithRotationSchemaArrowhead.canMirrorVertically());
		assertTrue(cornerWallPlaneWithRotationMirrored.canMirrorVertically());
		assertTrue(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(checkWallPlaneSmall.canMirrorVertically());
		assertTrue(checkWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(checkWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(checkWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(checkWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(checkWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(checkWallPlaneMedium.canMirrorVertically());
		assertTrue(checkWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(checkWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(checkWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(checkWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(checkWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(checkWallPlaneLarge.canMirrorVertically());
		assertTrue(checkWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(checkWallPlaneLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(checkWallPlaneLargeMirrored.canMirrorVertically());
		assertTrue(checkWallPlaneLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(checkWallPlaneLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(boxWallPlaneSmall.canMirrorVertically());
		assertTrue(boxWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(boxWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(boxWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(boxWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(boxWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(boxWallPlaneMedium.canMirrorVertically());
		assertTrue(boxWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(boxWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(boxWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(boxWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(boxWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(boxWallPlaneLarge.canMirrorVertically());
		assertTrue(boxWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(boxWallPlaneLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(boxWallPlaneLargeMirrored.canMirrorVertically());
		assertTrue(boxWallPlaneLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(boxWallPlaneLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(zigzagWallPlaneSmall.canMirrorVertically());
		assertTrue(zigzagWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(zigzagWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(zigzagWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(zigzagWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(zigzagWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(zigzagWallPlaneMedium.canMirrorVertically());
		assertTrue(zigzagWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(zigzagWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(zigzagWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(zigzagWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(zigzagWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(zigzagWallPlaneLarge.canMirrorVertically());
		assertTrue(zigzagWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(zigzagWallPlaneLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(zigzagWallPlaneLargeMirrored.canMirrorVertically());
		assertTrue(zigzagWallPlaneLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(zigzagWallPlaneLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(peaksWallPlaneSmall.canMirrorVertically());
		assertTrue(peaksWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(peaksWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(peaksWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(peaksWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(peaksWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(peaksWallPlaneMedium.canMirrorVertically());
		assertTrue(peaksWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(peaksWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(peaksWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(peaksWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(peaksWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(peaksWallPlaneLarge.canMirrorVertically());
		assertTrue(peaksWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(peaksWallPlaneLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(peaksWallPlaneLargeMirrored.canMirrorVertically());
		assertTrue(peaksWallPlaneLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(peaksWallPlaneLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelRotationSingleWallPlane.canMirrorVertically());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(travelRotationSingleWallPlaneMirrored.canMirrorVertically());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelRotationDoubleWallPlane.canMirrorVertically());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(travelRotationDoubleWallPlaneMirrored.canMirrorVertically());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelRotationAlternatingWallPlane.canMirrorVertically());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(travelRotationAlternatingWallPlaneMirrored.canMirrorVertically());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelRotationSingleFloorPlane.canMirrorVertically());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(travelRotationSingleFloorPlaneMirrored.canMirrorVertically());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelRotationDoubleFloorPlane.canMirrorVertically());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(travelRotationDoubleFloorPlaneMirrored.canMirrorVertically());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelRotationAlternatingFloorPlane.canMirrorVertically());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(travelRotationAlternatingFloorPlaneMirrored.canMirrorVertically());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelShakingWallPlane.canMirrorVertically());
		assertTrue(travelShakingWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(travelShakingWallPlaneSchemaArrowhead.canMirrorVertically());

		assertTrue(travelArmSpiralWallPlaneSingle.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowhead.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowhead.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneSingleMirrored.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelArmSpiralWallPlaneDouble.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneDoubleMirrored.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(travelArmSpiralWallPlaneTriple.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowhead.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowhead.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneTripleMirrored.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canMirrorVertically());

	}

	@Override
	public void testMirrorVertically() {

		singleStraightMovementWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-05"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-01"),
				singleStraightMovementWallPlaneSmall.getSymbol());

		singleStraightMovementWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-05"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-01"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-05"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-01"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-05"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-01"),
				singleStraightMovementWallPlaneMedium.getSymbol());

		singleStraightMovementWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-05"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-01"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-05"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-01"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-05"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-01"),
				singleStraightMovementWallPlaneLarge.getSymbol());

		singleStraightMovementWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-05"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-01"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-05"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-01"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargest.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-05"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());

		singleStraightMovementWallPlaneLargestEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-05"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargestSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-05"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());

		singleWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-05"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-01"), singleWristFlexWallPlane.getSymbol());

		singleWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-05"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-01"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		singleWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-05"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-01"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-05"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"), doubleWristFlexWallPlane.getSymbol());

		doubleWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-05"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-05"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-05"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-01"), tripleWristFlexWallPlane.getSymbol());

		tripleWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-05"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-01"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-05"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-01"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-13"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-01"), doubleAlternatingWristFlexWallPlane.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-13"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-01"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-13"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-01"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-05"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-09"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-05"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-09"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-05"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-09"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-13"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-01"), tripleAlternatingWristFlexWallPlane.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-13"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-01"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-13"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-01"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-05"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-09"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-05"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-09"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-05"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-09"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		doubleStraightMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-01-05"), doubleStraightMovementWallPlane.getSymbol());
		doubleStraightMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-01-01"), doubleStraightMovementWallPlane.getSymbol());

		doubleStraightMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-02-05"),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleStraightMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-02-01"),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		doubleStraightMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-03-05"),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleStraightMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-03-01"),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleStraightMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-01-05"), tripleStraightMovementWallPlane.getSymbol());
		tripleStraightMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-01-01"), tripleStraightMovementWallPlane.getSymbol());

		tripleStraightMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-02-05"),
				tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleStraightMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-02-01"),
				tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		tripleStraightMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-03-05"),
				tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleStraightMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-03-01"),
				tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-13"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-01"), doubleAlternatingMovementWallPlane.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-13"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-01"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-13"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-01"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-05"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-09"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-05"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-09"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-05"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-09"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-13"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-01"), tripleAlternatingMovementWallPlane.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-13"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-01"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-13"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-01"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-05"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-09"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-05"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-09"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-05"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-09"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		crossMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-13"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-01"), crossMovementWallPlane.getSymbol());

		crossMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-13"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-01"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());

		crossMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-13"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-01"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());

		crossMovementWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-05"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-09"), crossMovementWallPlaneMirrored.getSymbol());

		crossMovementWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-05"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-09"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		crossMovementWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-05"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-09"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-13"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-01"), bendWallPlaneSmall.getSymbol());

		bendWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-13"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-01"), bendWallPlaneSmallEmptyArrowhead.getSymbol());

		bendWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-13"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-01"), bendWallPlaneSmallSchemaArrowhead.getSymbol());

		bendWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-05"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-09"), bendWallPlaneSmallMirrored.getSymbol());

		bendWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-05"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-09"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-05"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-09"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-13"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-01"), bendWallPlaneMedium.getSymbol());

		bendWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-13"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-01"), bendWallPlaneMediumEmptyArrowhead.getSymbol());

		bendWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-13"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-01"), bendWallPlaneMediumSchemaArrowhead.getSymbol());

		bendWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-05"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-09"), bendWallPlaneMediumMirrored.getSymbol());

		bendWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-05"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-09"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-05"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-09"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-13"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-01"), bendWallPlaneLarge.getSymbol());

		bendWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-13"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-01"), bendWallPlaneLargeEmptyArrowhead.getSymbol());

		bendWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-13"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-01"), bendWallPlaneLargeSchemaArrowhead.getSymbol());

		bendWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-05"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-09"), bendWallPlaneLargeMirrored.getSymbol());

		bendWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-05"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-09"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-05"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-09"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-13"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-01"), cornerWallPlaneSmall.getSymbol());

		cornerWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-13"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-01"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());

		cornerWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-13"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-01"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());

		cornerWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-05"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-09"), cornerWallPlaneSmallMirrored.getSymbol());

		cornerWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-05"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-09"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-05"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-09"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-13"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-01"), cornerWallPlaneMedium.getSymbol());

		cornerWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-13"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-01"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());

		cornerWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-13"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-01"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());

		cornerWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-05"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-09"), cornerWallPlaneMediumMirrored.getSymbol());

		cornerWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-05"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-09"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-05"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-09"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-13"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-01"), cornerWallPlaneLarge.getSymbol());

		cornerWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-13"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-01"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());

		cornerWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-13"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-01"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());

		cornerWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-05"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-09"), cornerWallPlaneLargeMirrored.getSymbol());

		cornerWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-05"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-09"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-05"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-09"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotation.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-13"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-01"), cornerWallPlaneWithRotation.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-13"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-01"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-13"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-01"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());

		cornerWallPlaneWithRotationMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-05"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-09"), cornerWallPlaneWithRotationMirrored.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-05"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-09"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-05"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-09"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-13"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-01"), checkWallPlaneSmall.getSymbol());

		checkWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-13"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-01"), checkWallPlaneSmallEmptyArrowhead.getSymbol());

		checkWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-13"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-01"), checkWallPlaneSmallSchemaArrowhead.getSymbol());

		checkWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-05"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-09"), checkWallPlaneSmallMirrored.getSymbol());

		checkWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-05"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-09"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-05"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-09"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-13"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-01"), checkWallPlaneMedium.getSymbol());

		checkWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-13"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-01"), checkWallPlaneMediumEmptyArrowhead.getSymbol());

		checkWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-13"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-01"), checkWallPlaneMediumSchemaArrowhead.getSymbol());

		checkWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-05"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-09"), checkWallPlaneMediumMirrored.getSymbol());

		checkWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-05"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-09"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-05"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-09"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-13"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-01"), checkWallPlaneLarge.getSymbol());

		checkWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-13"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-01"), checkWallPlaneLargeEmptyArrowhead.getSymbol());

		checkWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-13"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-01"), checkWallPlaneLargeSchemaArrowhead.getSymbol());

		checkWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-05"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-09"), checkWallPlaneLargeMirrored.getSymbol());

		checkWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-05"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-09"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-05"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-09"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-13"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-01"), boxWallPlaneSmall.getSymbol());

		boxWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-13"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-01"), boxWallPlaneSmallEmptyArrowhead.getSymbol());

		boxWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-13"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-01"), boxWallPlaneSmallSchemaArrowhead.getSymbol());

		boxWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-05"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-09"), boxWallPlaneSmallMirrored.getSymbol());

		boxWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-05"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-09"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-05"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-09"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-13"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-01"), boxWallPlaneMedium.getSymbol());

		boxWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-13"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-01"), boxWallPlaneMediumEmptyArrowhead.getSymbol());

		boxWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-13"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-01"), boxWallPlaneMediumSchemaArrowhead.getSymbol());

		boxWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-05"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-09"), boxWallPlaneMediumMirrored.getSymbol());

		boxWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-05"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-09"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-05"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-09"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-13"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-01"), boxWallPlaneLarge.getSymbol());

		boxWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-13"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-01"), boxWallPlaneLargeEmptyArrowhead.getSymbol());

		boxWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-13"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-01"), boxWallPlaneLargeSchemaArrowhead.getSymbol());

		boxWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-05"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-09"), boxWallPlaneLargeMirrored.getSymbol());

		boxWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-05"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-09"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-05"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-09"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-13"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-01"), zigzagWallPlaneSmall.getSymbol());

		zigzagWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-13"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-01"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());

		zigzagWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-13"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-01"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());

		zigzagWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-05"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-09"), zigzagWallPlaneSmallMirrored.getSymbol());

		zigzagWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-05"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-09"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-05"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-09"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-13"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-01"), zigzagWallPlaneMedium.getSymbol());

		zigzagWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-13"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-01"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());

		zigzagWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-13"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-01"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());

		zigzagWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-05"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-09"), zigzagWallPlaneMediumMirrored.getSymbol());

		zigzagWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-05"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-09"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-05"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-09"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-13"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-01"), zigzagWallPlaneLarge.getSymbol());

		zigzagWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-13"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-01"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());

		zigzagWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-13"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-01"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());

		zigzagWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-05"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-09"), zigzagWallPlaneLargeMirrored.getSymbol());

		zigzagWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-05"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-09"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-05"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-09"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-13"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-01"), peaksWallPlaneSmall.getSymbol());

		peaksWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-13"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-01"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());

		peaksWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-13"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-01"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());

		peaksWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-05"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-09"), peaksWallPlaneSmallMirrored.getSymbol());

		peaksWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-05"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-09"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-05"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-09"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-13"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-01"), peaksWallPlaneMedium.getSymbol());

		peaksWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-13"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-01"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());

		peaksWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-13"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-01"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());

		peaksWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-05"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-09"), peaksWallPlaneMediumMirrored.getSymbol());

		peaksWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-05"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-09"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-05"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-09"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-13"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-01"), peaksWallPlaneLarge.getSymbol());

		peaksWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-13"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-01"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());

		peaksWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-13"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-01"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());

		peaksWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-05"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-09"), peaksWallPlaneLargeMirrored.getSymbol());

		peaksWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-05"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-09"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-05"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-09"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-13"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-01"), travelRotationSingleWallPlane.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-13"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-13"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-05"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-05"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-05"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-13"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-01"), travelRotationDoubleWallPlane.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-13"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-13"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-05"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-05"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-05"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-13"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-01"), travelRotationAlternatingWallPlane.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-13"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-13"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-05"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-05"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-05"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-13"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-13"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-13"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-05"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-05"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-05"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-13"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-13"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-13"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-05"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-05"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-05"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-13"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-13"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-13"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-05"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-05"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-05"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelShakingWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-05"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-01"), travelShakingWallPlane.getSymbol());

		travelShakingWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-05"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-01"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());

		travelShakingWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-05"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-01"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingle.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-13"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"), travelArmSpiralWallPlaneSingle.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-13"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-13"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-05"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-05"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-05"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDouble.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-13"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"), travelArmSpiralWallPlaneDouble.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-13"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-13"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-05"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-05"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-05"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTriple.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-13"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"), travelArmSpiralWallPlaneTriple.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-13"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-13"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-05"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-05"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-05"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanPitch() {
		assertFalse(singleStraightMovementWallPlaneSmall.canPitch());
		assertFalse(singleStraightMovementWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(singleStraightMovementWallPlaneSmallSchemaArrowhead.canPitch());

		assertFalse(singleStraightMovementWallPlaneMedium.canPitch());
		assertFalse(singleStraightMovementWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(singleStraightMovementWallPlaneMediumSchemaArrowhead.canPitch());

		assertFalse(singleStraightMovementWallPlaneLarge.canPitch());
		assertFalse(singleStraightMovementWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(singleStraightMovementWallPlaneLargeSchemaArrowhead.canPitch());

		assertFalse(singleStraightMovementWallPlaneLargest.canPitch());
		assertFalse(singleStraightMovementWallPlaneLargestEmptyArrowhead.canPitch());
		assertFalse(singleStraightMovementWallPlaneLargestSchemaArrowhead.canPitch());

		assertFalse(singleWristFlexWallPlane.canPitch());
		assertFalse(singleWristFlexWallPlaneEmptyArrowhead.canPitch());
		assertFalse(singleWristFlexWallPlaneSchemaArrowhead.canPitch());

		assertFalse(doubleWristFlexWallPlane.canPitch());
		assertFalse(doubleWristFlexWallPlaneEmptyArrowhead.canPitch());
		assertFalse(doubleWristFlexWallPlaneSchemaArrowhead.canPitch());

		assertFalse(tripleWristFlexWallPlane.canPitch());
		assertFalse(tripleWristFlexWallPlaneEmptyArrowhead.canPitch());
		assertFalse(tripleWristFlexWallPlaneSchemaArrowhead.canPitch());

		assertFalse(doubleAlternatingWristFlexWallPlane.canPitch());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canPitch());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canPitch());
		assertFalse(doubleAlternatingWristFlexWallPlaneMirrored.canPitch());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(tripleAlternatingWristFlexWallPlane.canPitch());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canPitch());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canPitch());
		assertFalse(tripleAlternatingWristFlexWallPlaneMirrored.canPitch());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(doubleStraightMovementWallPlane.canPitch());
		assertFalse(doubleStraightMovementWallPlaneEmptyArrowhead.canPitch());
		assertFalse(doubleStraightMovementWallPlaneSchemaArrowhead.canPitch());

		assertFalse(tripleStraightMovementWallPlane.canPitch());
		assertFalse(tripleStraightMovementWallPlaneEmptyArrowhead.canPitch());
		assertFalse(tripleStraightMovementWallPlaneSchemaArrowhead.canPitch());

		assertFalse(doubleAlternatingMovementWallPlane.canPitch());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowhead.canPitch());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowhead.canPitch());
		assertFalse(doubleAlternatingMovementWallPlaneMirrored.canPitch());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(tripleAlternatingMovementWallPlane.canPitch());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowhead.canPitch());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowhead.canPitch());
		assertFalse(tripleAlternatingMovementWallPlaneMirrored.canPitch());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(crossMovementWallPlane.canPitch());
		assertFalse(crossMovementWallPlaneEmptyArrowhead.canPitch());
		assertFalse(crossMovementWallPlaneSchemaArrowhead.canPitch());
		assertFalse(crossMovementWallPlaneMirrored.canPitch());
		assertFalse(crossMovementWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(crossMovementWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(bendWallPlaneSmall.canPitch());
		assertFalse(bendWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(bendWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(bendWallPlaneSmallMirrored.canPitch());
		assertFalse(bendWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(bendWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(bendWallPlaneMedium.canPitch());
		assertFalse(bendWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(bendWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(bendWallPlaneMediumMirrored.canPitch());
		assertFalse(bendWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(bendWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(bendWallPlaneLarge.canPitch());
		assertFalse(bendWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(bendWallPlaneLargeSchemaArrowhead.canPitch());
		assertFalse(bendWallPlaneLargeMirrored.canPitch());
		assertFalse(bendWallPlaneLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(bendWallPlaneLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(cornerWallPlaneSmall.canPitch());
		assertFalse(cornerWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(cornerWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(cornerWallPlaneSmallMirrored.canPitch());
		assertFalse(cornerWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(cornerWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(cornerWallPlaneMedium.canPitch());
		assertFalse(cornerWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(cornerWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(cornerWallPlaneMediumMirrored.canPitch());
		assertFalse(cornerWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(cornerWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(cornerWallPlaneLarge.canPitch());
		assertFalse(cornerWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(cornerWallPlaneLargeSchemaArrowhead.canPitch());
		assertFalse(cornerWallPlaneLargeMirrored.canPitch());
		assertFalse(cornerWallPlaneLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(cornerWallPlaneLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(cornerWallPlaneWithRotation.canPitch());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowhead.canPitch());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowhead.canPitch());
		assertFalse(cornerWallPlaneWithRotationMirrored.canPitch());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canPitch());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canPitch());

		assertFalse(checkWallPlaneSmall.canPitch());
		assertFalse(checkWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(checkWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(checkWallPlaneSmallMirrored.canPitch());
		assertFalse(checkWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(checkWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(checkWallPlaneMedium.canPitch());
		assertFalse(checkWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(checkWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(checkWallPlaneMediumMirrored.canPitch());
		assertFalse(checkWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(checkWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(checkWallPlaneLarge.canPitch());
		assertFalse(checkWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(checkWallPlaneLargeSchemaArrowhead.canPitch());
		assertFalse(checkWallPlaneLargeMirrored.canPitch());
		assertFalse(checkWallPlaneLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(checkWallPlaneLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(boxWallPlaneSmall.canPitch());
		assertFalse(boxWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(boxWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(boxWallPlaneSmallMirrored.canPitch());
		assertFalse(boxWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(boxWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(boxWallPlaneMedium.canPitch());
		assertFalse(boxWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(boxWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(boxWallPlaneMediumMirrored.canPitch());
		assertFalse(boxWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(boxWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(boxWallPlaneLarge.canPitch());
		assertFalse(boxWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(boxWallPlaneLargeSchemaArrowhead.canPitch());
		assertFalse(boxWallPlaneLargeMirrored.canPitch());
		assertFalse(boxWallPlaneLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(boxWallPlaneLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(zigzagWallPlaneSmall.canPitch());
		assertFalse(zigzagWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(zigzagWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(zigzagWallPlaneSmallMirrored.canPitch());
		assertFalse(zigzagWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(zigzagWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(zigzagWallPlaneMedium.canPitch());
		assertFalse(zigzagWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(zigzagWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(zigzagWallPlaneMediumMirrored.canPitch());
		assertFalse(zigzagWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(zigzagWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(zigzagWallPlaneLarge.canPitch());
		assertFalse(zigzagWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(zigzagWallPlaneLargeSchemaArrowhead.canPitch());
		assertFalse(zigzagWallPlaneLargeMirrored.canPitch());
		assertFalse(zigzagWallPlaneLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(zigzagWallPlaneLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(peaksWallPlaneSmall.canPitch());
		assertFalse(peaksWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(peaksWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(peaksWallPlaneSmallMirrored.canPitch());
		assertFalse(peaksWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(peaksWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(peaksWallPlaneMedium.canPitch());
		assertFalse(peaksWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(peaksWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(peaksWallPlaneMediumMirrored.canPitch());
		assertFalse(peaksWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(peaksWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(peaksWallPlaneLarge.canPitch());
		assertFalse(peaksWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(peaksWallPlaneLargeSchemaArrowhead.canPitch());
		assertFalse(peaksWallPlaneLargeMirrored.canPitch());
		assertFalse(peaksWallPlaneLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(peaksWallPlaneLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(travelRotationSingleWallPlane.canPitch());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowhead.canPitch());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowhead.canPitch());
		assertFalse(travelRotationSingleWallPlaneMirrored.canPitch());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(travelRotationDoubleWallPlane.canPitch());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowhead.canPitch());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowhead.canPitch());
		assertFalse(travelRotationDoubleWallPlaneMirrored.canPitch());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(travelRotationAlternatingWallPlane.canPitch());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowhead.canPitch());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowhead.canPitch());
		assertFalse(travelRotationAlternatingWallPlaneMirrored.canPitch());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(travelRotationSingleFloorPlane.canPitch());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowhead.canPitch());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowhead.canPitch());
		assertFalse(travelRotationSingleFloorPlaneMirrored.canPitch());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(travelRotationDoubleFloorPlane.canPitch());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowhead.canPitch());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowhead.canPitch());
		assertFalse(travelRotationDoubleFloorPlaneMirrored.canPitch());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(travelRotationAlternatingFloorPlane.canPitch());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowhead.canPitch());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowhead.canPitch());
		assertFalse(travelRotationAlternatingFloorPlaneMirrored.canPitch());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(travelShakingWallPlane.canPitch());
		assertFalse(travelShakingWallPlaneEmptyArrowhead.canPitch());
		assertFalse(travelShakingWallPlaneSchemaArrowhead.canPitch());

		assertFalse(travelArmSpiralWallPlaneSingle.canPitch());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowhead.canPitch());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowhead.canPitch());
		assertFalse(travelArmSpiralWallPlaneSingleMirrored.canPitch());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canPitch());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canPitch());

		assertFalse(travelArmSpiralWallPlaneDouble.canPitch());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canPitch());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canPitch());
		assertFalse(travelArmSpiralWallPlaneDoubleMirrored.canPitch());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canPitch());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canPitch());

		assertFalse(travelArmSpiralWallPlaneTriple.canPitch());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowhead.canPitch());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowhead.canPitch());
		assertFalse(travelArmSpiralWallPlaneTripleMirrored.canPitch());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canPitch());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canPitch());

	}

	@Override
	public void testPitch() {

	}

	@Override
	public void testCanRoll() {

		assertFalse(singleStraightMovementWallPlaneSmall.canRoll());
		assertFalse(singleStraightMovementWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(singleStraightMovementWallPlaneSmallSchemaArrowhead.canRoll());

		assertFalse(singleStraightMovementWallPlaneMedium.canRoll());
		assertFalse(singleStraightMovementWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(singleStraightMovementWallPlaneMediumSchemaArrowhead.canRoll());

		assertFalse(singleStraightMovementWallPlaneLarge.canRoll());
		assertFalse(singleStraightMovementWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(singleStraightMovementWallPlaneLargeSchemaArrowhead.canRoll());

		assertFalse(singleStraightMovementWallPlaneLargest.canRoll());
		assertFalse(singleStraightMovementWallPlaneLargestEmptyArrowhead.canRoll());
		assertFalse(singleStraightMovementWallPlaneLargestSchemaArrowhead.canRoll());

		assertFalse(singleWristFlexWallPlane.canRoll());
		assertFalse(singleWristFlexWallPlaneEmptyArrowhead.canRoll());
		assertFalse(singleWristFlexWallPlaneSchemaArrowhead.canRoll());

		assertFalse(doubleWristFlexWallPlane.canRoll());
		assertFalse(doubleWristFlexWallPlaneEmptyArrowhead.canRoll());
		assertFalse(doubleWristFlexWallPlaneSchemaArrowhead.canRoll());

		assertFalse(tripleWristFlexWallPlane.canRoll());
		assertFalse(tripleWristFlexWallPlaneEmptyArrowhead.canRoll());
		assertFalse(tripleWristFlexWallPlaneSchemaArrowhead.canRoll());

		assertFalse(doubleAlternatingWristFlexWallPlane.canRoll());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canRoll());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canRoll());
		assertFalse(doubleAlternatingWristFlexWallPlaneMirrored.canRoll());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(tripleAlternatingWristFlexWallPlane.canRoll());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canRoll());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canRoll());
		assertFalse(tripleAlternatingWristFlexWallPlaneMirrored.canRoll());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(doubleStraightMovementWallPlane.canRoll());
		assertFalse(doubleStraightMovementWallPlaneEmptyArrowhead.canRoll());
		assertFalse(doubleStraightMovementWallPlaneSchemaArrowhead.canRoll());

		assertFalse(tripleStraightMovementWallPlane.canRoll());
		assertFalse(tripleStraightMovementWallPlaneEmptyArrowhead.canRoll());
		assertFalse(tripleStraightMovementWallPlaneSchemaArrowhead.canRoll());

		assertFalse(doubleAlternatingMovementWallPlane.canRoll());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowhead.canRoll());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowhead.canRoll());
		assertFalse(doubleAlternatingMovementWallPlaneMirrored.canRoll());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(tripleAlternatingMovementWallPlane.canRoll());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowhead.canRoll());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowhead.canRoll());
		assertFalse(tripleAlternatingMovementWallPlaneMirrored.canRoll());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(crossMovementWallPlane.canRoll());
		assertFalse(crossMovementWallPlaneEmptyArrowhead.canRoll());
		assertFalse(crossMovementWallPlaneSchemaArrowhead.canRoll());
		assertFalse(crossMovementWallPlaneMirrored.canRoll());
		assertFalse(crossMovementWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(crossMovementWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(bendWallPlaneSmall.canRoll());
		assertFalse(bendWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(bendWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(bendWallPlaneSmallMirrored.canRoll());
		assertFalse(bendWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(bendWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(bendWallPlaneMedium.canRoll());
		assertFalse(bendWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(bendWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(bendWallPlaneMediumMirrored.canRoll());
		assertFalse(bendWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(bendWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(bendWallPlaneLarge.canRoll());
		assertFalse(bendWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(bendWallPlaneLargeSchemaArrowhead.canRoll());
		assertFalse(bendWallPlaneLargeMirrored.canRoll());
		assertFalse(bendWallPlaneLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(bendWallPlaneLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(cornerWallPlaneSmall.canRoll());
		assertFalse(cornerWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(cornerWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(cornerWallPlaneSmallMirrored.canRoll());
		assertFalse(cornerWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(cornerWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(cornerWallPlaneMedium.canRoll());
		assertFalse(cornerWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(cornerWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(cornerWallPlaneMediumMirrored.canRoll());
		assertFalse(cornerWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(cornerWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(cornerWallPlaneLarge.canRoll());
		assertFalse(cornerWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(cornerWallPlaneLargeSchemaArrowhead.canRoll());
		assertFalse(cornerWallPlaneLargeMirrored.canRoll());
		assertFalse(cornerWallPlaneLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(cornerWallPlaneLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(cornerWallPlaneWithRotation.canRoll());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowhead.canRoll());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowhead.canRoll());
		assertFalse(cornerWallPlaneWithRotationMirrored.canRoll());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canRoll());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canRoll());

		assertFalse(checkWallPlaneSmall.canRoll());
		assertFalse(checkWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(checkWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(checkWallPlaneSmallMirrored.canRoll());
		assertFalse(checkWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(checkWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(checkWallPlaneMedium.canRoll());
		assertFalse(checkWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(checkWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(checkWallPlaneMediumMirrored.canRoll());
		assertFalse(checkWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(checkWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(checkWallPlaneLarge.canRoll());
		assertFalse(checkWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(checkWallPlaneLargeSchemaArrowhead.canRoll());
		assertFalse(checkWallPlaneLargeMirrored.canRoll());
		assertFalse(checkWallPlaneLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(checkWallPlaneLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(boxWallPlaneSmall.canRoll());
		assertFalse(boxWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(boxWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(boxWallPlaneSmallMirrored.canRoll());
		assertFalse(boxWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(boxWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(boxWallPlaneMedium.canRoll());
		assertFalse(boxWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(boxWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(boxWallPlaneMediumMirrored.canRoll());
		assertFalse(boxWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(boxWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(boxWallPlaneLarge.canRoll());
		assertFalse(boxWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(boxWallPlaneLargeSchemaArrowhead.canRoll());
		assertFalse(boxWallPlaneLargeMirrored.canRoll());
		assertFalse(boxWallPlaneLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(boxWallPlaneLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(zigzagWallPlaneSmall.canRoll());
		assertFalse(zigzagWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(zigzagWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(zigzagWallPlaneSmallMirrored.canRoll());
		assertFalse(zigzagWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(zigzagWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(zigzagWallPlaneMedium.canRoll());
		assertFalse(zigzagWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(zigzagWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(zigzagWallPlaneMediumMirrored.canRoll());
		assertFalse(zigzagWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(zigzagWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(zigzagWallPlaneLarge.canRoll());
		assertFalse(zigzagWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(zigzagWallPlaneLargeSchemaArrowhead.canRoll());
		assertFalse(zigzagWallPlaneLargeMirrored.canRoll());
		assertFalse(zigzagWallPlaneLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(zigzagWallPlaneLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(peaksWallPlaneSmall.canRoll());
		assertFalse(peaksWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(peaksWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(peaksWallPlaneSmallMirrored.canRoll());
		assertFalse(peaksWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(peaksWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(peaksWallPlaneMedium.canRoll());
		assertFalse(peaksWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(peaksWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(peaksWallPlaneMediumMirrored.canRoll());
		assertFalse(peaksWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(peaksWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(peaksWallPlaneLarge.canRoll());
		assertFalse(peaksWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(peaksWallPlaneLargeSchemaArrowhead.canRoll());
		assertFalse(peaksWallPlaneLargeMirrored.canRoll());
		assertFalse(peaksWallPlaneLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(peaksWallPlaneLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(travelRotationSingleWallPlane.canRoll());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowhead.canRoll());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowhead.canRoll());
		assertFalse(travelRotationSingleWallPlaneMirrored.canRoll());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(travelRotationDoubleWallPlane.canRoll());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowhead.canRoll());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowhead.canRoll());
		assertFalse(travelRotationDoubleWallPlaneMirrored.canRoll());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(travelRotationAlternatingWallPlane.canRoll());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowhead.canRoll());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowhead.canRoll());
		assertFalse(travelRotationAlternatingWallPlaneMirrored.canRoll());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(travelRotationSingleFloorPlane.canRoll());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowhead.canRoll());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowhead.canRoll());
		assertFalse(travelRotationSingleFloorPlaneMirrored.canRoll());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(travelRotationDoubleFloorPlane.canRoll());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowhead.canRoll());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowhead.canRoll());
		assertFalse(travelRotationDoubleFloorPlaneMirrored.canRoll());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(travelRotationAlternatingFloorPlane.canRoll());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowhead.canRoll());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowhead.canRoll());
		assertFalse(travelRotationAlternatingFloorPlaneMirrored.canRoll());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(travelShakingWallPlane.canRoll());
		assertFalse(travelShakingWallPlaneEmptyArrowhead.canRoll());
		assertFalse(travelShakingWallPlaneSchemaArrowhead.canRoll());

		assertFalse(travelArmSpiralWallPlaneSingle.canRoll());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowhead.canRoll());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowhead.canRoll());
		assertFalse(travelArmSpiralWallPlaneSingleMirrored.canRoll());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canRoll());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canRoll());

		assertFalse(travelArmSpiralWallPlaneDouble.canRoll());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canRoll());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canRoll());
		assertFalse(travelArmSpiralWallPlaneDoubleMirrored.canRoll());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canRoll());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canRoll());

		assertFalse(travelArmSpiralWallPlaneTriple.canRoll());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowhead.canRoll());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowhead.canRoll());
		assertFalse(travelArmSpiralWallPlaneTripleMirrored.canRoll());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canRoll());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canRoll());

	}

	@Override
	public void testRoll() {

	}

	@Override
	public void testCanSwitchArrowHead() {

		assertTrue(singleStraightMovementWallPlaneSmall.canSwitchArrowHead());
		assertTrue(singleStraightMovementWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(singleStraightMovementWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());

		assertTrue(singleStraightMovementWallPlaneMedium.canSwitchArrowHead());
		assertTrue(singleStraightMovementWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(singleStraightMovementWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());

		assertTrue(singleStraightMovementWallPlaneLarge.canSwitchArrowHead());
		assertTrue(singleStraightMovementWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(singleStraightMovementWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());

		assertTrue(singleStraightMovementWallPlaneLargest.canSwitchArrowHead());
		assertTrue(singleStraightMovementWallPlaneLargestEmptyArrowhead.canSwitchArrowHead());
		assertTrue(singleStraightMovementWallPlaneLargestSchemaArrowhead.canSwitchArrowHead());

		assertTrue(singleWristFlexWallPlane.canSwitchArrowHead());
		assertTrue(singleWristFlexWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(singleWristFlexWallPlaneSchemaArrowhead.canSwitchArrowHead());

		assertTrue(doubleWristFlexWallPlane.canSwitchArrowHead());
		assertTrue(doubleWristFlexWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(doubleWristFlexWallPlaneSchemaArrowhead.canSwitchArrowHead());

		assertTrue(tripleWristFlexWallPlane.canSwitchArrowHead());
		assertTrue(tripleWristFlexWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(tripleWristFlexWallPlaneSchemaArrowhead.canSwitchArrowHead());

		assertTrue(doubleAlternatingWristFlexWallPlane.canSwitchArrowHead());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(doubleAlternatingWristFlexWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(tripleAlternatingWristFlexWallPlane.canSwitchArrowHead());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(tripleAlternatingWristFlexWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(doubleStraightMovementWallPlane.canSwitchArrowHead());
		assertTrue(doubleStraightMovementWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(doubleStraightMovementWallPlaneSchemaArrowhead.canSwitchArrowHead());

		assertTrue(tripleStraightMovementWallPlane.canSwitchArrowHead());
		assertTrue(tripleStraightMovementWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(tripleStraightMovementWallPlaneSchemaArrowhead.canSwitchArrowHead());

		assertTrue(doubleAlternatingMovementWallPlane.canSwitchArrowHead());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(doubleAlternatingMovementWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(tripleAlternatingMovementWallPlane.canSwitchArrowHead());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(tripleAlternatingMovementWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(crossMovementWallPlane.canSwitchArrowHead());
		assertTrue(crossMovementWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(crossMovementWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(crossMovementWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(crossMovementWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(crossMovementWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(bendWallPlaneSmall.canSwitchArrowHead());
		assertTrue(bendWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(bendWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(bendWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(bendWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(bendWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(bendWallPlaneMedium.canSwitchArrowHead());
		assertTrue(bendWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(bendWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(bendWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(bendWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(bendWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(bendWallPlaneLarge.canSwitchArrowHead());
		assertTrue(bendWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(bendWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(bendWallPlaneLargeMirrored.canSwitchArrowHead());
		assertTrue(bendWallPlaneLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(bendWallPlaneLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(cornerWallPlaneSmall.canSwitchArrowHead());
		assertTrue(cornerWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(cornerWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(cornerWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(cornerWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(cornerWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(cornerWallPlaneMedium.canSwitchArrowHead());
		assertTrue(cornerWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(cornerWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(cornerWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(cornerWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(cornerWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(cornerWallPlaneLarge.canSwitchArrowHead());
		assertTrue(cornerWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(cornerWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(cornerWallPlaneLargeMirrored.canSwitchArrowHead());
		assertTrue(cornerWallPlaneLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(cornerWallPlaneLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(cornerWallPlaneWithRotation.canSwitchArrowHead());
		assertTrue(cornerWallPlaneWithRotationEmptyArrowhead.canSwitchArrowHead());
		assertTrue(cornerWallPlaneWithRotationSchemaArrowhead.canSwitchArrowHead());
		assertTrue(cornerWallPlaneWithRotationMirrored.canSwitchArrowHead());
		assertTrue(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(checkWallPlaneSmall.canSwitchArrowHead());
		assertTrue(checkWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(checkWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(checkWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(checkWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(checkWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(checkWallPlaneMedium.canSwitchArrowHead());
		assertTrue(checkWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(checkWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(checkWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(checkWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(checkWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(checkWallPlaneLarge.canSwitchArrowHead());
		assertTrue(checkWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(checkWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(checkWallPlaneLargeMirrored.canSwitchArrowHead());
		assertTrue(checkWallPlaneLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(checkWallPlaneLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(boxWallPlaneSmall.canSwitchArrowHead());
		assertTrue(boxWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(boxWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(boxWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(boxWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(boxWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(boxWallPlaneMedium.canSwitchArrowHead());
		assertTrue(boxWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(boxWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(boxWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(boxWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(boxWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(boxWallPlaneLarge.canSwitchArrowHead());
		assertTrue(boxWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(boxWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(boxWallPlaneLargeMirrored.canSwitchArrowHead());
		assertTrue(boxWallPlaneLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(boxWallPlaneLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(zigzagWallPlaneSmall.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(zigzagWallPlaneMedium.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(zigzagWallPlaneLarge.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneLargeMirrored.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(zigzagWallPlaneLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(peaksWallPlaneSmall.canSwitchArrowHead());
		assertTrue(peaksWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(peaksWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(peaksWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(peaksWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(peaksWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(peaksWallPlaneMedium.canSwitchArrowHead());
		assertTrue(peaksWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(peaksWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(peaksWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(peaksWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(peaksWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(peaksWallPlaneLarge.canSwitchArrowHead());
		assertTrue(peaksWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(peaksWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(peaksWallPlaneLargeMirrored.canSwitchArrowHead());
		assertTrue(peaksWallPlaneLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(peaksWallPlaneLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelRotationSingleWallPlane.canSwitchArrowHead());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationSingleWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelRotationDoubleWallPlane.canSwitchArrowHead());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationDoubleWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelRotationAlternatingWallPlane.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelRotationSingleFloorPlane.canSwitchArrowHead());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationSingleFloorPlaneMirrored.canSwitchArrowHead());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelRotationDoubleFloorPlane.canSwitchArrowHead());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationDoubleFloorPlaneMirrored.canSwitchArrowHead());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelRotationAlternatingFloorPlane.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingFloorPlaneMirrored.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelShakingWallPlane.canSwitchArrowHead());
		assertTrue(travelShakingWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelShakingWallPlaneSchemaArrowhead.canSwitchArrowHead());

		assertTrue(travelArmSpiralWallPlaneSingle.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneSingleMirrored.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelArmSpiralWallPlaneDouble.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneDoubleMirrored.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(travelArmSpiralWallPlaneTriple.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowhead.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowhead.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneTripleMirrored.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canSwitchArrowHead());

	}

	@Override
	public void testSwitchArrowHead() {

		singleStraightMovementWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-01"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-01"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-01"),
				singleStraightMovementWallPlaneSmall.getSymbol());

		singleStraightMovementWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-01"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-01"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-01"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-01-01"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-02-01"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-01-03-01"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-01"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-01"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-01"),
				singleStraightMovementWallPlaneMedium.getSymbol());

		singleStraightMovementWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-01"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-01"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-01"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-01-01"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-02-01"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-02-03-01"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-01"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-01"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-01"),
				singleStraightMovementWallPlaneLarge.getSymbol());

		singleStraightMovementWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-01"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-01"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-01"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-01-01"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-02-01"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-03-03-01"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());

		singleStraightMovementWallPlaneLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-01-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-02-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-04-03-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());

		singleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-01"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-01"), singleWristFlexWallPlane.getSymbol());
		singleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-01"), singleWristFlexWallPlane.getSymbol());

		singleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-01"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-01"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		singleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-01"),
				singleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		singleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-01-01"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-02-01"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		singleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-001-05-03-01"),
				singleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-02-01"), doubleStraightMovementWallPlane.getSymbol());
		doubleStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-03-01"), doubleStraightMovementWallPlane.getSymbol());
		doubleStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-01-01"), doubleStraightMovementWallPlane.getSymbol());

		doubleStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-03-01"),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-01-01"),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-02-01"),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		doubleStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-01-01"),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-02-01"),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-03-01"),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		doubleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"), doubleWristFlexWallPlane.getSymbol());

		doubleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-01"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-01"), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-01"), doubleAlternatingMovementWallPlane.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-01"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-01"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-01"),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-01"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-01"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-01"),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-01"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-01"), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-01"), doubleAlternatingWristFlexWallPlane.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-01"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-01"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-01"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-01"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-01"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-01"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		doubleAlternatingMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-09"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-09"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-09"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-09"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-09"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-09"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-01-09"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-02-09"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-01-03-09"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-09"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-09"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-09"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-09"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-09"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-09"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-01-09"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-02-09"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-003-02-03-09"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		crossMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-01"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-01"), crossMovementWallPlane.getSymbol());
		crossMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-01"), crossMovementWallPlane.getSymbol());

		crossMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-01"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-01"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());
		crossMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-01"),
				crossMovementWallPlaneEmptyArrowhead.getSymbol());

		crossMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-01"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-01"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());
		crossMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-01"),
				crossMovementWallPlaneSchemaArrowhead.getSymbol());

		crossMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-09"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-09"), crossMovementWallPlaneMirrored.getSymbol());
		crossMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-09"), crossMovementWallPlaneMirrored.getSymbol());

		crossMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-09"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-09"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		crossMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-09"),
				crossMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		crossMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-01-09"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-02-09"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		crossMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-004-01-03-09"),
				crossMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-02-01"), tripleStraightMovementWallPlane.getSymbol());
		tripleStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-03-01"), tripleStraightMovementWallPlane.getSymbol());
		tripleStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-01-01"), tripleStraightMovementWallPlane.getSymbol());

		tripleStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-03-01"),
				tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-01-01"),
				tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-02-01"),
				tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		tripleStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-01-01"),
				tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-02-01"),
				tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-03-01"),
				tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-01"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-01"), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-01"), tripleWristFlexWallPlane.getSymbol());

		tripleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-01"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-01"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-01"),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-01"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-01"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-01"),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-01"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-01"), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-01"), tripleAlternatingMovementWallPlane.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-01"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-01"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-01"),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-01"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-01"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-01"),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-01"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-01"), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-01"), tripleAlternatingWristFlexWallPlane.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-01"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-01"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-01"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-01"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-01"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-01"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleAlternatingMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-09"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-09"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-09"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-09"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-09"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-09"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-01-09"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-02-09"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-01-03-09"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-09"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-09"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-09"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-09"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-09"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-09"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-01-09"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-02-09"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-006-02-03-09"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-01"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-01"), bendWallPlaneSmall.getSymbol());
		bendWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-01"), bendWallPlaneSmall.getSymbol());

		bendWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-01"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-01"), bendWallPlaneSmallEmptyArrowhead.getSymbol());
		bendWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-01"), bendWallPlaneSmallEmptyArrowhead.getSymbol());

		bendWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-01"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-01"), bendWallPlaneSmallSchemaArrowhead.getSymbol());
		bendWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-01"), bendWallPlaneSmallSchemaArrowhead.getSymbol());

		bendWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-01"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-01"), bendWallPlaneMedium.getSymbol());
		bendWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-01"), bendWallPlaneMedium.getSymbol());

		bendWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-01"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-01"), bendWallPlaneMediumEmptyArrowhead.getSymbol());
		bendWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-01"), bendWallPlaneMediumEmptyArrowhead.getSymbol());

		bendWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-01"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-01"), bendWallPlaneMediumSchemaArrowhead.getSymbol());
		bendWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-01"), bendWallPlaneMediumSchemaArrowhead.getSymbol());

		bendWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-01"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-01"), bendWallPlaneLarge.getSymbol());
		bendWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-01"), bendWallPlaneLarge.getSymbol());

		bendWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-01"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-01"), bendWallPlaneLargeEmptyArrowhead.getSymbol());
		bendWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-01"), bendWallPlaneLargeEmptyArrowhead.getSymbol());

		bendWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-01"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-01"), bendWallPlaneLargeSchemaArrowhead.getSymbol());
		bendWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-01"), bendWallPlaneLargeSchemaArrowhead.getSymbol());

		bendWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-09"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-09"), bendWallPlaneSmallMirrored.getSymbol());
		bendWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-09"), bendWallPlaneSmallMirrored.getSymbol());

		bendWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-09"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-09"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-09"),
				bendWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-01-09"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-02-09"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-01-03-09"),
				bendWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-09"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-09"), bendWallPlaneMediumMirrored.getSymbol());
		bendWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-09"), bendWallPlaneMediumMirrored.getSymbol());

		bendWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-09"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-09"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-09"),
				bendWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-01-09"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-02-09"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-02-03-09"),
				bendWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		bendWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-09"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-09"), bendWallPlaneLargeMirrored.getSymbol());
		bendWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-09"), bendWallPlaneLargeMirrored.getSymbol());

		bendWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-09"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-09"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		bendWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-09"),
				bendWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		bendWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-01-09"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-02-09"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		bendWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-007-03-03-09"),
				bendWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-01"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-01"), cornerWallPlaneSmall.getSymbol());
		cornerWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-01"), cornerWallPlaneSmall.getSymbol());

		cornerWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-01"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-01"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());
		cornerWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-01"), cornerWallPlaneSmallEmptyArrowhead.getSymbol());

		cornerWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-01"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-01"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());
		cornerWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-01"), cornerWallPlaneSmallSchemaArrowhead.getSymbol());

		cornerWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-01"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-01"), cornerWallPlaneMedium.getSymbol());
		cornerWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-01"), cornerWallPlaneMedium.getSymbol());

		cornerWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-01"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-01"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());
		cornerWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-01"), cornerWallPlaneMediumEmptyArrowhead.getSymbol());

		cornerWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-01"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-01"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());
		cornerWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-01"),
				cornerWallPlaneMediumSchemaArrowhead.getSymbol());

		cornerWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-01"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-01"), cornerWallPlaneLarge.getSymbol());
		cornerWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-01"), cornerWallPlaneLarge.getSymbol());

		cornerWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-01"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-01"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());
		cornerWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-01"), cornerWallPlaneLargeEmptyArrowhead.getSymbol());

		cornerWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-01"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-01"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());
		cornerWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-01"), cornerWallPlaneLargeSchemaArrowhead.getSymbol());

		cornerWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-09"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-09"), cornerWallPlaneSmallMirrored.getSymbol());
		cornerWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-09"), cornerWallPlaneSmallMirrored.getSymbol());

		cornerWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-09"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-09"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-09"),
				cornerWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-01-09"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-02-09"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-01-03-09"),
				cornerWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-09"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-09"), cornerWallPlaneMediumMirrored.getSymbol());
		cornerWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-09"), cornerWallPlaneMediumMirrored.getSymbol());

		cornerWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-09"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-09"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-09"),
				cornerWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-01-09"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-02-09"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-02-03-09"),
				cornerWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-09"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-09"), cornerWallPlaneLargeMirrored.getSymbol());
		cornerWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-09"), cornerWallPlaneLargeMirrored.getSymbol());

		cornerWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-09"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-09"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-09"),
				cornerWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-01-09"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-02-09"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-03-03-09"),
				cornerWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotation.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-01"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-01"), cornerWallPlaneWithRotation.getSymbol());
		cornerWallPlaneWithRotation.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-01"), cornerWallPlaneWithRotation.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-01"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-01"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-01"),
				cornerWallPlaneWithRotationEmptyArrowhead.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-01"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-01"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-01"),
				cornerWallPlaneWithRotationSchemaArrowhead.getSymbol());

		cornerWallPlaneWithRotationMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-09"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-09"), cornerWallPlaneWithRotationMirrored.getSymbol());
		cornerWallPlaneWithRotationMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-09"), cornerWallPlaneWithRotationMirrored.getSymbol());

		cornerWallPlaneWithRotationEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-09"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-09"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-09"),
				cornerWallPlaneWithRotationEmptyArrowheadMirrored.getSymbol());

		cornerWallPlaneWithRotationSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-01-09"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-02-09"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());
		cornerWallPlaneWithRotationSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-008-04-03-09"),
				cornerWallPlaneWithRotationSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-01"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-01"), checkWallPlaneSmall.getSymbol());
		checkWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-01"), checkWallPlaneSmall.getSymbol());

		checkWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-01"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-01"), checkWallPlaneSmallEmptyArrowhead.getSymbol());
		checkWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-01"), checkWallPlaneSmallEmptyArrowhead.getSymbol());

		checkWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-01"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-01"), checkWallPlaneSmallSchemaArrowhead.getSymbol());
		checkWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-01"), checkWallPlaneSmallSchemaArrowhead.getSymbol());

		checkWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-01"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-01"), checkWallPlaneMedium.getSymbol());
		checkWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-01"), checkWallPlaneMedium.getSymbol());

		checkWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-01"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-01"), checkWallPlaneMediumEmptyArrowhead.getSymbol());
		checkWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-01"), checkWallPlaneMediumEmptyArrowhead.getSymbol());

		checkWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-01"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-01"), checkWallPlaneMediumSchemaArrowhead.getSymbol());
		checkWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-01"), checkWallPlaneMediumSchemaArrowhead.getSymbol());

		checkWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-01"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-01"), checkWallPlaneLarge.getSymbol());
		checkWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-01"), checkWallPlaneLarge.getSymbol());

		checkWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-01"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-01"), checkWallPlaneLargeEmptyArrowhead.getSymbol());
		checkWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-01"), checkWallPlaneLargeEmptyArrowhead.getSymbol());

		checkWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-01"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-01"), checkWallPlaneLargeSchemaArrowhead.getSymbol());
		checkWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-01"), checkWallPlaneLargeSchemaArrowhead.getSymbol());

		checkWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-09"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-09"), checkWallPlaneSmallMirrored.getSymbol());
		checkWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-09"), checkWallPlaneSmallMirrored.getSymbol());

		checkWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-09"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-09"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-09"),
				checkWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-01-09"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-02-09"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-01-03-09"),
				checkWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-09"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-09"), checkWallPlaneMediumMirrored.getSymbol());
		checkWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-09"), checkWallPlaneMediumMirrored.getSymbol());

		checkWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-09"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-09"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-09"),
				checkWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-01-09"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-02-09"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-02-03-09"),
				checkWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		checkWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-09"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-09"), checkWallPlaneLargeMirrored.getSymbol());
		checkWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-09"), checkWallPlaneLargeMirrored.getSymbol());

		checkWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-09"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-09"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		checkWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-09"),
				checkWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		checkWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-01-09"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-02-09"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		checkWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-009-03-03-09"),
				checkWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-01"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-01"), boxWallPlaneSmall.getSymbol());
		boxWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-01"), boxWallPlaneSmall.getSymbol());

		boxWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-01"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-01"), boxWallPlaneSmallEmptyArrowhead.getSymbol());
		boxWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-01"), boxWallPlaneSmallEmptyArrowhead.getSymbol());

		boxWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-01"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-01"), boxWallPlaneSmallSchemaArrowhead.getSymbol());
		boxWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-01"), boxWallPlaneSmallSchemaArrowhead.getSymbol());

		boxWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-01"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-01"), boxWallPlaneMedium.getSymbol());
		boxWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-01"), boxWallPlaneMedium.getSymbol());

		boxWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-01"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-01"), boxWallPlaneMediumEmptyArrowhead.getSymbol());
		boxWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-01"), boxWallPlaneMediumEmptyArrowhead.getSymbol());

		boxWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-01"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-01"), boxWallPlaneMediumSchemaArrowhead.getSymbol());
		boxWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-01"), boxWallPlaneMediumSchemaArrowhead.getSymbol());

		boxWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-01"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-01"), boxWallPlaneLarge.getSymbol());
		boxWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-01"), boxWallPlaneLarge.getSymbol());

		boxWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-01"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-01"), boxWallPlaneLargeEmptyArrowhead.getSymbol());
		boxWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-01"), boxWallPlaneLargeEmptyArrowhead.getSymbol());

		boxWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-01"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-01"), boxWallPlaneLargeSchemaArrowhead.getSymbol());
		boxWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-01"), boxWallPlaneLargeSchemaArrowhead.getSymbol());

		boxWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-09"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-09"), boxWallPlaneSmallMirrored.getSymbol());
		boxWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-09"), boxWallPlaneSmallMirrored.getSymbol());

		boxWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-09"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-09"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-09"),
				boxWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-01-09"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-02-09"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-01-03-09"),
				boxWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-09"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-09"), boxWallPlaneMediumMirrored.getSymbol());
		boxWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-09"), boxWallPlaneMediumMirrored.getSymbol());

		boxWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-09"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-09"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-09"),
				boxWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-01-09"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-02-09"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-02-03-09"),
				boxWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		boxWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-09"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-09"), boxWallPlaneLargeMirrored.getSymbol());
		boxWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-09"), boxWallPlaneLargeMirrored.getSymbol());

		boxWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-09"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-09"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		boxWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-09"),
				boxWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		boxWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-01-09"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-02-09"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		boxWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-010-03-03-09"),
				boxWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-01"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-01"), zigzagWallPlaneSmall.getSymbol());
		zigzagWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-01"), zigzagWallPlaneSmall.getSymbol());

		zigzagWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-01"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-01"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());
		zigzagWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-01"), zigzagWallPlaneSmallEmptyArrowhead.getSymbol());

		zigzagWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-01"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-01"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());
		zigzagWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-01"), zigzagWallPlaneSmallSchemaArrowhead.getSymbol());

		zigzagWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-01"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-01"), zigzagWallPlaneMedium.getSymbol());
		zigzagWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-01"), zigzagWallPlaneMedium.getSymbol());

		zigzagWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-01"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-01"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());
		zigzagWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-01"), zigzagWallPlaneMediumEmptyArrowhead.getSymbol());

		zigzagWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-01"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-01"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());
		zigzagWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-01"),
				zigzagWallPlaneMediumSchemaArrowhead.getSymbol());

		zigzagWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-01"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-01"), zigzagWallPlaneLarge.getSymbol());
		zigzagWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-01"), zigzagWallPlaneLarge.getSymbol());

		zigzagWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-01"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-01"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());
		zigzagWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-01"), zigzagWallPlaneLargeEmptyArrowhead.getSymbol());

		zigzagWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-01"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-01"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());
		zigzagWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-01"), zigzagWallPlaneLargeSchemaArrowhead.getSymbol());

		zigzagWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-09"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-09"), zigzagWallPlaneSmallMirrored.getSymbol());
		zigzagWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-09"), zigzagWallPlaneSmallMirrored.getSymbol());

		zigzagWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-09"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-09"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-09"),
				zigzagWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-01-09"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-02-09"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-01-03-09"),
				zigzagWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-09"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-09"), zigzagWallPlaneMediumMirrored.getSymbol());
		zigzagWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-09"), zigzagWallPlaneMediumMirrored.getSymbol());

		zigzagWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-09"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-09"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-09"),
				zigzagWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-01-09"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-02-09"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-02-03-09"),
				zigzagWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		zigzagWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-09"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-09"), zigzagWallPlaneLargeMirrored.getSymbol());
		zigzagWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-09"), zigzagWallPlaneLargeMirrored.getSymbol());

		zigzagWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-09"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-09"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-09"),
				zigzagWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		zigzagWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-01-09"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-02-09"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		zigzagWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-011-03-03-09"),
				zigzagWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-01"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-01"), peaksWallPlaneSmall.getSymbol());
		peaksWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-01"), peaksWallPlaneSmall.getSymbol());

		peaksWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-01"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-01"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());
		peaksWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-01"), peaksWallPlaneSmallEmptyArrowhead.getSymbol());

		peaksWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-01"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-01"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());
		peaksWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-01"), peaksWallPlaneSmallSchemaArrowhead.getSymbol());

		peaksWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-01"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-01"), peaksWallPlaneMedium.getSymbol());
		peaksWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-01"), peaksWallPlaneMedium.getSymbol());

		peaksWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-01"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-01"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());
		peaksWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-01"), peaksWallPlaneMediumEmptyArrowhead.getSymbol());

		peaksWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-01"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-01"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());
		peaksWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-01"), peaksWallPlaneMediumSchemaArrowhead.getSymbol());

		peaksWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-01"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-01"), peaksWallPlaneLarge.getSymbol());
		peaksWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-01"), peaksWallPlaneLarge.getSymbol());

		peaksWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-01"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-01"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());
		peaksWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-01"), peaksWallPlaneLargeEmptyArrowhead.getSymbol());

		peaksWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-01"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-01"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());
		peaksWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-01"), peaksWallPlaneLargeSchemaArrowhead.getSymbol());

		peaksWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-09"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-09"), peaksWallPlaneSmallMirrored.getSymbol());
		peaksWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-09"), peaksWallPlaneSmallMirrored.getSymbol());

		peaksWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-09"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-09"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-09"),
				peaksWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-01-09"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-02-09"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-01-03-09"),
				peaksWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-09"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-09"), peaksWallPlaneMediumMirrored.getSymbol());
		peaksWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-09"), peaksWallPlaneMediumMirrored.getSymbol());

		peaksWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-09"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-09"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-09"),
				peaksWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-01-09"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-02-09"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-02-03-09"),
				peaksWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		peaksWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-09"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-09"), peaksWallPlaneLargeMirrored.getSymbol());
		peaksWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-09"), peaksWallPlaneLargeMirrored.getSymbol());

		peaksWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-09"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-09"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-09"),
				peaksWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		peaksWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-01-09"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-02-09"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		peaksWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-012-03-03-09"),
				peaksWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-01"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-01"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-01"), travelRotationSingleWallPlane.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-01"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-01"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-01"), travelRotationDoubleWallPlane.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-01"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-01"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-01"), travelRotationAlternatingWallPlane.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelShakingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-01"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-01"), travelShakingWallPlane.getSymbol());
		travelShakingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-01"), travelShakingWallPlane.getSymbol());

		travelShakingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-01"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-01"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());
		travelShakingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-01"),
				travelShakingWallPlaneEmptyArrowhead.getSymbol());

		travelShakingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-01-01"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-02-01"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());
		travelShakingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-019-01-03-01"),
				travelShakingWallPlaneSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingle.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"), travelArmSpiralWallPlaneSingle.getSymbol());
		travelArmSpiralWallPlaneSingle.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"), travelArmSpiralWallPlaneSingle.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"),
				travelArmSpiralWallPlaneSingleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-01"),
				travelArmSpiralWallPlaneSingleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneSingleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"),
				travelArmSpiralWallPlaneSingleMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-01-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-02-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-01-03-09"),
				travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDouble.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"), travelArmSpiralWallPlaneDouble.getSymbol());
		travelArmSpiralWallPlaneDouble.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"), travelArmSpiralWallPlaneDouble.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneDoubleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-01"),
				travelArmSpiralWallPlaneDoubleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneDoubleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneDoubleMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-01-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-02-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-02-03-09"),
				travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTriple.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"), travelArmSpiralWallPlaneTriple.getSymbol());
		travelArmSpiralWallPlaneTriple.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"), travelArmSpiralWallPlaneTriple.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"),
				travelArmSpiralWallPlaneTripleEmptyArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-01"),
				travelArmSpiralWallPlaneTripleSchemaArrowhead.getSymbol());

		travelArmSpiralWallPlaneTripleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"),
				travelArmSpiralWallPlaneTripleMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.getSymbol());

		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-01-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-02-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());
		travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-03-020-03-03-09"),
				travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanSwitchToNormalArrows() {

		assertFalse(singleStraightMovementWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(singleStraightMovementWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(singleStraightMovementWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());

		assertFalse(singleStraightMovementWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(singleStraightMovementWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(singleStraightMovementWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());

		assertFalse(singleStraightMovementWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(singleStraightMovementWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(singleStraightMovementWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());

		assertFalse(singleStraightMovementWallPlaneLargest.canSwitchToNormalArrows());
		assertFalse(singleStraightMovementWallPlaneLargestEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(singleStraightMovementWallPlaneLargestSchemaArrowhead.canSwitchToNormalArrows());

		assertFalse(singleWristFlexWallPlane.canSwitchToNormalArrows());
		assertFalse(singleWristFlexWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(singleWristFlexWallPlaneSchemaArrowhead.canSwitchToNormalArrows());

		assertFalse(doubleWristFlexWallPlane.canSwitchToNormalArrows());
		assertFalse(doubleWristFlexWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(doubleWristFlexWallPlaneSchemaArrowhead.canSwitchToNormalArrows());

		assertFalse(tripleWristFlexWallPlane.canSwitchToNormalArrows());
		assertFalse(tripleWristFlexWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(tripleWristFlexWallPlaneSchemaArrowhead.canSwitchToNormalArrows());

		assertTrue(doubleAlternatingWristFlexWallPlane.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingWristFlexWallPlaneMirrored.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertTrue(tripleAlternatingWristFlexWallPlane.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingWristFlexWallPlaneMirrored.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(doubleStraightMovementWallPlane.canSwitchToNormalArrows());
		assertFalse(doubleStraightMovementWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(doubleStraightMovementWallPlaneSchemaArrowhead.canSwitchToNormalArrows());

		assertFalse(tripleStraightMovementWallPlane.canSwitchToNormalArrows());
		assertFalse(tripleStraightMovementWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(tripleStraightMovementWallPlaneSchemaArrowhead.canSwitchToNormalArrows());

		assertTrue(doubleAlternatingMovementWallPlane.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingMovementWallPlaneMirrored.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertTrue(tripleAlternatingMovementWallPlane.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingMovementWallPlaneMirrored.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(crossMovementWallPlane.canSwitchToNormalArrows());
		assertFalse(crossMovementWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(crossMovementWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(crossMovementWallPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(crossMovementWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(crossMovementWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(bendWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(bendWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(bendWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneLargeMirrored.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(bendWallPlaneLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(cornerWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(cornerWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(cornerWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneLargeMirrored.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(cornerWallPlaneWithRotation.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneWithRotationMirrored.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(checkWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(checkWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(checkWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneLargeMirrored.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(checkWallPlaneLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(boxWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(boxWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(boxWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneLargeMirrored.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(boxWallPlaneLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(zigzagWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(zigzagWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(zigzagWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneLargeMirrored.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(zigzagWallPlaneLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(peaksWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(peaksWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(peaksWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneLargeMirrored.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(peaksWallPlaneLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(travelRotationSingleWallPlane.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleWallPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(travelRotationDoubleWallPlane.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleWallPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertTrue(travelRotationAlternatingWallPlane.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingWallPlaneMirrored.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(travelRotationSingleFloorPlane.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleFloorPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(travelRotationDoubleFloorPlane.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleFloorPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertTrue(travelRotationAlternatingFloorPlane.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingFloorPlaneMirrored.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(travelShakingWallPlane.canSwitchToNormalArrows());
		assertFalse(travelShakingWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(travelShakingWallPlaneSchemaArrowhead.canSwitchToNormalArrows());

		assertFalse(travelArmSpiralWallPlaneSingle.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneSingleMirrored.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(travelArmSpiralWallPlaneDouble.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleMirrored.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(travelArmSpiralWallPlaneTriple.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneTripleMirrored.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canSwitchToNormalArrows());

	}

	@Override
	public void testSwitchToNormalArrows() {

		doubleAlternatingMovementWallPlane.switchToNormalArrows();
		assertEquals(doubleStraightMovementWallPlane.getSymbol(), doubleAlternatingMovementWallPlane.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowhead.switchToNormalArrows();
		assertEquals(doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol(),
				doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowhead.switchToNormalArrows();
		assertEquals(doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol(),
				doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingMovementWallPlaneMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-01-05"),
				doubleAlternatingMovementWallPlaneMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-02-05"),
				doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-002-01-03-05"),
				doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		doubleAlternatingWristFlexWallPlane.switchToNormalArrows();
		assertEquals(doubleWristFlexWallPlane.getSymbol(), doubleAlternatingWristFlexWallPlane.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowhead.switchToNormalArrows();
		assertEquals(doubleWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowhead.switchToNormalArrows();
		assertEquals(doubleWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		doubleAlternatingWristFlexWallPlaneMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-01-01"),
				doubleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-02-01"),
				doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-002-02-03-01"),
				doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingMovementWallPlane.switchToNormalArrows();
		assertEquals(tripleStraightMovementWallPlane.getSymbol(), tripleAlternatingMovementWallPlane.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowhead.switchToNormalArrows();
		assertEquals(tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol(),
				tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowhead.switchToNormalArrows();
		assertEquals(tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol(),
				tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingMovementWallPlaneMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-01-01"),
				tripleAlternatingMovementWallPlaneMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-02-01"),
				tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-005-01-03-01"),
				tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		tripleAlternatingWristFlexWallPlane.switchToNormalArrows();
		assertEquals(tripleWristFlexWallPlane.getSymbol(), tripleAlternatingWristFlexWallPlane.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowhead.switchToNormalArrows();
		assertEquals(tripleWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowhead.switchToNormalArrows();
		assertEquals(tripleWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol());
		tripleAlternatingWristFlexWallPlaneMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-01-01"),
				tripleAlternatingWristFlexWallPlaneMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-02-01"),
				tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.getSymbol());
		tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.switchToNormalArrows();
		assertEquals(symbolFactory.createSymbol("02-03-005-02-03-01"),
				tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlane.switchToNormalArrows();
		assertEquals(travelRotationDoubleWallPlane.getSymbol(), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.switchToNormalArrows();
		assertEquals(travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol(),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.switchToNormalArrows();
		assertEquals(travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol(),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.switchToNormalArrows();
		assertEquals(travelRotationDoubleWallPlaneMirrored.getSymbol(),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.switchToNormalArrows();
		assertEquals(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.switchToNormalArrows();
		assertEquals(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlane.switchToNormalArrows();
		assertEquals(travelRotationDoubleFloorPlane.getSymbol(), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.switchToNormalArrows();
		assertEquals(travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.switchToNormalArrows();
		assertEquals(travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.switchToNormalArrows();
		assertEquals(travelRotationDoubleFloorPlaneMirrored.getSymbol(),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.switchToNormalArrows();
		assertEquals(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.switchToNormalArrows();
		assertEquals(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanSwitchToAlternatingArrows() {
		assertFalse(singleStraightMovementWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(singleStraightMovementWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(singleStraightMovementWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());

		assertFalse(singleStraightMovementWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(singleStraightMovementWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(singleStraightMovementWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());

		assertFalse(singleStraightMovementWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(singleStraightMovementWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(singleStraightMovementWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());

		assertFalse(singleStraightMovementWallPlaneLargest.canSwitchToAlternatingArrows());
		assertFalse(singleStraightMovementWallPlaneLargestEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(singleStraightMovementWallPlaneLargestSchemaArrowhead.canSwitchToAlternatingArrows());

		assertFalse(singleWristFlexWallPlane.canSwitchToAlternatingArrows());
		assertFalse(singleWristFlexWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(singleWristFlexWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());

		assertTrue(doubleWristFlexWallPlane.canSwitchToAlternatingArrows());
		assertTrue(doubleWristFlexWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertTrue(doubleWristFlexWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());

		assertTrue(tripleWristFlexWallPlane.canSwitchToAlternatingArrows());
		assertTrue(tripleWristFlexWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertTrue(tripleWristFlexWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());

		assertFalse(doubleAlternatingWristFlexWallPlane.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingWristFlexWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(tripleAlternatingWristFlexWallPlane.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingWristFlexWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertTrue(doubleStraightMovementWallPlane.canSwitchToAlternatingArrows());
		assertTrue(doubleStraightMovementWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertTrue(doubleStraightMovementWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());

		assertTrue(tripleStraightMovementWallPlane.canSwitchToAlternatingArrows());
		assertTrue(tripleStraightMovementWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertTrue(tripleStraightMovementWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());

		assertFalse(doubleAlternatingMovementWallPlane.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingMovementWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(tripleAlternatingMovementWallPlane.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingMovementWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(crossMovementWallPlane.canSwitchToAlternatingArrows());
		assertFalse(crossMovementWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(crossMovementWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(crossMovementWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(crossMovementWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(crossMovementWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(bendWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(bendWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(bendWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(bendWallPlaneLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(cornerWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(cornerWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(cornerWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(cornerWallPlaneWithRotation.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneWithRotationMirrored.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(checkWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(checkWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(checkWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(checkWallPlaneLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(boxWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(boxWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(boxWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(boxWallPlaneLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(zigzagWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(zigzagWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(zigzagWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(zigzagWallPlaneLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(peaksWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(peaksWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(peaksWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(peaksWallPlaneLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(travelRotationSingleWallPlane.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertTrue(travelRotationDoubleWallPlane.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(travelRotationAlternatingWallPlane.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(travelRotationSingleFloorPlane.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleFloorPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertTrue(travelRotationDoubleFloorPlane.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleFloorPlaneMirrored.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(travelRotationAlternatingFloorPlane.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingFloorPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(travelShakingWallPlane.canSwitchToAlternatingArrows());
		assertFalse(travelShakingWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelShakingWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());

		assertFalse(travelArmSpiralWallPlaneSingle.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneSingleMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(travelArmSpiralWallPlaneDouble.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(travelArmSpiralWallPlaneTriple.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneTripleMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

	}

	@Override
	public void testSwitchToAlternatingArrows() {

		doubleStraightMovementWallPlane.switchToAlternatingArrows();
		assertEquals(doubleAlternatingMovementWallPlane.getSymbol(), doubleStraightMovementWallPlane.getSymbol());
		doubleStraightMovementWallPlaneEmptyArrowhead.switchToAlternatingArrows();
		assertEquals(doubleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol(),
				doubleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		doubleStraightMovementWallPlaneSchemaArrowhead.switchToAlternatingArrows();
		assertEquals(doubleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol(),
				doubleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		doubleWristFlexWallPlane.switchToAlternatingArrows();
		assertEquals(doubleAlternatingWristFlexWallPlane.getSymbol(), doubleWristFlexWallPlane.getSymbol());
		doubleWristFlexWallPlaneEmptyArrowhead.switchToAlternatingArrows();
		assertEquals(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				doubleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		doubleWristFlexWallPlaneSchemaArrowhead.switchToAlternatingArrows();
		assertEquals(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				doubleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		tripleStraightMovementWallPlane.switchToAlternatingArrows();
		assertEquals(tripleAlternatingMovementWallPlane.getSymbol(), tripleStraightMovementWallPlane.getSymbol());
		tripleStraightMovementWallPlaneEmptyArrowhead.switchToAlternatingArrows();
		assertEquals(tripleAlternatingMovementWallPlaneEmptyArrowhead.getSymbol(),
				tripleStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		tripleStraightMovementWallPlaneSchemaArrowhead.switchToAlternatingArrows();
		assertEquals(tripleAlternatingMovementWallPlaneSchemaArrowhead.getSymbol(),
				tripleStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		tripleWristFlexWallPlane.switchToAlternatingArrows();
		assertEquals(tripleAlternatingWristFlexWallPlane.getSymbol(), tripleWristFlexWallPlane.getSymbol());
		tripleWristFlexWallPlaneEmptyArrowhead.switchToAlternatingArrows();
		assertEquals(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.getSymbol(),
				tripleWristFlexWallPlaneEmptyArrowhead.getSymbol());
		tripleWristFlexWallPlaneSchemaArrowhead.switchToAlternatingArrows();
		assertEquals(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.getSymbol(),
				tripleWristFlexWallPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleWallPlane.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingWallPlane.getSymbol(), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol(),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol(),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneMirrored.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingWallPlaneMirrored.getSymbol(),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingFloorPlane.getSymbol(), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol(),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol(),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingFloorPlaneMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.switchToAlternatingArrows();
		assertEquals(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol(),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanSwitchStartingPoint() {

		assertFalse(singleStraightMovementWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(singleStraightMovementWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(singleStraightMovementWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(singleStraightMovementWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(singleStraightMovementWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(singleStraightMovementWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(singleStraightMovementWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(singleStraightMovementWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(singleStraightMovementWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(singleStraightMovementWallPlaneLargest.canSwitchStartingPoint());
		assertFalse(singleStraightMovementWallPlaneLargestEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(singleStraightMovementWallPlaneLargestSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(singleWristFlexWallPlane.canSwitchStartingPoint());
		assertFalse(singleWristFlexWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(singleWristFlexWallPlaneSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(doubleWristFlexWallPlane.canSwitchStartingPoint());
		assertFalse(doubleWristFlexWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(doubleWristFlexWallPlaneSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(tripleWristFlexWallPlane.canSwitchStartingPoint());
		assertFalse(tripleWristFlexWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(tripleWristFlexWallPlaneSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(doubleAlternatingWristFlexWallPlane.canSwitchStartingPoint());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(doubleAlternatingWristFlexWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(tripleAlternatingWristFlexWallPlane.canSwitchStartingPoint());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(tripleAlternatingWristFlexWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(doubleStraightMovementWallPlane.canSwitchStartingPoint());
		assertFalse(doubleStraightMovementWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(doubleStraightMovementWallPlaneSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(tripleStraightMovementWallPlane.canSwitchStartingPoint());
		assertFalse(tripleStraightMovementWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(tripleStraightMovementWallPlaneSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(doubleAlternatingMovementWallPlane.canSwitchStartingPoint());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(doubleAlternatingMovementWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(tripleAlternatingMovementWallPlane.canSwitchStartingPoint());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(tripleAlternatingMovementWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(crossMovementWallPlane.canSwitchStartingPoint());
		assertFalse(crossMovementWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(crossMovementWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(crossMovementWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(crossMovementWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(crossMovementWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(bendWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(bendWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(bendWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(bendWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(bendWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(bendWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(bendWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(bendWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(bendWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(bendWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(bendWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(bendWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(bendWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(bendWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(bendWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(bendWallPlaneLargeMirrored.canSwitchStartingPoint());
		assertFalse(bendWallPlaneLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(bendWallPlaneLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(cornerWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(cornerWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(cornerWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneLargeMirrored.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(cornerWallPlaneWithRotation.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneWithRotationMirrored.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(checkWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(checkWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(checkWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(checkWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(checkWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(checkWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(checkWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(checkWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(checkWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(checkWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(checkWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(checkWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(checkWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(checkWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(checkWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(checkWallPlaneLargeMirrored.canSwitchStartingPoint());
		assertFalse(checkWallPlaneLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(checkWallPlaneLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(boxWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(boxWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(boxWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(boxWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(boxWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(boxWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(boxWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(boxWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(boxWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(boxWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(boxWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(boxWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(boxWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(boxWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(boxWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(boxWallPlaneLargeMirrored.canSwitchStartingPoint());
		assertFalse(boxWallPlaneLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(boxWallPlaneLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(zigzagWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(zigzagWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(zigzagWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneLargeMirrored.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(zigzagWallPlaneLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(peaksWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(peaksWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(peaksWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneLargeMirrored.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(peaksWallPlaneLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertTrue(travelRotationSingleWallPlane.canSwitchStartingPoint());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationSingleWallPlaneMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertTrue(travelRotationDoubleWallPlane.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleWallPlaneMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertTrue(travelRotationAlternatingWallPlane.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingWallPlaneMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertTrue(travelRotationSingleFloorPlane.canSwitchStartingPoint());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationSingleFloorPlaneMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertTrue(travelRotationDoubleFloorPlane.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleFloorPlaneMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertTrue(travelRotationAlternatingFloorPlane.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingFloorPlaneMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertTrue(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(travelShakingWallPlane.canSwitchStartingPoint());
		assertFalse(travelShakingWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(travelShakingWallPlaneSchemaArrowhead.canSwitchStartingPoint());

		assertFalse(travelArmSpiralWallPlaneSingle.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneSingleMirrored.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(travelArmSpiralWallPlaneDouble.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneDoubleMirrored.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(travelArmSpiralWallPlaneTriple.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneTripleMirrored.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canSwitchStartingPoint());

	}

	@Override
	public void testSwitchStartingPoint() {

		travelRotationSingleWallPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-04-01"), travelRotationSingleWallPlane.getSymbol());
		travelRotationSingleWallPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-01"), travelRotationSingleWallPlane.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-05-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-01"),
				travelRotationSingleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-06-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-01"),
				travelRotationSingleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleWallPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-04-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());
		travelRotationSingleWallPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-01-09"),
				travelRotationSingleWallPlaneMirrored.getSymbol());

		travelRotationSingleWallPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-05-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-02-09"),
				travelRotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleWallPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-06-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleWallPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-013-01-03-09"),
				travelRotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-04-01"), travelRotationDoubleWallPlane.getSymbol());
		travelRotationDoubleWallPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-01"), travelRotationDoubleWallPlane.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-05-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-01"),
				travelRotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-06-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-01"),
				travelRotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleWallPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-04-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());
		travelRotationDoubleWallPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-01-09"),
				travelRotationDoubleWallPlaneMirrored.getSymbol());

		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-05-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-02-09"),
				travelRotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-06-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleWallPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-014-01-03-09"),
				travelRotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-04-01"), travelRotationAlternatingWallPlane.getSymbol());
		travelRotationAlternatingWallPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-01"), travelRotationAlternatingWallPlane.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-05-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-01"),
				travelRotationAlternatingWallPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-06-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-01"),
				travelRotationAlternatingWallPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingWallPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-04-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());
		travelRotationAlternatingWallPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-01-09"),
				travelRotationAlternatingWallPlaneMirrored.getSymbol());

		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-05-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-02-09"),
				travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-06-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-015-01-03-09"),
				travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-04-01"), travelRotationSingleFloorPlane.getSymbol());
		travelRotationSingleFloorPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-01"), travelRotationSingleFloorPlane.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-05-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-01"),
				travelRotationSingleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-06-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-01"),
				travelRotationSingleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationSingleFloorPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-04-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());
		travelRotationSingleFloorPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-01-09"),
				travelRotationSingleFloorPlaneMirrored.getSymbol());

		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-05-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-02-09"),
				travelRotationSingleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-06-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationSingleFloorPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-016-01-03-09"),
				travelRotationSingleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-04-01"), travelRotationDoubleFloorPlane.getSymbol());
		travelRotationDoubleFloorPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-01"), travelRotationDoubleFloorPlane.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-05-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-01"),
				travelRotationDoubleFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-06-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-01"),
				travelRotationDoubleFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationDoubleFloorPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-04-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());
		travelRotationDoubleFloorPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-01-09"),
				travelRotationDoubleFloorPlaneMirrored.getSymbol());

		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-05-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-02-09"),
				travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-06-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-017-01-03-09"),
				travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-04-01"), travelRotationAlternatingFloorPlane.getSymbol());
		travelRotationAlternatingFloorPlane.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-01"), travelRotationAlternatingFloorPlane.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-05-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-01"),
				travelRotationAlternatingFloorPlaneEmptyArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-06-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowhead.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-01"),
				travelRotationAlternatingFloorPlaneSchemaArrowhead.getSymbol());

		travelRotationAlternatingFloorPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-04-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-01-09"),
				travelRotationAlternatingFloorPlaneMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-05-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-02-09"),
				travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.getSymbol());

		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-06-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());
		travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.switchStartingPoint();
		assertEquals(symbolFactory.createSymbol("02-03-018-01-03-09"),
				travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanSwitchPlane() {

		assertTrue(singleStraightMovementWallPlaneSmall.canSwitchPlane());
		assertTrue(singleStraightMovementWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertTrue(singleStraightMovementWallPlaneSmallSchemaArrowhead.canSwitchPlane());

		assertTrue(singleStraightMovementWallPlaneMedium.canSwitchPlane());
		assertTrue(singleStraightMovementWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertTrue(singleStraightMovementWallPlaneMediumSchemaArrowhead.canSwitchPlane());

		assertTrue(singleStraightMovementWallPlaneLarge.canSwitchPlane());
		assertTrue(singleStraightMovementWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertTrue(singleStraightMovementWallPlaneLargeSchemaArrowhead.canSwitchPlane());

		assertTrue(singleStraightMovementWallPlaneLargest.canSwitchPlane());
		assertTrue(singleStraightMovementWallPlaneLargestEmptyArrowhead.canSwitchPlane());
		assertTrue(singleStraightMovementWallPlaneLargestSchemaArrowhead.canSwitchPlane());

		assertTrue(singleWristFlexWallPlane.canSwitchPlane());
		assertTrue(singleWristFlexWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(singleWristFlexWallPlaneSchemaArrowhead.canSwitchPlane());

		assertTrue(doubleWristFlexWallPlane.canSwitchPlane());
		assertTrue(doubleWristFlexWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(doubleWristFlexWallPlaneSchemaArrowhead.canSwitchPlane());

		assertTrue(tripleWristFlexWallPlane.canSwitchPlane());
		assertTrue(tripleWristFlexWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(tripleWristFlexWallPlaneSchemaArrowhead.canSwitchPlane());

		assertTrue(doubleAlternatingWristFlexWallPlane.canSwitchPlane());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchPlane());
		assertTrue(doubleAlternatingWristFlexWallPlaneMirrored.canSwitchPlane());
		assertTrue(doubleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(doubleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertTrue(tripleAlternatingWristFlexWallPlane.canSwitchPlane());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowhead.canSwitchPlane());
		assertTrue(tripleAlternatingWristFlexWallPlaneMirrored.canSwitchPlane());
		assertTrue(tripleAlternatingWristFlexWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(tripleAlternatingWristFlexWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertTrue(doubleStraightMovementWallPlane.canSwitchPlane());
		assertTrue(doubleStraightMovementWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(doubleStraightMovementWallPlaneSchemaArrowhead.canSwitchPlane());

		assertTrue(tripleStraightMovementWallPlane.canSwitchPlane());
		assertTrue(tripleStraightMovementWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(tripleStraightMovementWallPlaneSchemaArrowhead.canSwitchPlane());

		assertTrue(doubleAlternatingMovementWallPlane.canSwitchPlane());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchPlane());
		assertTrue(doubleAlternatingMovementWallPlaneMirrored.canSwitchPlane());
		assertTrue(doubleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(doubleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertTrue(tripleAlternatingMovementWallPlane.canSwitchPlane());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowhead.canSwitchPlane());
		assertTrue(tripleAlternatingMovementWallPlaneMirrored.canSwitchPlane());
		assertTrue(tripleAlternatingMovementWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(tripleAlternatingMovementWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(crossMovementWallPlane.canSwitchPlane());
		assertFalse(crossMovementWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(crossMovementWallPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(crossMovementWallPlaneMirrored.canSwitchPlane());
		assertFalse(crossMovementWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(crossMovementWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(bendWallPlaneSmall.canSwitchPlane());
		assertFalse(bendWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(bendWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(bendWallPlaneSmallMirrored.canSwitchPlane());
		assertFalse(bendWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(bendWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(bendWallPlaneMedium.canSwitchPlane());
		assertFalse(bendWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(bendWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(bendWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(bendWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(bendWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(bendWallPlaneLarge.canSwitchPlane());
		assertFalse(bendWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(bendWallPlaneLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(bendWallPlaneLargeMirrored.canSwitchPlane());
		assertFalse(bendWallPlaneLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(bendWallPlaneLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(cornerWallPlaneSmall.canSwitchPlane());
		assertFalse(cornerWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(cornerWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(cornerWallPlaneSmallMirrored.canSwitchPlane());
		assertFalse(cornerWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(cornerWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(cornerWallPlaneMedium.canSwitchPlane());
		assertFalse(cornerWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(cornerWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(cornerWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(cornerWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(cornerWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(cornerWallPlaneLarge.canSwitchPlane());
		assertFalse(cornerWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(cornerWallPlaneLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(cornerWallPlaneLargeMirrored.canSwitchPlane());
		assertFalse(cornerWallPlaneLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(cornerWallPlaneLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(cornerWallPlaneWithRotation.canSwitchPlane());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowhead.canSwitchPlane());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowhead.canSwitchPlane());
		assertFalse(cornerWallPlaneWithRotationMirrored.canSwitchPlane());
		assertFalse(cornerWallPlaneWithRotationEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(cornerWallPlaneWithRotationSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(checkWallPlaneSmall.canSwitchPlane());
		assertFalse(checkWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(checkWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(checkWallPlaneSmallMirrored.canSwitchPlane());
		assertFalse(checkWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(checkWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(checkWallPlaneMedium.canSwitchPlane());
		assertFalse(checkWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(checkWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(checkWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(checkWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(checkWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(checkWallPlaneLarge.canSwitchPlane());
		assertFalse(checkWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(checkWallPlaneLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(checkWallPlaneLargeMirrored.canSwitchPlane());
		assertFalse(checkWallPlaneLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(checkWallPlaneLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(boxWallPlaneSmall.canSwitchPlane());
		assertFalse(boxWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(boxWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(boxWallPlaneSmallMirrored.canSwitchPlane());
		assertFalse(boxWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(boxWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(boxWallPlaneMedium.canSwitchPlane());
		assertFalse(boxWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(boxWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(boxWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(boxWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(boxWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(boxWallPlaneLarge.canSwitchPlane());
		assertFalse(boxWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(boxWallPlaneLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(boxWallPlaneLargeMirrored.canSwitchPlane());
		assertFalse(boxWallPlaneLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(boxWallPlaneLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(zigzagWallPlaneSmall.canSwitchPlane());
		assertFalse(zigzagWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(zigzagWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(zigzagWallPlaneSmallMirrored.canSwitchPlane());
		assertFalse(zigzagWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(zigzagWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(zigzagWallPlaneMedium.canSwitchPlane());
		assertFalse(zigzagWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(zigzagWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(zigzagWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(zigzagWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(zigzagWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(zigzagWallPlaneLarge.canSwitchPlane());
		assertFalse(zigzagWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(zigzagWallPlaneLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(zigzagWallPlaneLargeMirrored.canSwitchPlane());
		assertFalse(zigzagWallPlaneLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(zigzagWallPlaneLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(peaksWallPlaneSmall.canSwitchPlane());
		assertFalse(peaksWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(peaksWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(peaksWallPlaneSmallMirrored.canSwitchPlane());
		assertFalse(peaksWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(peaksWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(peaksWallPlaneMedium.canSwitchPlane());
		assertFalse(peaksWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(peaksWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(peaksWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(peaksWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(peaksWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(peaksWallPlaneLarge.canSwitchPlane());
		assertFalse(peaksWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(peaksWallPlaneLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(peaksWallPlaneLargeMirrored.canSwitchPlane());
		assertFalse(peaksWallPlaneLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(peaksWallPlaneLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelRotationSingleWallPlane.canSwitchPlane());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(travelRotationSingleWallPlaneMirrored.canSwitchPlane());
		assertFalse(travelRotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelRotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelRotationDoubleWallPlane.canSwitchPlane());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(travelRotationDoubleWallPlaneMirrored.canSwitchPlane());
		assertFalse(travelRotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelRotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelRotationAlternatingWallPlane.canSwitchPlane());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(travelRotationAlternatingWallPlaneMirrored.canSwitchPlane());
		assertFalse(travelRotationAlternatingWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelRotationAlternatingWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelRotationSingleFloorPlane.canSwitchPlane());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(travelRotationSingleFloorPlaneMirrored.canSwitchPlane());
		assertFalse(travelRotationSingleFloorPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelRotationSingleFloorPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelRotationDoubleFloorPlane.canSwitchPlane());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(travelRotationDoubleFloorPlaneMirrored.canSwitchPlane());
		assertFalse(travelRotationDoubleFloorPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelRotationDoubleFloorPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelRotationAlternatingFloorPlane.canSwitchPlane());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(travelRotationAlternatingFloorPlaneMirrored.canSwitchPlane());
		assertFalse(travelRotationAlternatingFloorPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelRotationAlternatingFloorPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelShakingWallPlane.canSwitchPlane());
		assertFalse(travelShakingWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(travelShakingWallPlaneSchemaArrowhead.canSwitchPlane());

		assertFalse(travelArmSpiralWallPlaneSingle.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowhead.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowhead.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneSingleMirrored.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneSingleEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneSingleSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelArmSpiralWallPlaneDouble.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowhead.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowhead.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneDoubleMirrored.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneDoubleEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneDoubleSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(travelArmSpiralWallPlaneTriple.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowhead.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowhead.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneTripleMirrored.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneTripleEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(travelArmSpiralWallPlaneTripleSchemaArrowheadMirrored.canSwitchPlane());

	}

	@Override
	public void testSwitchPlane() {

		singleStraightMovementWallPlaneSmall.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-01-01-01"),
				singleStraightMovementWallPlaneSmall.getSymbol());
		singleStraightMovementWallPlaneSmallEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-01-02-01"),
				singleStraightMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneSmallSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-01-03-01"),
				singleStraightMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneMedium.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-02-01-01"),
				singleStraightMovementWallPlaneMedium.getSymbol());
		singleStraightMovementWallPlaneMediumEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-02-02-01"),
				singleStraightMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneMediumSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-02-03-01"),
				singleStraightMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLarge.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-03-01-01"),
				singleStraightMovementWallPlaneLarge.getSymbol());
		singleStraightMovementWallPlaneLargeEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-03-02-01"),
				singleStraightMovementWallPlaneLargeEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargeSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-03-03-01"),
				singleStraightMovementWallPlaneLargeSchemaArrowhead.getSymbol());

		singleStraightMovementWallPlaneLargest.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-04-01-01"),
				singleStraightMovementWallPlaneLargest.getSymbol());
		singleStraightMovementWallPlaneLargestEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-04-02-01"),
				singleStraightMovementWallPlaneLargestEmptyArrowhead.getSymbol());
		singleStraightMovementWallPlaneLargestSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-04-001-04-03-01"),
				singleStraightMovementWallPlaneLargestSchemaArrowhead.getSymbol());

	}

}
