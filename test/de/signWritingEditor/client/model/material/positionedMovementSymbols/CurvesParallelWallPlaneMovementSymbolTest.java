package de.signWritingEditor.client.model.material.positionedMovementSymbols;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import de.signWritingEditor.shared.model.domainValue.Symbol;
import de.signWritingEditor.shared.model.material.MovementBaseSymbol;
import de.signWritingEditor.shared.model.material.PositionedMovementSymbol;
import de.signWritingEditor.shared.model.material.SymbolFactory;

public class CurvesParallelWallPlaneMovementSymbolTest implements PositionedMovementSymbolTestInterface {

	/**
	 * SymbolGroup 02, SymbolID 06
	 */
	private PositionedMovementSymbol curveWallPlaneQuarterSmall;
	private PositionedMovementSymbol curveWallPlaneQuarterSmallEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlaneQuarterSmallSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlaneQuarterSmallMirrored;
	private PositionedMovementSymbol curveWallPlaneQuarterSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlaneQuarterSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlaneQuarterMedium;
	private PositionedMovementSymbol curveWallPlaneQuarterMediumEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlaneQuarterMediumSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlaneQuarterMediumMirrored;
	private PositionedMovementSymbol curveWallPlaneQuarterMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlaneQuarterMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlaneQuarterLarge;
	private PositionedMovementSymbol curveWallPlaneQuarterLargeEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlaneQuarterLargeSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlaneQuarterLargeMirrored;
	private PositionedMovementSymbol curveWallPlaneQuarterLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlaneQuarterLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlaneQuarterLargest;
	private PositionedMovementSymbol curveWallPlaneQuarterLargestEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlaneQuarterLargestSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlaneQuarterLargestMirrored;
	private PositionedMovementSymbol curveWallPlaneQuarterLargestEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlaneQuarterLargestSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlaneHalfCircleSmall;
	private PositionedMovementSymbol curveWallPlaneHalfCircleSmallEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlaneHalfCircleSmallSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlaneHalfCircleSmallMirrored;
	private PositionedMovementSymbol curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlaneHalfCircleMedium;
	private PositionedMovementSymbol curveWallPlaneHalfCircleMediumEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlaneHalfCircleMediumSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlaneHalfCircleMediumMirrored;
	private PositionedMovementSymbol curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlaneHalfCircleLarge;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargeEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargeSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargeMirrored;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlaneHalfCircleLargest;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargestEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargestSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargestMirrored;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlane3QuarterCircleSmall;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleSmallEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleSmallSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleSmallMirrored;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveWallPlane3QuarterCircleMedium;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleMediumEmptyArrowhead;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleMediumSchemaArrowhead;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleMediumMirrored;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol humpWallPlaneSmall;
	private PositionedMovementSymbol humpWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol humpWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol humpWallPlaneSmallMirrored;
	private PositionedMovementSymbol humpWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol humpWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol humpWallPlaneMedium;
	private PositionedMovementSymbol humpWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol humpWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol humpWallPlaneMediumMirrored;
	private PositionedMovementSymbol humpWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol humpWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol humpWallPlaneLarge;
	private PositionedMovementSymbol humpWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol humpWallPlaneLargeSchemaArrowhead;
	private PositionedMovementSymbol humpWallPlaneLargeMirrored;
	private PositionedMovementSymbol humpWallPlaneLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol humpWallPlaneLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol loopWallPlaneSmall;
	private PositionedMovementSymbol loopWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol loopWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol loopWallPlaneSmallMirrored;
	private PositionedMovementSymbol loopWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol loopWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol loopWallPlaneMedium;
	private PositionedMovementSymbol loopWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol loopWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol loopWallPlaneMediumMirrored;
	private PositionedMovementSymbol loopWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol loopWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol loopWallPlaneLarge;
	private PositionedMovementSymbol loopWallPlaneLargeEmptyArrowhead;
	private PositionedMovementSymbol loopWallPlaneLargeSchemaArrowhead;
	private PositionedMovementSymbol loopWallPlaneLargeMirrored;
	private PositionedMovementSymbol loopWallPlaneLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol loopWallPlaneLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol loopWallPlaneSmallDouble;
	private PositionedMovementSymbol loopWallPlaneSmallDoubleEmptyArrowhead;
	private PositionedMovementSymbol loopWallPlaneSmallDoubleSchemaArrowhead;
	private PositionedMovementSymbol loopWallPlaneSmallDoubleMirrored;
	private PositionedMovementSymbol loopWallPlaneSmallDoubleEmptyArrowheadMirrored;
	private PositionedMovementSymbol loopWallPlaneSmallDoubleSchemaArrowheadMirrored;

	private PositionedMovementSymbol waveWallPlane2CurvesSmall;
	private PositionedMovementSymbol waveWallPlane2CurvesSmallEmptyArrowhead;
	private PositionedMovementSymbol waveWallPlane2CurvesSmallSchemaArrowhead;
	private PositionedMovementSymbol waveWallPlane2CurvesSmallMirrored;
	private PositionedMovementSymbol waveWallPlane2CurvesSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol waveWallPlane2CurvesSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol waveWallPlane2CurvesMedium;
	private PositionedMovementSymbol waveWallPlane2CurvesMediumEmptyArrowhead;
	private PositionedMovementSymbol waveWallPlane2CurvesMediumSchemaArrowhead;
	private PositionedMovementSymbol waveWallPlane2CurvesMediumMirrored;
	private PositionedMovementSymbol waveWallPlane2CurvesMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol waveWallPlane2CurvesMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol waveWallPlane2CurvesLarge;
	private PositionedMovementSymbol waveWallPlane2CurvesLargeEmptyArrowhead;
	private PositionedMovementSymbol waveWallPlane2CurvesLargeSchemaArrowhead;
	private PositionedMovementSymbol waveWallPlane2CurvesLargeMirrored;
	private PositionedMovementSymbol waveWallPlane2CurvesLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol waveWallPlane2CurvesLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol waveWallPlane3CurvesSmall;
	private PositionedMovementSymbol waveWallPlane3CurvesSmallEmptyArrowhead;
	private PositionedMovementSymbol waveWallPlane3CurvesSmallSchemaArrowhead;
	private PositionedMovementSymbol waveWallPlane3CurvesSmallMirrored;
	private PositionedMovementSymbol waveWallPlane3CurvesSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol waveWallPlane3CurvesSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol waveWallPlane3CurvesMedium;
	private PositionedMovementSymbol waveWallPlane3CurvesMediumEmptyArrowhead;
	private PositionedMovementSymbol waveWallPlane3CurvesMediumSchemaArrowhead;
	private PositionedMovementSymbol waveWallPlane3CurvesMediumMirrored;
	private PositionedMovementSymbol waveWallPlane3CurvesMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol waveWallPlane3CurvesMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol waveWallPlane3CurvesLarge;
	private PositionedMovementSymbol waveWallPlane3CurvesLargeEmptyArrowhead;
	private PositionedMovementSymbol waveWallPlane3CurvesLargeSchemaArrowhead;
	private PositionedMovementSymbol waveWallPlane3CurvesLargeMirrored;
	private PositionedMovementSymbol waveWallPlane3CurvesLargeEmptyArrowheadMirrored;
	private PositionedMovementSymbol waveWallPlane3CurvesLargeSchemaArrowheadMirrored;

	private PositionedMovementSymbol curveThenStraightMovementWallPlane;
	private PositionedMovementSymbol curveThenStraightMovementWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol curveThenStraightMovementWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol curveThenStraightMovementWallPlaneMirrored;
	private PositionedMovementSymbol curveThenStraightMovementWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol curveThenStraightMovementWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol curvedCrossMovementWallPlaneSmall;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneSmallEmptyArrowhead;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneSmallSchemaArrowhead;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneSmallMirrored;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored;

	private PositionedMovementSymbol curvedCrossMovementWallPlaneMedium;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneMediumEmptyArrowhead;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneMediumSchemaArrowhead;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneMediumMirrored;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored;
	private PositionedMovementSymbol curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored;

	private PositionedMovementSymbol rotationSingleWallPlane;
	private PositionedMovementSymbol rotationSingleWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol rotationSingleWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol rotationSingleWallPlaneMirrored;
	private PositionedMovementSymbol rotationSingleWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol rotationSingleWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol rotationDoubleWallPlane;
	private PositionedMovementSymbol rotationDoubleWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol rotationDoubleWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol rotationDoubleWallPlaneMirrored;
	private PositionedMovementSymbol rotationDoubleWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol rotationDoubleWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol rotationAlternateWallPlane;
	private PositionedMovementSymbol rotationAlternateWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol rotationAlternateWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol rotationAlternateWallPlaneMirrored;
	private PositionedMovementSymbol rotationAlternateWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol rotationAlternateWallPlaneSchemaArrowheadMirrored;

	private PositionedMovementSymbol shakingWallPlane;
	private PositionedMovementSymbol shakingWallPlaneEmptyArrowhead;
	private PositionedMovementSymbol shakingWallPlaneSchemaArrowhead;
	private PositionedMovementSymbol shakingWallPlaneMirrored;
	private PositionedMovementSymbol shakingWallPlaneEmptyArrowheadMirrored;
	private PositionedMovementSymbol shakingWallPlaneSchemaArrowheadMirrored;

	private SymbolFactory symbolFactory;

	@Override
	public void setUp(SymbolFactory symbolFactory) {

		this.symbolFactory = symbolFactory;

		curveWallPlaneQuarterSmall = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_QUARTER_SMALL.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_QUARTER_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlaneQuarterSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-001-01-02-01");
		curveWallPlaneQuarterSmallEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlaneQuarterSmallEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneQuarterSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-001-01-03-01");
		curveWallPlaneQuarterSmallSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlaneQuarterSmallSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneQuarterSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterSmallMirroredSymbol = symbolFactory.createSymbol("02-06-001-01-01-09");
		curveWallPlaneQuarterSmallMirrored = new PositionedMovementSymbol(curveWallPlaneQuarterSmallMirroredSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(curveWallPlaneQuarterSmallMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterSmallEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-001-01-02-09");
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneQuarterSmallEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneQuarterSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterSmallSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-001-01-03-09");
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneQuarterSmallSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneQuarterSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlaneQuarterMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_QUARTER_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_QUARTER_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlaneQuarterMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-001-02-02-01");
		curveWallPlaneQuarterMediumEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlaneQuarterMediumEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneQuarterMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-001-02-03-01");
		curveWallPlaneQuarterMediumSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlaneQuarterMediumSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneQuarterMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterMediumMirroredSymbol = symbolFactory.createSymbol("02-06-001-02-01-09");
		curveWallPlaneQuarterMediumMirrored = new PositionedMovementSymbol(curveWallPlaneQuarterMediumMirroredSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(curveWallPlaneQuarterMediumMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterMediumEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-001-02-02-09");
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneQuarterMediumEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneQuarterMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterMediumSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-001-02-03-09");
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneQuarterMediumSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneQuarterMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlaneQuarterLarge = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_QUARTER_LARGE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_QUARTER_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-001-03-02-01");
		curveWallPlaneQuarterLargeEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlaneQuarterLargeEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneQuarterLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-001-03-03-01");
		curveWallPlaneQuarterLargeSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlaneQuarterLargeSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneQuarterLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargeMirroredSymbol = symbolFactory.createSymbol("02-06-001-03-01-09");
		curveWallPlaneQuarterLargeMirrored = new PositionedMovementSymbol(curveWallPlaneQuarterLargeMirroredSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(curveWallPlaneQuarterLargeMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargeEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-001-03-02-09");
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneQuarterLargeEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneQuarterLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargeSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-001-03-03-09");
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneQuarterLargeSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneQuarterLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlaneQuarterLargest = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_QUARTER_LARGEST.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_QUARTER_LARGEST.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargestEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-001-04-02-01");
		curveWallPlaneQuarterLargestEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlaneQuarterLargestEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneQuarterLargestEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargestSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-001-04-03-01");
		curveWallPlaneQuarterLargestSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlaneQuarterLargestSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneQuarterLargestSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargestMirroredSymbol = symbolFactory.createSymbol("02-06-001-04-01-09");
		curveWallPlaneQuarterLargestMirrored = new PositionedMovementSymbol(curveWallPlaneQuarterLargestMirroredSymbol,
				0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(curveWallPlaneQuarterLargestMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargestEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-001-04-02-09");
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneQuarterLargestEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneQuarterLargestEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneQuarterLargestSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-001-04-03-09");
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneQuarterLargestSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneQuarterLargestSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlaneHalfCircleSmall = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_HALF_CIRCLE_SMALL.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_HALF_CIRCLE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-002-01-02-01");
		curveWallPlaneHalfCircleSmallEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleSmallEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneHalfCircleSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-002-01-03-01");
		curveWallPlaneHalfCircleSmallSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleSmallSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleSmallMirroredSymbol = symbolFactory.createSymbol("02-06-002-01-01-09");
		curveWallPlaneHalfCircleSmallMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(curveWallPlaneHalfCircleSmallMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleSmallEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-002-01-02-09");
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleSmallSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-002-01-03-09");
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlaneHalfCircleMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_HALF_CIRCLE_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_HALF_CIRCLE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-002-02-02-01");
		curveWallPlaneHalfCircleMediumEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleMediumEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-002-02-03-01");
		curveWallPlaneHalfCircleMediumSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleMediumSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleMediumMirroredSymbol = symbolFactory.createSymbol("02-06-002-02-01-09");
		curveWallPlaneHalfCircleMediumMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(curveWallPlaneHalfCircleMediumMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleMediumEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-002-02-02-09");
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleMediumSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-002-02-03-09");
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlaneHalfCircleLarge = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_HALF_CIRCLE_LARGE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_HALF_CIRCLE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-002-03-02-01");
		curveWallPlaneHalfCircleLargeEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargeEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneHalfCircleLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-002-03-03-01");
		curveWallPlaneHalfCircleLargeSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargeSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargeMirroredSymbol = symbolFactory.createSymbol("02-06-002-03-01-09");
		curveWallPlaneHalfCircleLargeMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(curveWallPlaneHalfCircleLargeMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargeEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-002-03-02-09");
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargeSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-002-03-03-09");
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlaneHalfCircleLargest = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_HALF_CIRCLE_LARGEST.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_HALF_CIRCLE_LARGEST.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargestEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-002-04-02-01");
		curveWallPlaneHalfCircleLargestEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargestEmptyArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleLargestEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargestSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-002-04-03-01");
		curveWallPlaneHalfCircleLargestSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargestSchemaArrowheadSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleLargestSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargestMirroredSymbol = symbolFactory.createSymbol("02-06-002-04-01-09");
		curveWallPlaneHalfCircleLargestMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargestMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlaneHalfCircleLargestMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargestEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-002-04-02-09");
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleLargestEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlaneHalfCircleLargestSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-002-04-03-09");
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlaneHalfCircleLargestSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlane3QuarterCircleSmall = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_3_QUARTER_CIRCLE_SMALL.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_3_QUARTER_CIRCLE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-003-01-02-01");
		curveWallPlane3QuarterCircleSmallEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleSmallEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlane3QuarterCircleSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleSmallSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-06-003-01-03-01");
		curveWallPlane3QuarterCircleSmallSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleSmallSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlane3QuarterCircleSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleSmallMirroredSymbol = symbolFactory.createSymbol("02-06-003-01-01-09");
		curveWallPlane3QuarterCircleSmallMirrored = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleSmallMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlane3QuarterCircleSmallMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleSmallEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-003-01-02-09");
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlane3QuarterCircleSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleSmallSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-003-01-03-09");
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlane3QuarterCircleSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveWallPlane3QuarterCircleMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_WALL_PLANE_3_QUARTER_CIRCLE_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_WALL_PLANE_3_QUARTER_CIRCLE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleMediumEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-06-003-02-02-01");
		curveWallPlane3QuarterCircleMediumEmptyArrowhead = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleMediumEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlane3QuarterCircleMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleMediumSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-06-003-02-03-01");
		curveWallPlane3QuarterCircleMediumSchemaArrowhead = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleMediumSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlane3QuarterCircleMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleMediumMirroredSymbol = symbolFactory.createSymbol("02-06-003-02-01-09");
		curveWallPlane3QuarterCircleMediumMirrored = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleMediumMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveWallPlane3QuarterCircleMediumMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleMediumEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-003-02-02-09");
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlane3QuarterCircleMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveWallPlane3QuarterCircleMediumSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-003-02-03-09");
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveWallPlane3QuarterCircleMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		humpWallPlaneSmall = new PositionedMovementSymbol(MovementBaseSymbol.HUMP_WALL_PLANE_SMALL.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.HUMP_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol humpWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-004-01-02-01");
		humpWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(humpWallPlaneSmallEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol humpWallPlaneSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-004-01-03-01");
		humpWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(humpWallPlaneSmallSchemaArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol humpWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-06-004-01-01-09");
		humpWallPlaneSmallMirrored = new PositionedMovementSymbol(humpWallPlaneSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol humpWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-004-01-02-09");
		humpWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				humpWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(humpWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol humpWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-004-01-03-09");
		humpWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				humpWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(humpWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		humpWallPlaneMedium = new PositionedMovementSymbol(MovementBaseSymbol.HUMP_WALL_PLANE_MEDIUM.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.HUMP_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol humpWallPlaneMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-004-02-02-01");
		humpWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(humpWallPlaneMediumEmptyArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol humpWallPlaneMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-004-02-03-01");
		humpWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(humpWallPlaneMediumSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol humpWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-06-004-02-01-09");
		humpWallPlaneMediumMirrored = new PositionedMovementSymbol(humpWallPlaneMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol humpWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-004-02-02-09");
		humpWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				humpWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(humpWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol humpWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-004-02-03-09");
		humpWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				humpWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(humpWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		humpWallPlaneLarge = new PositionedMovementSymbol(MovementBaseSymbol.HUMP_WALL_PLANE_LARGE.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.HUMP_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol humpWallPlaneLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-004-03-02-01");
		humpWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(humpWallPlaneLargeEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol humpWallPlaneLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-004-03-03-01");
		humpWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(humpWallPlaneLargeSchemaArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol humpWallPlaneLargeMirroredSymbol = symbolFactory.createSymbol("02-06-004-03-01-09");
		humpWallPlaneLargeMirrored = new PositionedMovementSymbol(humpWallPlaneLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(humpWallPlaneLargeMirroredSymbol.getBaseSymbol()));
		Symbol humpWallPlaneLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-004-03-02-09");
		humpWallPlaneLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				humpWallPlaneLargeEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(humpWallPlaneLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol humpWallPlaneLargeSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-004-03-03-09");
		humpWallPlaneLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				humpWallPlaneLargeSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(humpWallPlaneLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		loopWallPlaneSmall = new PositionedMovementSymbol(MovementBaseSymbol.LOOP_WALL_PLANE_SMALL.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.LOOP_WALL_PLANE_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol loopWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-005-01-02-01");
		loopWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(loopWallPlaneSmallEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol loopWallPlaneSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-005-01-03-01");
		loopWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(loopWallPlaneSmallSchemaArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol loopWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-06-005-01-01-09");
		loopWallPlaneSmallMirrored = new PositionedMovementSymbol(loopWallPlaneSmallMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol loopWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-005-01-02-09");
		loopWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				loopWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(loopWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol loopWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-005-01-03-09");
		loopWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				loopWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(loopWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		loopWallPlaneMedium = new PositionedMovementSymbol(MovementBaseSymbol.LOOP_WALL_PLANE_MEDIUM.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.LOOP_WALL_PLANE_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol loopWallPlaneMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-005-02-02-01");
		loopWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(loopWallPlaneMediumEmptyArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol loopWallPlaneMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-005-02-03-01");
		loopWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(loopWallPlaneMediumSchemaArrowheadSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol loopWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-06-005-02-01-09");
		loopWallPlaneMediumMirrored = new PositionedMovementSymbol(loopWallPlaneMediumMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol loopWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-005-02-02-09");
		loopWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				loopWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(loopWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol loopWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-005-02-03-09");
		loopWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				loopWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(loopWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		loopWallPlaneLarge = new PositionedMovementSymbol(MovementBaseSymbol.LOOP_WALL_PLANE_LARGE.getIswaSymbol(), 0,
				0, 2, symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.LOOP_WALL_PLANE_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol loopWallPlaneLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-005-03-02-01");
		loopWallPlaneLargeEmptyArrowhead = new PositionedMovementSymbol(loopWallPlaneLargeEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol loopWallPlaneLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-005-03-03-01");
		loopWallPlaneLargeSchemaArrowhead = new PositionedMovementSymbol(loopWallPlaneLargeSchemaArrowheadSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol loopWallPlaneLargeMirroredSymbol = symbolFactory.createSymbol("02-06-005-03-01-09");
		loopWallPlaneLargeMirrored = new PositionedMovementSymbol(loopWallPlaneLargeMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneLargeMirroredSymbol.getBaseSymbol()));
		Symbol loopWallPlaneLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-005-03-02-09");
		loopWallPlaneLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				loopWallPlaneLargeEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(loopWallPlaneLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol loopWallPlaneLargeSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-005-03-03-09");
		loopWallPlaneLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				loopWallPlaneLargeSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(loopWallPlaneLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		loopWallPlaneSmallDouble = new PositionedMovementSymbol(
				MovementBaseSymbol.LOOP_WALL_PLANE_SMALL_DOUBLE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.LOOP_WALL_PLANE_SMALL_DOUBLE.getIswaSymbol().getBaseSymbol()));
		Symbol loopWallPlaneSmallDoubleEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-005-04-02-01");
		loopWallPlaneSmallDoubleEmptyArrowhead = new PositionedMovementSymbol(
				loopWallPlaneSmallDoubleEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneSmallDoubleEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol loopWallPlaneSmallDoubleSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-005-04-03-01");
		loopWallPlaneSmallDoubleSchemaArrowhead = new PositionedMovementSymbol(
				loopWallPlaneSmallDoubleSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(loopWallPlaneSmallDoubleSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol loopWallPlaneSmallDoubleMirroredSymbol = symbolFactory.createSymbol("02-06-005-04-01-09");
		loopWallPlaneSmallDoubleMirrored = new PositionedMovementSymbol(loopWallPlaneSmallDoubleMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(loopWallPlaneSmallDoubleMirroredSymbol.getBaseSymbol()));
		Symbol loopWallPlaneSmallDoubleEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-005-04-02-09");
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored = new PositionedMovementSymbol(
				loopWallPlaneSmallDoubleEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						loopWallPlaneSmallDoubleEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol loopWallPlaneSmallDoubleSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-005-04-03-09");
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored = new PositionedMovementSymbol(
				loopWallPlaneSmallDoubleSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						loopWallPlaneSmallDoubleSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		waveWallPlane2CurvesSmall = new PositionedMovementSymbol(
				MovementBaseSymbol.WAVE_WALL_PLANE_2_CURVES_SMALL.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.WAVE_WALL_PLANE_2_CURVES_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol waveWallPlane2CurvesSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-006-01-02-01");
		waveWallPlane2CurvesSmallEmptyArrowhead = new PositionedMovementSymbol(
				waveWallPlane2CurvesSmallEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane2CurvesSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-006-01-03-01");
		waveWallPlane2CurvesSmallSchemaArrowhead = new PositionedMovementSymbol(
				waveWallPlane2CurvesSmallSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane2CurvesSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesSmallMirroredSymbol = symbolFactory.createSymbol("02-06-006-01-01-09");
		waveWallPlane2CurvesSmallMirrored = new PositionedMovementSymbol(waveWallPlane2CurvesSmallMirroredSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(waveWallPlane2CurvesSmallMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-006-01-02-09");
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane2CurvesSmallEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane2CurvesSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesSmallSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-006-01-03-09");
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane2CurvesSmallSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane2CurvesSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		waveWallPlane2CurvesMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.WAVE_WALL_PLANE_2_CURVES_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.WAVE_WALL_PLANE_2_CURVES_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol waveWallPlane2CurvesMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-006-02-02-01");
		waveWallPlane2CurvesMediumEmptyArrowhead = new PositionedMovementSymbol(
				waveWallPlane2CurvesMediumEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane2CurvesMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-006-02-03-01");
		waveWallPlane2CurvesMediumSchemaArrowhead = new PositionedMovementSymbol(
				waveWallPlane2CurvesMediumSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane2CurvesMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesMediumMirroredSymbol = symbolFactory.createSymbol("02-06-006-02-01-09");
		waveWallPlane2CurvesMediumMirrored = new PositionedMovementSymbol(waveWallPlane2CurvesMediumMirroredSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(waveWallPlane2CurvesMediumMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesMediumEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-006-02-02-09");
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane2CurvesMediumEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane2CurvesMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesMediumSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-006-02-03-09");
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane2CurvesMediumSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane2CurvesMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		waveWallPlane2CurvesLarge = new PositionedMovementSymbol(
				MovementBaseSymbol.WAVE_WALL_PLANE_2_CURVES_LARGE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.WAVE_WALL_PLANE_2_CURVES_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol waveWallPlane2CurvesLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-006-03-02-01");
		waveWallPlane2CurvesLargeEmptyArrowhead = new PositionedMovementSymbol(
				waveWallPlane2CurvesLargeEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane2CurvesLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-006-03-03-01");
		waveWallPlane2CurvesLargeSchemaArrowhead = new PositionedMovementSymbol(
				waveWallPlane2CurvesLargeSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane2CurvesLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesLargeMirroredSymbol = symbolFactory.createSymbol("02-06-006-03-01-09");
		waveWallPlane2CurvesLargeMirrored = new PositionedMovementSymbol(waveWallPlane2CurvesLargeMirroredSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(waveWallPlane2CurvesLargeMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-006-03-02-09");
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane2CurvesLargeEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane2CurvesLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane2CurvesLargeSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-006-03-03-09");
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane2CurvesLargeSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane2CurvesLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		waveWallPlane3CurvesSmall = new PositionedMovementSymbol(
				MovementBaseSymbol.WAVE_WALL_PLANE_3_CURVES_SMALL.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.WAVE_WALL_PLANE_3_CURVES_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol waveWallPlane3CurvesSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-006-04-02-01");
		waveWallPlane3CurvesSmallEmptyArrowhead = new PositionedMovementSymbol(
				waveWallPlane3CurvesSmallEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane3CurvesSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesSmallSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-006-04-03-01");
		waveWallPlane3CurvesSmallSchemaArrowhead = new PositionedMovementSymbol(
				waveWallPlane3CurvesSmallSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane3CurvesSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesSmallMirroredSymbol = symbolFactory.createSymbol("02-06-006-04-01-09");
		waveWallPlane3CurvesSmallMirrored = new PositionedMovementSymbol(waveWallPlane3CurvesSmallMirroredSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(waveWallPlane3CurvesSmallMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesSmallEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-006-04-02-09");
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane3CurvesSmallEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane3CurvesSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesSmallSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-006-04-03-09");
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane3CurvesSmallSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane3CurvesSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		waveWallPlane3CurvesMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.WAVE_WALL_PLANE_3_CURVES_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.WAVE_WALL_PLANE_3_CURVES_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol waveWallPlane3CurvesMediumEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-006-05-02-01");
		waveWallPlane3CurvesMediumEmptyArrowhead = new PositionedMovementSymbol(
				waveWallPlane3CurvesMediumEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane3CurvesMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesMediumSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-006-05-03-01");
		waveWallPlane3CurvesMediumSchemaArrowhead = new PositionedMovementSymbol(
				waveWallPlane3CurvesMediumSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane3CurvesMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesMediumMirroredSymbol = symbolFactory.createSymbol("02-06-006-05-01-09");
		waveWallPlane3CurvesMediumMirrored = new PositionedMovementSymbol(waveWallPlane3CurvesMediumMirroredSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(waveWallPlane3CurvesMediumMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesMediumEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-006-05-02-09");
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane3CurvesMediumEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane3CurvesMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesMediumSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-006-05-03-09");
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane3CurvesMediumSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane3CurvesMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		waveWallPlane3CurvesLarge = new PositionedMovementSymbol(
				MovementBaseSymbol.WAVE_WALL_PLANE_3_CURVES_LARGE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.WAVE_WALL_PLANE_3_CURVES_LARGE.getIswaSymbol().getBaseSymbol()));
		Symbol waveWallPlane3CurvesLargeEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-006-06-02-01");
		waveWallPlane3CurvesLargeEmptyArrowhead = new PositionedMovementSymbol(
				waveWallPlane3CurvesLargeEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane3CurvesLargeEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesLargeSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-006-06-03-01");
		waveWallPlane3CurvesLargeSchemaArrowhead = new PositionedMovementSymbol(
				waveWallPlane3CurvesLargeSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(waveWallPlane3CurvesLargeSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesLargeMirroredSymbol = symbolFactory.createSymbol("02-06-006-06-01-09");
		waveWallPlane3CurvesLargeMirrored = new PositionedMovementSymbol(waveWallPlane3CurvesLargeMirroredSymbol, 0, 0,
				2, symbolFactory.getAllRotationsAndFillsFor(waveWallPlane3CurvesLargeMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesLargeEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-006-06-02-09");
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane3CurvesLargeEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane3CurvesLargeEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol waveWallPlane3CurvesLargeSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-006-06-03-09");
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored = new PositionedMovementSymbol(
				waveWallPlane3CurvesLargeSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						waveWallPlane3CurvesLargeSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curveThenStraightMovementWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVE_THEN_STRAIGHT_MOVEMENT_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVE_THEN_STRAIGHT_MOVEMENT_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol curveThenStraightMovementWallPlaneEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-06-007-01-02-01");
		curveThenStraightMovementWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				curveThenStraightMovementWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveThenStraightMovementWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curveThenStraightMovementWallPlaneSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-06-007-01-03-01");
		curveThenStraightMovementWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				curveThenStraightMovementWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveThenStraightMovementWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curveThenStraightMovementWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-06-007-01-01-09");
		curveThenStraightMovementWallPlaneMirrored = new PositionedMovementSymbol(
				curveThenStraightMovementWallPlaneMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curveThenStraightMovementWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol curveThenStraightMovementWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-007-01-02-09");
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curveThenStraightMovementWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveThenStraightMovementWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curveThenStraightMovementWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-007-01-03-09");
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curveThenStraightMovementWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curveThenStraightMovementWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curvedCrossMovementWallPlaneSmall = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVED_CROSS_MOVEMENT_WALL_SMALL.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVED_CROSS_MOVEMENT_WALL_SMALL.getIswaSymbol().getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneSmallEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-007-02-02-01");
		curvedCrossMovementWallPlaneSmallEmptyArrowhead = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneSmallEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curvedCrossMovementWallPlaneSmallEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneSmallSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-06-007-02-03-01");
		curvedCrossMovementWallPlaneSmallSchemaArrowhead = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneSmallSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curvedCrossMovementWallPlaneSmallSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneSmallMirroredSymbol = symbolFactory.createSymbol("02-06-007-02-01-09");
		curvedCrossMovementWallPlaneSmallMirrored = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneSmallMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curvedCrossMovementWallPlaneSmallMirroredSymbol.getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneSmallEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-007-02-02-09");
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curvedCrossMovementWallPlaneSmallEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneSmallSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-007-02-03-09");
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curvedCrossMovementWallPlaneSmallSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		curvedCrossMovementWallPlaneMedium = new PositionedMovementSymbol(
				MovementBaseSymbol.CURVED_CROSS_MOVEMENT_WALL_MEDIUM.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.CURVED_CROSS_MOVEMENT_WALL_MEDIUM.getIswaSymbol().getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneMediumEmptyArrowheadSymbol = symbolFactory
				.createSymbol("02-06-007-03-02-01");
		curvedCrossMovementWallPlaneMediumEmptyArrowhead = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneMediumEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curvedCrossMovementWallPlaneMediumEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneMediumSchemaArrowheadSymbol = symbolFactory
				.createSymbol("02-06-007-03-03-01");
		curvedCrossMovementWallPlaneMediumSchemaArrowhead = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneMediumSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curvedCrossMovementWallPlaneMediumSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneMediumMirroredSymbol = symbolFactory.createSymbol("02-06-007-03-01-09");
		curvedCrossMovementWallPlaneMediumMirrored = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneMediumMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(curvedCrossMovementWallPlaneMediumMirroredSymbol.getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneMediumEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-007-03-02-09");
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curvedCrossMovementWallPlaneMediumEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol curvedCrossMovementWallPlaneMediumSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-007-03-03-09");
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored = new PositionedMovementSymbol(
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						curvedCrossMovementWallPlaneMediumSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		rotationSingleWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.ROTATION_SINGLE_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.ROTATION_SINGLE_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol rotationSingleWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-008-01-02-01");
		rotationSingleWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				rotationSingleWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(rotationSingleWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol rotationSingleWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-008-01-03-01");
		rotationSingleWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				rotationSingleWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(rotationSingleWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol rotationSingleWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-06-008-01-01-09");
		rotationSingleWallPlaneMirrored = new PositionedMovementSymbol(rotationSingleWallPlaneMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(rotationSingleWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol rotationSingleWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-008-01-02-09");
		rotationSingleWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				rotationSingleWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						rotationSingleWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol rotationSingleWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-008-01-03-09");
		rotationSingleWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				rotationSingleWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						rotationSingleWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		rotationDoubleWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.ROTATION_DOUBLE_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.ROTATION_DOUBLE_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol rotationDoubleWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-009-01-02-01");
		rotationDoubleWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				rotationDoubleWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(rotationDoubleWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol rotationDoubleWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-009-01-03-01");
		rotationDoubleWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				rotationDoubleWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(rotationDoubleWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol rotationDoubleWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-06-009-01-01-09");
		rotationDoubleWallPlaneMirrored = new PositionedMovementSymbol(rotationDoubleWallPlaneMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(rotationDoubleWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol rotationDoubleWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-009-01-02-09");
		rotationDoubleWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				rotationDoubleWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						rotationDoubleWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol rotationDoubleWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-009-01-03-09");
		rotationDoubleWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				rotationDoubleWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory.getAllRotationsAndFillsFor(
						rotationDoubleWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		rotationAlternateWallPlane = new PositionedMovementSymbol(
				MovementBaseSymbol.ROTATION_ALTERNATE_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.ROTATION_ALTERNATE_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol rotationAlternateWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-010-01-02-01");
		rotationAlternateWallPlaneEmptyArrowhead = new PositionedMovementSymbol(
				rotationAlternateWallPlaneEmptyArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(rotationAlternateWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol rotationAlternateWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-010-01-03-01");
		rotationAlternateWallPlaneSchemaArrowhead = new PositionedMovementSymbol(
				rotationAlternateWallPlaneSchemaArrowheadSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(rotationAlternateWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol rotationAlternateWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-06-010-01-01-09");
		rotationAlternateWallPlaneMirrored = new PositionedMovementSymbol(rotationAlternateWallPlaneMirroredSymbol, 0,
				0, 2,
				symbolFactory.getAllRotationsAndFillsFor(rotationAlternateWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol rotationAlternateWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-010-01-02-09");
		rotationAlternateWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				rotationAlternateWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						rotationAlternateWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol rotationAlternateWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory
				.createSymbol("02-06-010-01-03-09");
		rotationAlternateWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				rotationAlternateWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						rotationAlternateWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

		shakingWallPlane = new PositionedMovementSymbol(MovementBaseSymbol.SHAKING_WALL_PLANE.getIswaSymbol(), 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(
						MovementBaseSymbol.SHAKING_WALL_PLANE.getIswaSymbol().getBaseSymbol()));
		Symbol shakingWallPlaneEmptyArrowheadSymbol = symbolFactory.createSymbol("02-06-011-01-02-01");
		shakingWallPlaneEmptyArrowhead = new PositionedMovementSymbol(shakingWallPlaneEmptyArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(shakingWallPlaneEmptyArrowheadSymbol.getBaseSymbol()));
		Symbol shakingWallPlaneSchemaArrowheadSymbol = symbolFactory.createSymbol("02-06-011-01-03-01");
		shakingWallPlaneSchemaArrowhead = new PositionedMovementSymbol(shakingWallPlaneSchemaArrowheadSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(shakingWallPlaneSchemaArrowheadSymbol.getBaseSymbol()));
		Symbol shakingWallPlaneMirroredSymbol = symbolFactory.createSymbol("02-06-011-01-01-09");
		shakingWallPlaneMirrored = new PositionedMovementSymbol(shakingWallPlaneMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(shakingWallPlaneMirroredSymbol.getBaseSymbol()));
		Symbol shakingWallPlaneEmptyArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-011-01-02-09");
		shakingWallPlaneEmptyArrowheadMirrored = new PositionedMovementSymbol(
				shakingWallPlaneEmptyArrowheadMirroredSymbol, 0, 0, 2,
				symbolFactory.getAllRotationsAndFillsFor(shakingWallPlaneEmptyArrowheadMirroredSymbol.getBaseSymbol()));
		Symbol shakingWallPlaneSchemaArrowheadMirroredSymbol = symbolFactory.createSymbol("02-06-011-01-03-09");
		shakingWallPlaneSchemaArrowheadMirrored = new PositionedMovementSymbol(
				shakingWallPlaneSchemaArrowheadMirroredSymbol, 0, 0, 2, symbolFactory
						.getAllRotationsAndFillsFor(shakingWallPlaneSchemaArrowheadMirroredSymbol.getBaseSymbol()));

	}

	@Override
	public void testCanIncrease() {

		assertFalse(curveWallPlaneQuarterSmall.canIncrease());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlaneQuarterSmallMirrored.canIncrease());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlaneQuarterMedium.canIncrease());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlaneQuarterMediumMirrored.canIncrease());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlaneQuarterLarge.canIncrease());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlaneQuarterLargeMirrored.canIncrease());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlaneQuarterLargest.canIncrease());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlaneQuarterLargestMirrored.canIncrease());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlaneHalfCircleSmall.canIncrease());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlaneHalfCircleSmallMirrored.canIncrease());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlaneHalfCircleMedium.canIncrease());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlaneHalfCircleMediumMirrored.canIncrease());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlaneHalfCircleLarge.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargeMirrored.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlaneHalfCircleLargest.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargestMirrored.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlane3QuarterCircleSmall.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleSmallMirrored.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveWallPlane3QuarterCircleMedium.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleMediumMirrored.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(humpWallPlaneSmall.canIncrease());
		assertFalse(humpWallPlaneSmallEmptyArrowhead.canIncrease());
		assertFalse(humpWallPlaneSmallSchemaArrowhead.canIncrease());
		assertFalse(humpWallPlaneSmallMirrored.canIncrease());
		assertFalse(humpWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(humpWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(humpWallPlaneMedium.canIncrease());
		assertFalse(humpWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(humpWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(humpWallPlaneMediumMirrored.canIncrease());
		assertFalse(humpWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(humpWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(humpWallPlaneLarge.canIncrease());
		assertFalse(humpWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(humpWallPlaneLargeSchemaArrowhead.canIncrease());
		assertFalse(humpWallPlaneLargeMirrored.canIncrease());
		assertFalse(humpWallPlaneLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(humpWallPlaneLargeSchemaArrowheadMirrored.canIncrease());

		assertTrue(loopWallPlaneSmall.canIncrease());
		assertTrue(loopWallPlaneSmallEmptyArrowhead.canIncrease());
		assertTrue(loopWallPlaneSmallSchemaArrowhead.canIncrease());
		assertTrue(loopWallPlaneSmallMirrored.canIncrease());
		assertTrue(loopWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertTrue(loopWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(loopWallPlaneMedium.canIncrease());
		assertFalse(loopWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(loopWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(loopWallPlaneMediumMirrored.canIncrease());
		assertFalse(loopWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(loopWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(loopWallPlaneLarge.canIncrease());
		assertFalse(loopWallPlaneLargeEmptyArrowhead.canIncrease());
		assertFalse(loopWallPlaneLargeSchemaArrowhead.canIncrease());
		assertFalse(loopWallPlaneLargeMirrored.canIncrease());
		assertFalse(loopWallPlaneLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(loopWallPlaneLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(loopWallPlaneSmallDouble.canIncrease());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowhead.canIncrease());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowhead.canIncrease());
		assertFalse(loopWallPlaneSmallDoubleMirrored.canIncrease());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canIncrease());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canIncrease());

		assertFalse(waveWallPlane2CurvesSmall.canIncrease());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowhead.canIncrease());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowhead.canIncrease());
		assertFalse(waveWallPlane2CurvesSmallMirrored.canIncrease());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(waveWallPlane2CurvesMedium.canIncrease());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowhead.canIncrease());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowhead.canIncrease());
		assertFalse(waveWallPlane2CurvesMediumMirrored.canIncrease());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(waveWallPlane2CurvesLarge.canIncrease());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowhead.canIncrease());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowhead.canIncrease());
		assertFalse(waveWallPlane2CurvesLargeMirrored.canIncrease());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(waveWallPlane3CurvesSmall.canIncrease());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowhead.canIncrease());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowhead.canIncrease());
		assertFalse(waveWallPlane3CurvesSmallMirrored.canIncrease());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(waveWallPlane3CurvesMedium.canIncrease());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowhead.canIncrease());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowhead.canIncrease());
		assertFalse(waveWallPlane3CurvesMediumMirrored.canIncrease());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canIncrease());

		assertFalse(waveWallPlane3CurvesLarge.canIncrease());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowhead.canIncrease());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowhead.canIncrease());
		assertFalse(waveWallPlane3CurvesLargeMirrored.canIncrease());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canIncrease());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canIncrease());

		assertFalse(curveThenStraightMovementWallPlane.canIncrease());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(curveThenStraightMovementWallPlaneMirrored.canIncrease());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(curvedCrossMovementWallPlaneSmall.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneSmallMirrored.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canIncrease());

		assertFalse(curvedCrossMovementWallPlaneMedium.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneMediumMirrored.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canIncrease());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canIncrease());

		assertTrue(rotationSingleWallPlane.canIncrease());
		assertTrue(rotationSingleWallPlaneEmptyArrowhead.canIncrease());
		assertTrue(rotationSingleWallPlaneSchemaArrowhead.canIncrease());
		assertTrue(rotationSingleWallPlaneMirrored.canIncrease());
		assertTrue(rotationSingleWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertTrue(rotationSingleWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(rotationDoubleWallPlane.canIncrease());
		assertFalse(rotationDoubleWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(rotationDoubleWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(rotationDoubleWallPlaneMirrored.canIncrease());
		assertFalse(rotationDoubleWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(rotationDoubleWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(rotationAlternateWallPlane.canIncrease());
		assertFalse(rotationAlternateWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(rotationAlternateWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(rotationAlternateWallPlaneMirrored.canIncrease());
		assertFalse(rotationAlternateWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(rotationAlternateWallPlaneSchemaArrowheadMirrored.canIncrease());

		assertFalse(shakingWallPlane.canIncrease());
		assertFalse(shakingWallPlaneEmptyArrowhead.canIncrease());
		assertFalse(shakingWallPlaneSchemaArrowhead.canIncrease());
		assertFalse(shakingWallPlaneMirrored.canIncrease());
		assertFalse(shakingWallPlaneEmptyArrowheadMirrored.canIncrease());
		assertFalse(shakingWallPlaneSchemaArrowheadMirrored.canIncrease());

	}

	@Override
	public void testIncrease() {

		loopWallPlaneSmall.increase();
		assertEquals(loopWallPlaneSmallDouble.getSymbol(), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.increase();
		assertEquals(loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol(), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.increase();
		assertEquals(loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol(),
				loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallMirrored.increase();
		assertEquals(loopWallPlaneSmallDoubleMirrored.getSymbol(), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.increase();
		assertEquals(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol(),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.increase();
		assertEquals(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol(),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		rotationSingleWallPlane.increase();
		assertEquals(rotationDoubleWallPlane.getSymbol(), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.increase();
		assertEquals(rotationDoubleWallPlaneEmptyArrowhead.getSymbol(),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.increase();
		assertEquals(rotationDoubleWallPlaneSchemaArrowhead.getSymbol(),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneMirrored.increase();
		assertEquals(rotationDoubleWallPlaneMirrored.getSymbol(), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.increase();
		assertEquals(rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.increase();
		assertEquals(rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
	}

	@Override
	public void testCanDecrease() {

		assertFalse(curveWallPlaneQuarterSmall.canDecrease());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlaneQuarterSmallMirrored.canDecrease());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlaneQuarterMedium.canDecrease());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlaneQuarterMediumMirrored.canDecrease());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlaneQuarterLarge.canDecrease());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlaneQuarterLargeMirrored.canDecrease());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlaneQuarterLargest.canDecrease());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlaneQuarterLargestMirrored.canDecrease());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlaneHalfCircleSmall.canDecrease());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlaneHalfCircleSmallMirrored.canDecrease());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlaneHalfCircleMedium.canDecrease());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlaneHalfCircleMediumMirrored.canDecrease());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlaneHalfCircleLarge.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargeMirrored.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlaneHalfCircleLargest.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargestMirrored.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlane3QuarterCircleSmall.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleSmallMirrored.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveWallPlane3QuarterCircleMedium.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleMediumMirrored.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(humpWallPlaneSmall.canDecrease());
		assertFalse(humpWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(humpWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(humpWallPlaneSmallMirrored.canDecrease());
		assertFalse(humpWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(humpWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(humpWallPlaneMedium.canDecrease());
		assertFalse(humpWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(humpWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(humpWallPlaneMediumMirrored.canDecrease());
		assertFalse(humpWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(humpWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(humpWallPlaneLarge.canDecrease());
		assertFalse(humpWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(humpWallPlaneLargeSchemaArrowhead.canDecrease());
		assertFalse(humpWallPlaneLargeMirrored.canDecrease());
		assertFalse(humpWallPlaneLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(humpWallPlaneLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(loopWallPlaneSmall.canDecrease());
		assertFalse(loopWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(loopWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(loopWallPlaneSmallMirrored.canDecrease());
		assertFalse(loopWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(loopWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(loopWallPlaneMedium.canDecrease());
		assertFalse(loopWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(loopWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(loopWallPlaneMediumMirrored.canDecrease());
		assertFalse(loopWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(loopWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(loopWallPlaneLarge.canDecrease());
		assertFalse(loopWallPlaneLargeEmptyArrowhead.canDecrease());
		assertFalse(loopWallPlaneLargeSchemaArrowhead.canDecrease());
		assertFalse(loopWallPlaneLargeMirrored.canDecrease());
		assertFalse(loopWallPlaneLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(loopWallPlaneLargeSchemaArrowheadMirrored.canDecrease());

		assertTrue(loopWallPlaneSmallDouble.canDecrease());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowhead.canDecrease());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowhead.canDecrease());
		assertTrue(loopWallPlaneSmallDoubleMirrored.canDecrease());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canDecrease());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canDecrease());

		assertFalse(waveWallPlane2CurvesSmall.canDecrease());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowhead.canDecrease());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowhead.canDecrease());
		assertFalse(waveWallPlane2CurvesSmallMirrored.canDecrease());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(waveWallPlane2CurvesMedium.canDecrease());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowhead.canDecrease());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowhead.canDecrease());
		assertFalse(waveWallPlane2CurvesMediumMirrored.canDecrease());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(waveWallPlane2CurvesLarge.canDecrease());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowhead.canDecrease());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowhead.canDecrease());
		assertFalse(waveWallPlane2CurvesLargeMirrored.canDecrease());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(waveWallPlane3CurvesSmall.canDecrease());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowhead.canDecrease());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowhead.canDecrease());
		assertFalse(waveWallPlane3CurvesSmallMirrored.canDecrease());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(waveWallPlane3CurvesMedium.canDecrease());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowhead.canDecrease());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowhead.canDecrease());
		assertFalse(waveWallPlane3CurvesMediumMirrored.canDecrease());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(waveWallPlane3CurvesLarge.canDecrease());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowhead.canDecrease());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowhead.canDecrease());
		assertFalse(waveWallPlane3CurvesLargeMirrored.canDecrease());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canDecrease());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canDecrease());

		assertFalse(curveThenStraightMovementWallPlane.canDecrease());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(curveThenStraightMovementWallPlaneMirrored.canDecrease());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(curvedCrossMovementWallPlaneSmall.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneSmallMirrored.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canDecrease());

		assertFalse(curvedCrossMovementWallPlaneMedium.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneMediumMirrored.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canDecrease());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canDecrease());

		assertFalse(rotationSingleWallPlane.canDecrease());
		assertFalse(rotationSingleWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(rotationSingleWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(rotationSingleWallPlaneMirrored.canDecrease());
		assertFalse(rotationSingleWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(rotationSingleWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertTrue(rotationDoubleWallPlane.canDecrease());
		assertTrue(rotationDoubleWallPlaneEmptyArrowhead.canDecrease());
		assertTrue(rotationDoubleWallPlaneSchemaArrowhead.canDecrease());
		assertTrue(rotationDoubleWallPlaneMirrored.canDecrease());
		assertTrue(rotationDoubleWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertTrue(rotationDoubleWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(rotationAlternateWallPlane.canDecrease());
		assertFalse(rotationAlternateWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(rotationAlternateWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(rotationAlternateWallPlaneMirrored.canDecrease());
		assertFalse(rotationAlternateWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(rotationAlternateWallPlaneSchemaArrowheadMirrored.canDecrease());

		assertFalse(shakingWallPlane.canDecrease());
		assertFalse(shakingWallPlaneEmptyArrowhead.canDecrease());
		assertFalse(shakingWallPlaneSchemaArrowhead.canDecrease());
		assertFalse(shakingWallPlaneMirrored.canDecrease());
		assertFalse(shakingWallPlaneEmptyArrowheadMirrored.canDecrease());
		assertFalse(shakingWallPlaneSchemaArrowheadMirrored.canDecrease());

	}

	@Override
	public void testDecrease() {
		loopWallPlaneSmallDouble.decrease();
		assertEquals(loopWallPlaneSmall.getSymbol(), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.decrease();
		assertEquals(loopWallPlaneSmallEmptyArrowhead.getSymbol(), loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.decrease();
		assertEquals(loopWallPlaneSmallSchemaArrowhead.getSymbol(),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleMirrored.decrease();
		assertEquals(loopWallPlaneSmallMirrored.getSymbol(), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.decrease();
		assertEquals(loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.decrease();
		assertEquals(loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());

		rotationDoubleWallPlane.decrease();
		assertEquals(rotationSingleWallPlane.getSymbol(), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.decrease();
		assertEquals(rotationSingleWallPlaneEmptyArrowhead.getSymbol(),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.decrease();
		assertEquals(rotationSingleWallPlaneSchemaArrowhead.getSymbol(),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneMirrored.decrease();
		assertEquals(rotationSingleWallPlaneMirrored.getSymbol(), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.decrease();
		assertEquals(rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.decrease();
		assertEquals(rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
	}

	@Override
	public void testCanRotate() {

		assertTrue(curveWallPlaneQuarterSmall.canRotate());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowhead.canRotate());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowhead.canRotate());
		assertTrue(curveWallPlaneQuarterSmallMirrored.canRotate());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlaneQuarterMedium.canRotate());
		assertTrue(curveWallPlaneQuarterMediumEmptyArrowhead.canRotate());
		assertTrue(curveWallPlaneQuarterMediumSchemaArrowhead.canRotate());
		assertTrue(curveWallPlaneQuarterMediumMirrored.canRotate());
		assertTrue(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlaneQuarterLarge.canRotate());
		assertTrue(curveWallPlaneQuarterLargeEmptyArrowhead.canRotate());
		assertTrue(curveWallPlaneQuarterLargeSchemaArrowhead.canRotate());
		assertTrue(curveWallPlaneQuarterLargeMirrored.canRotate());
		assertTrue(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlaneQuarterLargest.canRotate());
		assertTrue(curveWallPlaneQuarterLargestEmptyArrowhead.canRotate());
		assertTrue(curveWallPlaneQuarterLargestSchemaArrowhead.canRotate());
		assertTrue(curveWallPlaneQuarterLargestMirrored.canRotate());
		assertTrue(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlaneHalfCircleSmall.canRotate());
		assertTrue(curveWallPlaneHalfCircleSmallEmptyArrowhead.canRotate());
		assertTrue(curveWallPlaneHalfCircleSmallSchemaArrowhead.canRotate());
		assertTrue(curveWallPlaneHalfCircleSmallMirrored.canRotate());
		assertTrue(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlaneHalfCircleMedium.canRotate());
		assertTrue(curveWallPlaneHalfCircleMediumEmptyArrowhead.canRotate());
		assertTrue(curveWallPlaneHalfCircleMediumSchemaArrowhead.canRotate());
		assertTrue(curveWallPlaneHalfCircleMediumMirrored.canRotate());
		assertTrue(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlaneHalfCircleLarge.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargeEmptyArrowhead.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargeSchemaArrowhead.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargeMirrored.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlaneHalfCircleLargest.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargestEmptyArrowhead.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargestSchemaArrowhead.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargestMirrored.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlane3QuarterCircleSmall.canRotate());
		assertTrue(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canRotate());
		assertTrue(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canRotate());
		assertTrue(curveWallPlane3QuarterCircleSmallMirrored.canRotate());
		assertTrue(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(curveWallPlane3QuarterCircleMedium.canRotate());
		assertTrue(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canRotate());
		assertTrue(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canRotate());
		assertTrue(curveWallPlane3QuarterCircleMediumMirrored.canRotate());
		assertTrue(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(humpWallPlaneSmall.canRotate());
		assertTrue(humpWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(humpWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(humpWallPlaneSmallMirrored.canRotate());
		assertTrue(humpWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(humpWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(humpWallPlaneMedium.canRotate());
		assertTrue(humpWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(humpWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(humpWallPlaneMediumMirrored.canRotate());
		assertTrue(humpWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(humpWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(humpWallPlaneLarge.canRotate());
		assertTrue(humpWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(humpWallPlaneLargeSchemaArrowhead.canRotate());
		assertTrue(humpWallPlaneLargeMirrored.canRotate());
		assertTrue(humpWallPlaneLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(humpWallPlaneLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(loopWallPlaneSmall.canRotate());
		assertTrue(loopWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(loopWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(loopWallPlaneSmallMirrored.canRotate());
		assertTrue(loopWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(loopWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(loopWallPlaneMedium.canRotate());
		assertTrue(loopWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(loopWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(loopWallPlaneMediumMirrored.canRotate());
		assertTrue(loopWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(loopWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(loopWallPlaneLarge.canRotate());
		assertTrue(loopWallPlaneLargeEmptyArrowhead.canRotate());
		assertTrue(loopWallPlaneLargeSchemaArrowhead.canRotate());
		assertTrue(loopWallPlaneLargeMirrored.canRotate());
		assertTrue(loopWallPlaneLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(loopWallPlaneLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(loopWallPlaneSmallDouble.canRotate());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowhead.canRotate());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowhead.canRotate());
		assertTrue(loopWallPlaneSmallDoubleMirrored.canRotate());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canRotate());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canRotate());

		assertTrue(waveWallPlane2CurvesSmall.canRotate());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowhead.canRotate());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowhead.canRotate());
		assertTrue(waveWallPlane2CurvesSmallMirrored.canRotate());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(waveWallPlane2CurvesMedium.canRotate());
		assertTrue(waveWallPlane2CurvesMediumEmptyArrowhead.canRotate());
		assertTrue(waveWallPlane2CurvesMediumSchemaArrowhead.canRotate());
		assertTrue(waveWallPlane2CurvesMediumMirrored.canRotate());
		assertTrue(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(waveWallPlane2CurvesLarge.canRotate());
		assertTrue(waveWallPlane2CurvesLargeEmptyArrowhead.canRotate());
		assertTrue(waveWallPlane2CurvesLargeSchemaArrowhead.canRotate());
		assertTrue(waveWallPlane2CurvesLargeMirrored.canRotate());
		assertTrue(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(waveWallPlane3CurvesSmall.canRotate());
		assertTrue(waveWallPlane3CurvesSmallEmptyArrowhead.canRotate());
		assertTrue(waveWallPlane3CurvesSmallSchemaArrowhead.canRotate());
		assertTrue(waveWallPlane3CurvesSmallMirrored.canRotate());
		assertTrue(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(waveWallPlane3CurvesMedium.canRotate());
		assertTrue(waveWallPlane3CurvesMediumEmptyArrowhead.canRotate());
		assertTrue(waveWallPlane3CurvesMediumSchemaArrowhead.canRotate());
		assertTrue(waveWallPlane3CurvesMediumMirrored.canRotate());
		assertTrue(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(waveWallPlane3CurvesLarge.canRotate());
		assertTrue(waveWallPlane3CurvesLargeEmptyArrowhead.canRotate());
		assertTrue(waveWallPlane3CurvesLargeSchemaArrowhead.canRotate());
		assertTrue(waveWallPlane3CurvesLargeMirrored.canRotate());
		assertTrue(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canRotate());
		assertTrue(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canRotate());

		assertTrue(curveThenStraightMovementWallPlane.canRotate());
		assertTrue(curveThenStraightMovementWallPlaneEmptyArrowhead.canRotate());
		assertTrue(curveThenStraightMovementWallPlaneSchemaArrowhead.canRotate());
		assertTrue(curveThenStraightMovementWallPlaneMirrored.canRotate());
		assertTrue(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(curvedCrossMovementWallPlaneSmall.canRotate());
		assertTrue(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canRotate());
		assertTrue(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canRotate());
		assertTrue(curvedCrossMovementWallPlaneSmallMirrored.canRotate());
		assertTrue(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canRotate());
		assertTrue(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canRotate());

		assertTrue(curvedCrossMovementWallPlaneMedium.canRotate());
		assertTrue(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canRotate());
		assertTrue(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canRotate());
		assertTrue(curvedCrossMovementWallPlaneMediumMirrored.canRotate());
		assertTrue(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canRotate());
		assertTrue(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canRotate());

		assertTrue(rotationSingleWallPlane.canRotate());
		assertTrue(rotationSingleWallPlaneEmptyArrowhead.canRotate());
		assertTrue(rotationSingleWallPlaneSchemaArrowhead.canRotate());
		assertTrue(rotationSingleWallPlaneMirrored.canRotate());
		assertTrue(rotationSingleWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(rotationSingleWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(rotationDoubleWallPlane.canRotate());
		assertTrue(rotationDoubleWallPlaneEmptyArrowhead.canRotate());
		assertTrue(rotationDoubleWallPlaneSchemaArrowhead.canRotate());
		assertTrue(rotationDoubleWallPlaneMirrored.canRotate());
		assertTrue(rotationDoubleWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(rotationDoubleWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(rotationAlternateWallPlane.canRotate());
		assertTrue(rotationAlternateWallPlaneEmptyArrowhead.canRotate());
		assertTrue(rotationAlternateWallPlaneSchemaArrowhead.canRotate());
		assertTrue(rotationAlternateWallPlaneMirrored.canRotate());
		assertTrue(rotationAlternateWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(rotationAlternateWallPlaneSchemaArrowheadMirrored.canRotate());

		assertTrue(shakingWallPlane.canRotate());
		assertTrue(shakingWallPlaneEmptyArrowhead.canRotate());
		assertTrue(shakingWallPlaneSchemaArrowhead.canRotate());
		assertTrue(shakingWallPlaneMirrored.canRotate());
		assertTrue(shakingWallPlaneEmptyArrowheadMirrored.canRotate());
		assertTrue(shakingWallPlaneSchemaArrowheadMirrored.canRotate());

	}

	@Override
	public void testRotateClockwise() {

		curveWallPlaneQuarterSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-08"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-07"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-06"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-05"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-04"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-03"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-02"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-01"), curveWallPlaneQuarterSmall.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-08"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-07"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-06"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-05"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-04"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-03"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-02"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-01"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-08"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-07"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-06"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-05"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-04"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-03"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-02"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-01"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-10"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-11"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-12"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-13"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-14"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-15"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-16"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-09"), curveWallPlaneQuarterSmallMirrored.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-10"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-11"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-12"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-13"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-14"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-15"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-16"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-09"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-10"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-11"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-12"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-13"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-14"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-15"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-16"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-09"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-08"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-07"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-06"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-05"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-04"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-03"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-02"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-01"), curveWallPlaneQuarterMedium.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-08"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-07"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-06"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-05"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-04"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-03"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-02"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-01"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-08"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-07"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-06"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-05"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-04"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-03"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-02"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-01"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-10"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-11"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-12"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-13"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-14"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-15"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-16"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-09"), curveWallPlaneQuarterMediumMirrored.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-10"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-11"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-12"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-13"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-14"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-15"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-16"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-09"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-10"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-11"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-12"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-13"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-14"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-15"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-16"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-09"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-08"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-07"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-06"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-05"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-04"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-03"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-02"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-01"), curveWallPlaneQuarterLarge.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-08"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-07"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-06"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-05"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-04"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-03"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-02"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-01"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-08"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-07"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-06"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-05"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-04"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-03"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-02"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-01"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-10"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-11"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-12"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-13"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-14"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-15"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-16"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-09"), curveWallPlaneQuarterLargeMirrored.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-10"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-11"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-12"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-13"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-14"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-15"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-16"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-09"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-10"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-11"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-12"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-13"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-14"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-15"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-16"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-09"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-08"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-07"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-06"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-05"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-04"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-03"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-02"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-01"), curveWallPlaneQuarterLargest.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-08"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-07"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-06"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-05"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-04"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-03"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-02"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-01"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-08"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-07"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-06"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-05"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-04"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-03"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-02"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-01"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-10"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-11"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-12"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-13"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-14"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-15"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-16"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-09"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-10"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-11"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-12"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-13"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-14"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-15"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-16"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-09"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-10"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-11"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-12"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-13"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-14"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-15"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-16"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-09"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-08"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-07"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-06"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-05"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-04"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-03"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-02"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-01"), curveWallPlaneHalfCircleSmall.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-08"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-07"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-06"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-05"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-04"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-03"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-02"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-01"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-08"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-07"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-06"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-05"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-04"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-03"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-02"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-01"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-10"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-11"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-12"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-13"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-14"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-15"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-16"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-09"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-10"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-11"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-12"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-13"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-14"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-15"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-16"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-09"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-10"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-11"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-12"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-13"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-14"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-15"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-16"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-09"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-08"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-07"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-06"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-05"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-04"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-03"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-02"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-01"), curveWallPlaneHalfCircleMedium.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-08"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-07"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-06"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-05"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-04"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-03"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-02"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-01"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-08"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-07"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-06"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-05"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-04"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-03"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-02"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-01"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-10"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-11"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-12"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-13"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-14"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-15"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-16"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-09"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-10"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-11"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-12"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-13"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-14"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-15"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-16"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-09"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-10"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-11"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-12"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-13"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-14"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-15"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-16"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-09"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-08"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-07"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-06"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-05"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-04"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-03"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-02"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-01"), curveWallPlaneHalfCircleLarge.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-08"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-07"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-06"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-05"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-04"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-03"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-02"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-01"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-08"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-07"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-06"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-05"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-04"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-03"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-02"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-01"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-10"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-11"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-12"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-13"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-14"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-15"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-16"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-09"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-10"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-11"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-12"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-13"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-14"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-15"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-16"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-09"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-10"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-11"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-12"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-13"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-14"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-15"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-16"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-09"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-08"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-07"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-06"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-05"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-04"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-03"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-02"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-01"), curveWallPlaneHalfCircleLargest.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-08"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-07"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-06"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-05"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-04"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-03"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-02"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-01"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-08"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-07"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-06"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-05"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-04"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-03"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-02"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-01"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-10"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-11"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-12"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-13"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-14"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-15"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-16"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-09"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-10"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-11"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-12"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-13"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-14"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-15"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-16"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-09"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-10"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-11"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-12"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-13"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-14"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-15"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-16"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-09"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-08"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-07"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-06"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-05"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-04"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-03"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-02"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-01"), curveWallPlane3QuarterCircleSmall.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-08"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-07"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-06"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-05"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-04"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-03"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-02"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-01"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-08"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-07"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-06"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-05"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-04"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-03"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-02"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-01"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-10"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-11"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-12"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-13"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-14"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-15"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-16"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-09"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-10"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-11"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-12"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-13"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-14"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-15"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-16"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-09"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-10"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-11"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-12"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-13"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-14"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-15"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-16"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-09"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-08"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-07"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-06"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-05"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-04"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-03"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-02"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-01"), curveWallPlane3QuarterCircleMedium.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-08"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-07"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-06"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-05"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-04"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-03"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-02"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-01"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-08"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-07"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-06"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-05"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-04"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-03"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-02"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-01"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-10"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-11"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-12"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-13"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-14"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-15"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-16"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-09"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-10"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-11"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-12"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-13"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-14"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-15"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-16"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-09"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-10"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-11"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-12"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-13"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-14"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-15"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-16"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-09"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-08"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-07"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-06"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-05"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-04"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-03"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-02"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-01"), humpWallPlaneSmall.getSymbol());

		humpWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-08"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-07"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-06"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-05"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-04"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-03"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-02"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-01"), humpWallPlaneSmallEmptyArrowhead.getSymbol());

		humpWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-08"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-07"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-06"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-05"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-04"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-03"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-02"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-01"), humpWallPlaneSmallSchemaArrowhead.getSymbol());

		humpWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-10"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-11"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-12"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-13"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-14"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-15"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-16"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-09"), humpWallPlaneSmallMirrored.getSymbol());

		humpWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-10"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-11"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-12"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-13"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-14"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-15"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-16"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-09"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-10"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-11"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-12"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-13"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-14"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-15"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-16"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-09"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-08"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-07"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-06"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-05"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-04"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-03"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-02"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-01"), humpWallPlaneMedium.getSymbol());

		humpWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-08"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-07"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-06"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-05"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-04"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-03"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-02"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-01"), humpWallPlaneMediumEmptyArrowhead.getSymbol());

		humpWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-08"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-07"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-06"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-05"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-04"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-03"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-02"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-01"), humpWallPlaneMediumSchemaArrowhead.getSymbol());

		humpWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-10"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-11"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-12"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-13"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-14"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-15"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-16"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-09"), humpWallPlaneMediumMirrored.getSymbol());

		humpWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-10"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-11"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-12"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-13"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-14"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-15"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-16"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-09"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-10"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-11"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-12"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-13"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-14"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-15"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-16"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-09"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-08"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-07"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-06"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-05"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-04"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-03"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-02"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-01"), humpWallPlaneLarge.getSymbol());

		humpWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-08"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-07"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-06"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-05"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-04"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-03"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-02"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-01"), humpWallPlaneLargeEmptyArrowhead.getSymbol());

		humpWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-08"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-07"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-06"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-05"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-04"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-03"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-02"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-01"), humpWallPlaneLargeSchemaArrowhead.getSymbol());

		humpWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-10"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-11"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-12"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-13"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-14"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-15"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-16"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-09"), humpWallPlaneLargeMirrored.getSymbol());

		humpWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-10"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-11"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-12"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-13"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-14"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-15"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-16"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-09"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-10"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-11"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-12"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-13"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-14"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-15"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-16"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-09"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-08"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-07"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-06"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-05"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-04"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-03"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-02"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-01"), loopWallPlaneSmall.getSymbol());

		loopWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-08"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-07"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-06"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-05"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-04"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-03"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-02"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-01"), loopWallPlaneSmallEmptyArrowhead.getSymbol());

		loopWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-08"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-07"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-06"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-05"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-04"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-03"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-02"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-01"), loopWallPlaneSmallSchemaArrowhead.getSymbol());

		loopWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-10"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-11"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-12"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-13"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-14"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-15"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-16"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-09"), loopWallPlaneSmallMirrored.getSymbol());

		loopWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-10"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-11"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-12"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-13"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-14"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-15"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-16"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-09"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-10"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-11"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-12"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-13"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-14"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-15"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-16"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-09"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-08"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-07"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-06"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-05"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-04"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-03"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-02"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-01"), loopWallPlaneMedium.getSymbol());

		loopWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-08"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-07"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-06"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-05"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-04"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-03"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-02"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-01"), loopWallPlaneMediumEmptyArrowhead.getSymbol());

		loopWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-08"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-07"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-06"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-05"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-04"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-03"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-02"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-01"), loopWallPlaneMediumSchemaArrowhead.getSymbol());

		loopWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-10"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-11"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-12"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-13"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-14"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-15"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-16"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-09"), loopWallPlaneMediumMirrored.getSymbol());

		loopWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-10"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-11"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-12"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-13"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-14"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-15"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-16"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-09"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-10"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-11"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-12"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-13"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-14"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-15"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-16"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-09"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-08"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-07"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-06"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-05"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-04"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-03"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-02"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-01"), loopWallPlaneLarge.getSymbol());

		loopWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-08"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-07"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-06"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-05"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-04"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-03"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-02"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-01"), loopWallPlaneLargeEmptyArrowhead.getSymbol());

		loopWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-08"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-07"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-06"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-05"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-04"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-03"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-02"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-01"), loopWallPlaneLargeSchemaArrowhead.getSymbol());

		loopWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-10"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-11"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-12"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-13"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-14"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-15"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-16"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-09"), loopWallPlaneLargeMirrored.getSymbol());

		loopWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-10"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-11"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-12"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-13"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-14"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-15"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-16"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-09"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-10"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-11"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-12"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-13"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-14"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-15"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-16"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-09"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-08"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-07"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-06"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-05"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-04"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-03"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-02"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-01"), loopWallPlaneSmallDouble.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-08"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-07"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-06"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-05"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-04"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-03"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-02"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-01"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-08"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-07"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-06"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-05"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-04"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-03"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-02"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-01"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());

		loopWallPlaneSmallDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-10"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-11"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-12"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-13"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-14"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-15"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-16"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-09"), loopWallPlaneSmallDoubleMirrored.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-10"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-11"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-12"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-13"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-14"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-15"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-16"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-09"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-10"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-11"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-12"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-13"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-14"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-15"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-16"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-09"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-08"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-07"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-06"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-05"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-04"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-03"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-02"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-01"), waveWallPlane2CurvesSmall.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-08"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-07"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-06"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-05"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-04"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-03"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-02"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-01"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-08"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-07"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-06"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-05"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-04"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-03"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-02"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-01"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-10"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-11"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-12"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-13"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-14"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-15"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-16"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-09"), waveWallPlane2CurvesSmallMirrored.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-10"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-11"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-12"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-13"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-14"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-15"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-16"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-09"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-10"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-11"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-12"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-13"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-14"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-15"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-16"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-09"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-08"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-07"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-06"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-05"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-04"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-03"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-02"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-01"), waveWallPlane2CurvesMedium.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-08"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-07"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-06"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-05"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-04"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-03"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-02"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-01"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-08"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-07"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-06"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-05"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-04"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-03"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-02"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-01"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-10"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-11"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-12"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-13"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-14"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-15"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-16"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-09"), waveWallPlane2CurvesMediumMirrored.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-10"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-11"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-12"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-13"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-14"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-15"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-16"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-09"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-10"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-11"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-12"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-13"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-14"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-15"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-16"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-09"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-08"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-07"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-06"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-05"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-04"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-03"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-02"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-01"), waveWallPlane2CurvesLarge.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-08"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-07"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-06"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-05"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-04"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-03"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-02"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-01"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-08"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-07"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-06"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-05"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-04"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-03"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-02"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-01"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-10"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-11"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-12"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-13"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-14"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-15"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-16"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-09"), waveWallPlane2CurvesLargeMirrored.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-10"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-11"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-12"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-13"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-14"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-15"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-16"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-09"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-10"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-11"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-12"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-13"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-14"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-15"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-16"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-09"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-08"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-07"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-06"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-05"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-04"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-03"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-02"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-01"), waveWallPlane3CurvesSmall.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-08"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-07"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-06"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-05"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-04"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-03"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-02"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-01"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-08"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-07"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-06"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-05"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-04"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-03"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-02"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-01"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-10"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-11"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-12"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-13"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-14"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-15"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-16"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-09"), waveWallPlane3CurvesSmallMirrored.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-10"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-11"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-12"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-13"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-14"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-15"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-16"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-09"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-10"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-11"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-12"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-13"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-14"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-15"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-16"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-09"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-08"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-07"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-06"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-05"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-04"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-03"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-02"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-01"), waveWallPlane3CurvesMedium.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-08"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-07"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-06"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-05"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-04"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-03"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-02"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-01"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-08"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-07"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-06"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-05"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-04"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-03"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-02"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-01"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-10"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-11"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-12"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-13"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-14"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-15"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-16"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-09"), waveWallPlane3CurvesMediumMirrored.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-10"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-11"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-12"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-13"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-14"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-15"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-16"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-09"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-10"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-11"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-12"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-13"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-14"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-15"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-16"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-09"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-08"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-07"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-06"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-05"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-04"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-03"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-02"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-01"), waveWallPlane3CurvesLarge.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-08"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-07"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-06"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-05"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-04"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-03"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-02"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-01"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-08"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-07"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-06"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-05"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-04"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-03"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-02"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-01"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-10"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-11"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-12"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-13"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-14"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-15"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-16"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-09"), waveWallPlane3CurvesLargeMirrored.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-10"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-11"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-12"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-13"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-14"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-15"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-16"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-09"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-10"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-11"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-12"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-13"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-14"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-15"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-16"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-09"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-08"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-07"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-06"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-05"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-04"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-03"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-02"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-01"), curveThenStraightMovementWallPlane.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-08"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-07"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-06"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-05"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-04"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-03"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-02"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-01"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-08"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-07"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-06"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-05"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-04"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-03"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-02"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-01"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-10"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-11"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-12"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-13"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-14"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-15"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-16"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-09"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-10"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-11"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-12"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-13"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-14"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-15"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-16"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-09"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-10"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-11"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-12"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-13"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-14"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-15"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-16"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-09"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-08"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-07"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-06"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-05"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-04"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-03"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-02"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-01"), curvedCrossMovementWallPlaneSmall.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-08"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-07"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-06"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-05"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-04"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-03"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-02"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-01"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-08"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-07"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-06"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-05"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-04"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-03"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-02"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-01"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-10"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-11"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-12"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-13"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-14"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-15"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-16"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-09"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-10"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-11"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-12"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-13"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-14"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-15"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-16"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-09"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-10"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-11"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-12"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-13"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-14"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-15"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-16"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-09"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-08"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-07"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-06"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-05"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-04"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-03"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-02"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-01"), curvedCrossMovementWallPlaneMedium.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-08"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-07"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-06"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-05"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-04"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-03"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-02"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-01"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-08"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-07"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-06"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-05"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-04"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-03"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-02"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-01"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-10"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-11"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-12"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-13"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-14"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-15"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-16"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-09"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-10"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-11"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-12"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-13"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-14"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-15"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-16"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-09"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-10"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-11"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-12"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-13"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-14"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-15"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-16"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-09"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		rotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-08"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-07"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-06"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-05"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-04"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-03"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-02"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-01"), rotationSingleWallPlane.getSymbol());

		rotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-08"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-07"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-06"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-05"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-04"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-03"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-02"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-01"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());

		rotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-08"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-07"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-06"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-05"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-04"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-03"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-02"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-01"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());

		rotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-10"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-11"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-12"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-13"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-14"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-15"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-16"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-09"), rotationSingleWallPlaneMirrored.getSymbol());

		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-10"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-11"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-12"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-13"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-14"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-15"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-16"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-09"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-10"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-11"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-12"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-13"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-14"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-15"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-16"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-09"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-08"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-07"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-06"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-05"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-04"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-03"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-02"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-01"), rotationDoubleWallPlane.getSymbol());

		rotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-08"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-07"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-06"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-05"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-04"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-03"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-02"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-01"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		rotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-08"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-07"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-06"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-05"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-04"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-03"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-02"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-01"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		rotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-10"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-11"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-12"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-13"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-14"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-15"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-16"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-09"), rotationDoubleWallPlaneMirrored.getSymbol());

		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-10"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-11"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-12"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-13"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-14"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-15"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-16"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-09"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-10"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-11"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-12"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-13"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-14"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-15"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-16"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-09"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationAlternateWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-08"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-07"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-06"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-05"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-04"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-03"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-02"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-01"), rotationAlternateWallPlane.getSymbol());

		rotationAlternateWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-08"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-07"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-06"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-05"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-04"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-03"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-02"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-01"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());

		rotationAlternateWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-08"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-07"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-06"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-05"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-04"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-03"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-02"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-01"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());

		rotationAlternateWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-10"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-11"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-12"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-13"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-14"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-15"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-16"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-09"), rotationAlternateWallPlaneMirrored.getSymbol());

		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-10"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-11"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-12"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-13"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-14"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-15"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-16"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-09"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-10"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-11"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-12"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-13"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-14"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-15"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-16"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-09"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());

		shakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-08"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-07"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-06"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-05"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-04"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-03"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-02"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-01"), shakingWallPlane.getSymbol());

		shakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-08"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-07"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-06"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-05"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-04"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-03"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-02"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-01"), shakingWallPlaneEmptyArrowhead.getSymbol());

		shakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-08"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-07"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-06"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-05"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-04"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-03"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-02"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-01"), shakingWallPlaneSchemaArrowhead.getSymbol());

		shakingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-10"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-11"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-12"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-13"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-14"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-15"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-16"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-09"), shakingWallPlaneMirrored.getSymbol());

		shakingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-10"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-11"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-12"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-13"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-14"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-15"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-16"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-09"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());

		shakingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-10"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-11"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-12"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-13"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-14"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-15"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-16"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-09"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testRotateCounterClockwise() {

		curveWallPlaneQuarterSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-02"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-03"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-04"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-05"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-06"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-07"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-08"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-01"), curveWallPlaneQuarterSmall.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-02"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-03"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-04"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-05"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-06"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-07"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-08"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-01"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-02"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-03"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-04"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-05"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-06"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-07"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-08"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-01"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-16"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-15"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-14"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-13"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-12"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-11"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-10"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-09"), curveWallPlaneQuarterSmallMirrored.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-16"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-15"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-14"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-13"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-12"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-11"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-10"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-09"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-16"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-15"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-14"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-13"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-12"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-11"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-10"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-09"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-02"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-03"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-04"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-05"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-06"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-07"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-08"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-01"), curveWallPlaneQuarterMedium.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-02"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-03"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-04"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-05"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-06"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-07"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-08"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-01"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-02"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-03"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-04"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-05"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-06"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-07"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-08"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-01"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-16"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-15"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-14"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-13"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-12"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-11"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-10"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-09"), curveWallPlaneQuarterMediumMirrored.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-16"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-15"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-14"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-13"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-12"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-11"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-10"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-09"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-16"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-15"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-14"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-13"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-12"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-11"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-10"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-09"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-02"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-03"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-04"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-05"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-06"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-07"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-08"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-01"), curveWallPlaneQuarterLarge.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-02"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-03"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-04"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-05"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-06"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-07"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-08"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-01"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-02"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-03"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-04"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-05"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-06"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-07"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-08"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-01"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-16"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-15"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-14"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-13"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-12"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-11"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-10"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-09"), curveWallPlaneQuarterLargeMirrored.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-16"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-15"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-14"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-13"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-12"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-11"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-10"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-09"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-16"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-15"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-14"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-13"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-12"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-11"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-10"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-09"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-02"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-03"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-04"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-05"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-06"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-07"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-08"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-01"), curveWallPlaneQuarterLargest.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-02"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-03"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-04"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-05"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-06"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-07"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-08"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-01"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-02"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-03"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-04"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-05"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-06"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-07"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-08"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-01"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-16"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-15"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-14"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-13"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-12"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-11"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-10"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-09"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-16"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-15"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-14"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-13"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-12"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-11"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-10"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-09"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-16"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-15"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-14"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-13"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-12"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-11"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-10"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-09"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-02"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-03"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-04"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-05"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-06"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-07"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-08"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-01"), curveWallPlaneHalfCircleSmall.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-02"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-03"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-04"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-05"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-06"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-07"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-08"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-01"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-02"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-03"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-04"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-05"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-06"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-07"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-08"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-01"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-16"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-15"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-14"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-13"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-12"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-11"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-10"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-09"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-16"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-15"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-14"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-13"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-12"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-11"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-10"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-09"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-16"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-15"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-14"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-13"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-12"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-11"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-10"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-09"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-02"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-03"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-04"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-05"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-06"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-07"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-08"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-01"), curveWallPlaneHalfCircleMedium.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-02"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-03"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-04"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-05"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-06"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-07"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-08"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-01"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-02"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-03"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-04"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-05"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-06"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-07"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-08"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-01"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-16"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-15"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-14"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-13"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-12"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-11"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-10"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-09"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-16"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-15"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-14"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-13"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-12"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-11"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-10"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-09"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-16"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-15"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-14"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-13"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-12"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-11"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-10"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-09"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-02"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-03"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-04"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-05"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-06"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-07"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-08"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-01"), curveWallPlaneHalfCircleLarge.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-02"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-03"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-04"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-05"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-06"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-07"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-08"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-01"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-02"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-03"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-04"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-05"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-06"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-07"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-08"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-01"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-16"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-15"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-14"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-13"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-12"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-11"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-10"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-09"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-16"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-15"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-14"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-13"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-12"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-11"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-10"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-09"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-16"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-15"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-14"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-13"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-12"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-11"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-10"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-09"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-02"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-03"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-04"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-05"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-06"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-07"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-08"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-01"), curveWallPlaneHalfCircleLargest.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-02"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-03"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-04"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-05"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-06"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-07"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-08"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-01"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-02"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-03"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-04"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-05"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-06"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-07"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-08"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-01"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-16"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-15"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-14"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-13"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-12"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-11"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-10"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-09"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-16"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-15"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-14"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-13"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-12"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-11"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-10"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-09"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-16"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-15"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-14"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-13"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-12"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-11"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-10"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-09"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-02"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-03"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-04"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-05"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-06"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-07"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-08"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-01"), curveWallPlane3QuarterCircleSmall.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-02"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-03"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-04"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-05"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-06"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-07"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-08"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-01"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-02"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-03"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-04"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-05"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-06"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-07"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-08"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-01"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-16"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-15"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-14"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-13"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-12"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-11"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-10"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-09"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-16"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-15"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-14"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-13"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-12"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-11"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-10"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-09"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-16"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-15"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-14"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-13"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-12"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-11"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-10"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-09"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-02"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-03"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-04"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-05"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-06"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-07"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-08"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-01"), curveWallPlane3QuarterCircleMedium.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-02"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-03"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-04"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-05"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-06"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-07"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-08"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-01"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-02"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-03"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-04"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-05"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-06"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-07"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-08"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-01"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-16"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-15"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-14"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-13"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-12"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-11"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-10"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-09"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-16"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-15"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-14"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-13"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-12"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-11"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-10"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-09"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-16"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-15"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-14"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-13"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-12"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-11"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-10"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-09"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-02"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-03"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-04"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-05"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-06"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-07"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-08"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-01"), humpWallPlaneSmall.getSymbol());

		humpWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-02"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-03"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-04"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-05"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-06"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-07"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-08"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-01"), humpWallPlaneSmallEmptyArrowhead.getSymbol());

		humpWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-02"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-03"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-04"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-05"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-06"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-07"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-08"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-01"), humpWallPlaneSmallSchemaArrowhead.getSymbol());

		humpWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-16"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-15"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-14"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-13"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-12"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-11"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-10"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-09"), humpWallPlaneSmallMirrored.getSymbol());

		humpWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-16"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-15"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-14"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-13"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-12"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-11"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-10"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-09"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-16"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-15"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-14"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-13"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-12"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-11"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-10"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-09"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-02"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-03"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-04"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-05"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-06"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-07"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-08"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-01"), humpWallPlaneMedium.getSymbol());

		humpWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-02"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-03"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-04"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-05"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-06"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-07"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-08"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-01"), humpWallPlaneMediumEmptyArrowhead.getSymbol());

		humpWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-02"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-03"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-04"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-05"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-06"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-07"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-08"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-01"), humpWallPlaneMediumSchemaArrowhead.getSymbol());

		humpWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-16"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-15"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-14"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-13"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-12"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-11"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-10"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-09"), humpWallPlaneMediumMirrored.getSymbol());

		humpWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-16"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-15"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-14"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-13"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-12"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-11"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-10"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-09"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-16"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-15"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-14"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-13"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-12"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-11"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-10"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-09"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-02"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-03"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-04"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-05"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-06"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-07"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-08"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-01"), humpWallPlaneLarge.getSymbol());

		humpWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-02"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-03"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-04"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-05"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-06"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-07"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-08"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-01"), humpWallPlaneLargeEmptyArrowhead.getSymbol());

		humpWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-02"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-03"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-04"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-05"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-06"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-07"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-08"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-01"), humpWallPlaneLargeSchemaArrowhead.getSymbol());

		humpWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-16"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-15"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-14"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-13"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-12"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-11"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-10"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-09"), humpWallPlaneLargeMirrored.getSymbol());

		humpWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-16"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-15"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-14"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-13"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-12"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-11"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-10"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-09"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-16"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-15"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-14"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-13"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-12"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-11"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-10"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-09"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-02"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-03"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-04"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-05"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-06"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-07"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-08"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-01"), loopWallPlaneSmall.getSymbol());

		loopWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-02"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-03"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-04"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-05"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-06"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-07"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-08"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-01"), loopWallPlaneSmallEmptyArrowhead.getSymbol());

		loopWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-02"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-03"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-04"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-05"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-06"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-07"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-08"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-01"), loopWallPlaneSmallSchemaArrowhead.getSymbol());

		loopWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-16"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-15"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-14"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-13"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-12"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-11"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-10"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-09"), loopWallPlaneSmallMirrored.getSymbol());

		loopWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-16"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-15"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-14"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-13"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-12"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-11"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-10"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-09"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-16"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-15"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-14"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-13"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-12"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-11"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-10"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-09"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-02"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-03"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-04"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-05"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-06"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-07"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-08"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-01"), loopWallPlaneMedium.getSymbol());

		loopWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-02"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-03"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-04"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-05"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-06"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-07"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-08"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-01"), loopWallPlaneMediumEmptyArrowhead.getSymbol());

		loopWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-02"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-03"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-04"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-05"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-06"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-07"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-08"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-01"), loopWallPlaneMediumSchemaArrowhead.getSymbol());

		loopWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-16"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-15"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-14"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-13"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-12"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-11"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-10"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-09"), loopWallPlaneMediumMirrored.getSymbol());

		loopWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-16"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-15"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-14"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-13"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-12"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-11"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-10"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-09"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-16"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-15"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-14"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-13"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-12"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-11"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-10"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-09"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-02"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-03"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-04"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-05"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-06"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-07"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-08"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-01"), loopWallPlaneLarge.getSymbol());

		loopWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-02"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-03"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-04"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-05"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-06"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-07"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-08"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-01"), loopWallPlaneLargeEmptyArrowhead.getSymbol());

		loopWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-02"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-03"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-04"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-05"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-06"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-07"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-08"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-01"), loopWallPlaneLargeSchemaArrowhead.getSymbol());

		loopWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-16"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-15"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-14"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-13"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-12"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-11"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-10"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-09"), loopWallPlaneLargeMirrored.getSymbol());

		loopWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-16"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-15"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-14"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-13"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-12"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-11"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-10"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-09"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-16"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-15"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-14"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-13"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-12"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-11"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-10"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-09"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-02"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-03"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-04"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-05"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-06"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-07"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-08"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-01"), loopWallPlaneSmallDouble.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-02"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-03"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-04"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-05"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-06"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-07"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-08"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-01"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-02"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-03"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-04"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-05"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-06"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-07"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-08"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-01"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());

		loopWallPlaneSmallDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-16"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-15"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-14"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-13"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-12"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-11"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-10"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-09"), loopWallPlaneSmallDoubleMirrored.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-16"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-15"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-14"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-13"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-12"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-11"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-10"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-09"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-16"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-15"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-14"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-13"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-12"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-11"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-10"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-09"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-02"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-03"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-04"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-05"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-06"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-07"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-08"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-01"), waveWallPlane2CurvesSmall.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-02"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-03"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-04"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-05"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-06"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-07"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-08"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-01"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-02"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-03"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-04"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-05"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-06"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-07"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-08"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-01"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-16"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-15"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-14"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-13"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-12"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-11"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-10"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-09"), waveWallPlane2CurvesSmallMirrored.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-16"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-15"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-14"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-13"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-12"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-11"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-10"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-09"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-16"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-15"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-14"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-13"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-12"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-11"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-10"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-09"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-02"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-03"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-04"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-05"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-06"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-07"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-08"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-01"), waveWallPlane2CurvesMedium.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-02"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-03"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-04"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-05"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-06"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-07"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-08"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-01"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-02"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-03"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-04"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-05"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-06"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-07"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-08"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-01"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-16"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-15"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-14"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-13"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-12"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-11"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-10"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-09"), waveWallPlane2CurvesMediumMirrored.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-16"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-15"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-14"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-13"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-12"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-11"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-10"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-09"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-16"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-15"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-14"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-13"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-12"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-11"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-10"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-09"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-02"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-03"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-04"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-05"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-06"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-07"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-08"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-01"), waveWallPlane2CurvesLarge.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-02"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-03"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-04"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-05"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-06"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-07"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-08"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-01"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-02"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-03"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-04"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-05"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-06"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-07"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-08"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-01"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-16"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-15"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-14"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-13"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-12"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-11"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-10"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-09"), waveWallPlane2CurvesLargeMirrored.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-16"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-15"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-14"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-13"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-12"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-11"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-10"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-09"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-16"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-15"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-14"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-13"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-12"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-11"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-10"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-09"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-02"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-03"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-04"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-05"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-06"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-07"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-08"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-01"), waveWallPlane3CurvesSmall.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-02"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-03"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-04"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-05"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-06"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-07"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-08"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-01"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-02"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-03"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-04"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-05"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-06"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-07"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-08"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-01"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-16"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-15"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-14"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-13"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-12"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-11"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-10"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-09"), waveWallPlane3CurvesSmallMirrored.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-16"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-15"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-14"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-13"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-12"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-11"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-10"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-09"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-16"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-15"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-14"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-13"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-12"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-11"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-10"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-09"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-02"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-03"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-04"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-05"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-06"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-07"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-08"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-01"), waveWallPlane3CurvesMedium.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-02"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-03"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-04"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-05"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-06"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-07"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-08"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-01"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-02"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-03"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-04"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-05"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-06"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-07"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-08"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-01"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-16"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-15"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-14"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-13"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-12"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-11"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-10"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-09"), waveWallPlane3CurvesMediumMirrored.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-16"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-15"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-14"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-13"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-12"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-11"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-10"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-09"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-16"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-15"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-14"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-13"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-12"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-11"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-10"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-09"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-02"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-03"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-04"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-05"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-06"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-07"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-08"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-01"), waveWallPlane3CurvesLarge.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-02"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-03"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-04"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-05"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-06"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-07"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-08"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-01"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-02"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-03"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-04"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-05"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-06"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-07"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-08"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-01"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-16"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-15"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-14"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-13"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-12"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-11"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-10"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-09"), waveWallPlane3CurvesLargeMirrored.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-16"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-15"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-14"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-13"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-12"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-11"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-10"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-09"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-16"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-15"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-14"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-13"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-12"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-11"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-10"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-09"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-02"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-03"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-04"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-05"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-06"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-07"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-08"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-01"), curveThenStraightMovementWallPlane.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-02"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-03"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-04"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-05"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-06"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-07"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-08"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-01"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-02"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-03"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-04"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-05"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-06"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-07"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-08"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-01"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-16"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-15"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-14"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-13"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-12"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-11"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-10"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-09"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-16"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-15"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-14"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-13"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-12"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-11"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-10"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-09"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-16"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-15"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-14"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-13"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-12"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-11"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-10"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-09"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-02"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-03"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-04"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-05"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-06"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-07"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-08"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-01"), curvedCrossMovementWallPlaneSmall.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-02"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-03"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-04"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-05"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-06"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-07"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-08"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-01"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-02"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-03"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-04"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-05"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-06"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-07"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-08"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-01"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-16"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-15"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-14"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-13"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-12"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-11"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-10"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-09"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-16"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-15"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-14"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-13"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-12"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-11"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-10"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-09"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-16"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-15"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-14"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-13"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-12"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-11"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-10"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-09"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-02"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-03"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-04"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-05"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-06"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-07"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-08"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-01"), curvedCrossMovementWallPlaneMedium.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-02"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-03"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-04"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-05"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-06"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-07"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-08"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-01"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-02"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-03"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-04"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-05"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-06"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-07"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-08"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-01"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-16"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-15"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-14"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-13"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-12"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-11"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-10"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-09"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-16"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-15"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-14"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-13"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-12"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-11"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-10"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-09"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-16"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-15"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-14"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-13"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-12"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-11"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-10"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-09"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		rotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-02"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-03"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-04"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-05"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-06"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-07"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-08"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-01"), rotationSingleWallPlane.getSymbol());

		rotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-02"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-03"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-04"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-05"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-06"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-07"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-08"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-01"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());

		rotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-02"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-03"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-04"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-05"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-06"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-07"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-08"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-01"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());

		rotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-16"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-15"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-14"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-13"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-12"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-11"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-10"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-09"), rotationSingleWallPlaneMirrored.getSymbol());

		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-16"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-15"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-14"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-13"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-12"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-11"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-10"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-09"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-16"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-15"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-14"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-13"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-12"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-11"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-10"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-09"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-02"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-03"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-04"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-05"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-06"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-07"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-08"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-01"), rotationDoubleWallPlane.getSymbol());

		rotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-02"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-03"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-04"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-05"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-06"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-07"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-08"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-01"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		rotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-02"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-03"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-04"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-05"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-06"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-07"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-08"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-01"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		rotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-16"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-15"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-14"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-13"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-12"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-11"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-10"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-09"), rotationDoubleWallPlaneMirrored.getSymbol());

		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-16"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-15"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-14"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-13"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-12"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-11"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-10"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-09"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-16"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-15"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-14"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-13"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-12"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-11"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-10"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-09"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationAlternateWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-02"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-03"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-04"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-05"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-06"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-07"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-08"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-01"), rotationAlternateWallPlane.getSymbol());

		rotationAlternateWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-02"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-03"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-04"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-05"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-06"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-07"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-08"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-01"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());

		rotationAlternateWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-02"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-03"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-04"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-05"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-06"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-07"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-08"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-01"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());

		rotationAlternateWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-16"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-15"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-14"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-13"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-12"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-11"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-10"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-09"), rotationAlternateWallPlaneMirrored.getSymbol());

		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-16"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-15"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-14"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-13"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-12"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-11"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-10"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-09"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-16"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-15"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-14"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-13"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-12"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-11"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-10"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-09"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());

		shakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-02"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-03"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-04"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-05"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-06"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-07"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-08"), shakingWallPlane.getSymbol());
		shakingWallPlane.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-01"), shakingWallPlane.getSymbol());

		shakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-02"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-03"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-04"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-05"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-06"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-07"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-08"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-01"), shakingWallPlaneEmptyArrowhead.getSymbol());

		shakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-02"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-03"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-04"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-05"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-06"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-07"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-08"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-01"), shakingWallPlaneSchemaArrowhead.getSymbol());

		shakingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-16"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-15"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-14"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-13"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-12"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-11"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-10"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-09"), shakingWallPlaneMirrored.getSymbol());

		shakingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-16"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-15"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-14"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-13"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-12"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-11"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-10"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-09"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());

		shakingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-16"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-15"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-14"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-13"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-12"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-11"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-10"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.rotateCounterClockwise();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-09"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanMirror() {

		assertTrue(curveWallPlaneQuarterSmall.canMirror());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowhead.canMirror());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowhead.canMirror());
		assertTrue(curveWallPlaneQuarterSmallMirrored.canMirror());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlaneQuarterMedium.canMirror());
		assertTrue(curveWallPlaneQuarterMediumEmptyArrowhead.canMirror());
		assertTrue(curveWallPlaneQuarterMediumSchemaArrowhead.canMirror());
		assertTrue(curveWallPlaneQuarterMediumMirrored.canMirror());
		assertTrue(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlaneQuarterLarge.canMirror());
		assertTrue(curveWallPlaneQuarterLargeEmptyArrowhead.canMirror());
		assertTrue(curveWallPlaneQuarterLargeSchemaArrowhead.canMirror());
		assertTrue(curveWallPlaneQuarterLargeMirrored.canMirror());
		assertTrue(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlaneQuarterLargest.canMirror());
		assertTrue(curveWallPlaneQuarterLargestEmptyArrowhead.canMirror());
		assertTrue(curveWallPlaneQuarterLargestSchemaArrowhead.canMirror());
		assertTrue(curveWallPlaneQuarterLargestMirrored.canMirror());
		assertTrue(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlaneHalfCircleSmall.canMirror());
		assertTrue(curveWallPlaneHalfCircleSmallEmptyArrowhead.canMirror());
		assertTrue(curveWallPlaneHalfCircleSmallSchemaArrowhead.canMirror());
		assertTrue(curveWallPlaneHalfCircleSmallMirrored.canMirror());
		assertTrue(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlaneHalfCircleMedium.canMirror());
		assertTrue(curveWallPlaneHalfCircleMediumEmptyArrowhead.canMirror());
		assertTrue(curveWallPlaneHalfCircleMediumSchemaArrowhead.canMirror());
		assertTrue(curveWallPlaneHalfCircleMediumMirrored.canMirror());
		assertTrue(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlaneHalfCircleLarge.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargeEmptyArrowhead.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargeSchemaArrowhead.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargeMirrored.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlaneHalfCircleLargest.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargestEmptyArrowhead.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargestSchemaArrowhead.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargestMirrored.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlane3QuarterCircleSmall.canMirror());
		assertTrue(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canMirror());
		assertTrue(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canMirror());
		assertTrue(curveWallPlane3QuarterCircleSmallMirrored.canMirror());
		assertTrue(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(curveWallPlane3QuarterCircleMedium.canMirror());
		assertTrue(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canMirror());
		assertTrue(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canMirror());
		assertTrue(curveWallPlane3QuarterCircleMediumMirrored.canMirror());
		assertTrue(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(humpWallPlaneSmall.canMirror());
		assertTrue(humpWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(humpWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(humpWallPlaneSmallMirrored.canMirror());
		assertTrue(humpWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(humpWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(humpWallPlaneMedium.canMirror());
		assertTrue(humpWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(humpWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(humpWallPlaneMediumMirrored.canMirror());
		assertTrue(humpWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(humpWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(humpWallPlaneLarge.canMirror());
		assertTrue(humpWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(humpWallPlaneLargeSchemaArrowhead.canMirror());
		assertTrue(humpWallPlaneLargeMirrored.canMirror());
		assertTrue(humpWallPlaneLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(humpWallPlaneLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(loopWallPlaneSmall.canMirror());
		assertTrue(loopWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(loopWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(loopWallPlaneSmallMirrored.canMirror());
		assertTrue(loopWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(loopWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(loopWallPlaneMedium.canMirror());
		assertTrue(loopWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(loopWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(loopWallPlaneMediumMirrored.canMirror());
		assertTrue(loopWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(loopWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(loopWallPlaneLarge.canMirror());
		assertTrue(loopWallPlaneLargeEmptyArrowhead.canMirror());
		assertTrue(loopWallPlaneLargeSchemaArrowhead.canMirror());
		assertTrue(loopWallPlaneLargeMirrored.canMirror());
		assertTrue(loopWallPlaneLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(loopWallPlaneLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(loopWallPlaneSmallDouble.canMirror());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowhead.canMirror());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowhead.canMirror());
		assertTrue(loopWallPlaneSmallDoubleMirrored.canMirror());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canMirror());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canMirror());

		assertTrue(waveWallPlane2CurvesSmall.canMirror());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowhead.canMirror());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowhead.canMirror());
		assertTrue(waveWallPlane2CurvesSmallMirrored.canMirror());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(waveWallPlane2CurvesMedium.canMirror());
		assertTrue(waveWallPlane2CurvesMediumEmptyArrowhead.canMirror());
		assertTrue(waveWallPlane2CurvesMediumSchemaArrowhead.canMirror());
		assertTrue(waveWallPlane2CurvesMediumMirrored.canMirror());
		assertTrue(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(waveWallPlane2CurvesLarge.canMirror());
		assertTrue(waveWallPlane2CurvesLargeEmptyArrowhead.canMirror());
		assertTrue(waveWallPlane2CurvesLargeSchemaArrowhead.canMirror());
		assertTrue(waveWallPlane2CurvesLargeMirrored.canMirror());
		assertTrue(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(waveWallPlane3CurvesSmall.canMirror());
		assertTrue(waveWallPlane3CurvesSmallEmptyArrowhead.canMirror());
		assertTrue(waveWallPlane3CurvesSmallSchemaArrowhead.canMirror());
		assertTrue(waveWallPlane3CurvesSmallMirrored.canMirror());
		assertTrue(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(waveWallPlane3CurvesMedium.canMirror());
		assertTrue(waveWallPlane3CurvesMediumEmptyArrowhead.canMirror());
		assertTrue(waveWallPlane3CurvesMediumSchemaArrowhead.canMirror());
		assertTrue(waveWallPlane3CurvesMediumMirrored.canMirror());
		assertTrue(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(waveWallPlane3CurvesLarge.canMirror());
		assertTrue(waveWallPlane3CurvesLargeEmptyArrowhead.canMirror());
		assertTrue(waveWallPlane3CurvesLargeSchemaArrowhead.canMirror());
		assertTrue(waveWallPlane3CurvesLargeMirrored.canMirror());
		assertTrue(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canMirror());
		assertTrue(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canMirror());

		assertTrue(curveThenStraightMovementWallPlane.canMirror());
		assertTrue(curveThenStraightMovementWallPlaneEmptyArrowhead.canMirror());
		assertTrue(curveThenStraightMovementWallPlaneSchemaArrowhead.canMirror());
		assertTrue(curveThenStraightMovementWallPlaneMirrored.canMirror());
		assertTrue(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(curvedCrossMovementWallPlaneSmall.canMirror());
		assertTrue(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canMirror());
		assertTrue(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canMirror());
		assertTrue(curvedCrossMovementWallPlaneSmallMirrored.canMirror());
		assertTrue(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canMirror());
		assertTrue(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canMirror());

		assertTrue(curvedCrossMovementWallPlaneMedium.canMirror());
		assertTrue(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canMirror());
		assertTrue(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canMirror());
		assertTrue(curvedCrossMovementWallPlaneMediumMirrored.canMirror());
		assertTrue(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canMirror());
		assertTrue(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canMirror());

		assertTrue(rotationSingleWallPlane.canMirror());
		assertTrue(rotationSingleWallPlaneEmptyArrowhead.canMirror());
		assertTrue(rotationSingleWallPlaneSchemaArrowhead.canMirror());
		assertTrue(rotationSingleWallPlaneMirrored.canMirror());
		assertTrue(rotationSingleWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(rotationSingleWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(rotationDoubleWallPlane.canMirror());
		assertTrue(rotationDoubleWallPlaneEmptyArrowhead.canMirror());
		assertTrue(rotationDoubleWallPlaneSchemaArrowhead.canMirror());
		assertTrue(rotationDoubleWallPlaneMirrored.canMirror());
		assertTrue(rotationDoubleWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(rotationDoubleWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(rotationAlternateWallPlane.canMirror());
		assertTrue(rotationAlternateWallPlaneEmptyArrowhead.canMirror());
		assertTrue(rotationAlternateWallPlaneSchemaArrowhead.canMirror());
		assertTrue(rotationAlternateWallPlaneMirrored.canMirror());
		assertTrue(rotationAlternateWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(rotationAlternateWallPlaneSchemaArrowheadMirrored.canMirror());

		assertTrue(shakingWallPlane.canMirror());
		assertTrue(shakingWallPlaneEmptyArrowhead.canMirror());
		assertTrue(shakingWallPlaneSchemaArrowhead.canMirror());
		assertTrue(shakingWallPlaneMirrored.canMirror());
		assertTrue(shakingWallPlaneEmptyArrowheadMirrored.canMirror());
		assertTrue(shakingWallPlaneSchemaArrowheadMirrored.canMirror());

	}

	@Override
	public void testMirror() {

		curveWallPlaneQuarterSmall.mirror();
		assertEquals(curveWallPlaneQuarterSmallMirrored.getSymbol(), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-01"), curveWallPlaneQuarterSmall.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowhead.mirror();
		assertEquals(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol(),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-01"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowhead.mirror();
		assertEquals(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol(),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-01"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterSmallMirrored.mirror();
		assertEquals(curveWallPlaneQuarterSmall.getSymbol(), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-09"), curveWallPlaneQuarterSmallMirrored.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol(),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-09"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol(),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-09"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMedium.mirror();
		assertEquals(curveWallPlaneQuarterMediumMirrored.getSymbol(), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-01"), curveWallPlaneQuarterMedium.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowhead.mirror();
		assertEquals(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol(),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-01"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowhead.mirror();
		assertEquals(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol(),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-01"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterMediumMirrored.mirror();
		assertEquals(curveWallPlaneQuarterMedium.getSymbol(), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-09"), curveWallPlaneQuarterMediumMirrored.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol(),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-09"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol(),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-09"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLarge.mirror();
		assertEquals(curveWallPlaneQuarterLargeMirrored.getSymbol(), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-01"), curveWallPlaneQuarterLarge.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowhead.mirror();
		assertEquals(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol(),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-01"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowhead.mirror();
		assertEquals(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol(),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-01"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargeMirrored.mirror();
		assertEquals(curveWallPlaneQuarterLarge.getSymbol(), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-09"), curveWallPlaneQuarterLargeMirrored.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol(),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-09"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol(),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-09"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargest.mirror();
		assertEquals(curveWallPlaneQuarterLargestMirrored.getSymbol(), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-01"), curveWallPlaneQuarterLargest.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowhead.mirror();
		assertEquals(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol(),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-01"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowhead.mirror();
		assertEquals(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol(),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-01"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargestMirrored.mirror();
		assertEquals(curveWallPlaneQuarterLargest.getSymbol(), curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-09"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol(),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-09"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol(),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-09"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmall.mirror();
		assertEquals(curveWallPlaneHalfCircleSmallMirrored.getSymbol(), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-01"), curveWallPlaneHalfCircleSmall.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowhead.mirror();
		assertEquals(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol(),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-01"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowhead.mirror();
		assertEquals(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol(),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-01"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleSmall.getSymbol(), curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-09"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol(),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-09"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol(),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-09"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMedium.mirror();
		assertEquals(curveWallPlaneHalfCircleMediumMirrored.getSymbol(), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-01"), curveWallPlaneHalfCircleMedium.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowhead.mirror();
		assertEquals(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol(),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-01"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowhead.mirror();
		assertEquals(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol(),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-01"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleMedium.getSymbol(), curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-09"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol(),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-09"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol(),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-09"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLarge.mirror();
		assertEquals(curveWallPlaneHalfCircleLargeMirrored.getSymbol(), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-01"), curveWallPlaneHalfCircleLarge.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowhead.mirror();
		assertEquals(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol(),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-01"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowhead.mirror();
		assertEquals(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol(),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-01"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleLarge.getSymbol(), curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-09"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol(),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-09"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol(),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-09"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargest.mirror();
		assertEquals(curveWallPlaneHalfCircleLargestMirrored.getSymbol(), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-01"), curveWallPlaneHalfCircleLargest.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowhead.mirror();
		assertEquals(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol(),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-01"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowhead.mirror();
		assertEquals(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol(),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-01"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleLargest.getSymbol(), curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-09"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol(),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-09"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol(),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-09"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmall.mirror();
		assertEquals(curveWallPlane3QuarterCircleSmallMirrored.getSymbol(),
				curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-01"), curveWallPlane3QuarterCircleSmall.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowhead.mirror();
		assertEquals(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol(),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-01"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowhead.mirror();
		assertEquals(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol(),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-01"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallMirrored.mirror();
		assertEquals(curveWallPlane3QuarterCircleSmall.getSymbol(),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-09"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol(),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-09"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol(),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-09"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMedium.mirror();
		assertEquals(curveWallPlane3QuarterCircleMediumMirrored.getSymbol(),
				curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-01"), curveWallPlane3QuarterCircleMedium.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowhead.mirror();
		assertEquals(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol(),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-01"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowhead.mirror();
		assertEquals(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol(),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-01"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumMirrored.mirror();
		assertEquals(curveWallPlane3QuarterCircleMedium.getSymbol(),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-09"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.mirror();
		assertEquals(curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol(),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-09"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.mirror();
		assertEquals(curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol(),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-09"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneSmall.mirror();
		assertEquals(humpWallPlaneSmallMirrored.getSymbol(), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-01"), humpWallPlaneSmall.getSymbol());

		humpWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-01"), humpWallPlaneSmallEmptyArrowhead.getSymbol());

		humpWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-01"), humpWallPlaneSmallSchemaArrowhead.getSymbol());

		humpWallPlaneSmallMirrored.mirror();
		assertEquals(humpWallPlaneSmall.getSymbol(), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-09"), humpWallPlaneSmallMirrored.getSymbol());

		humpWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(humpWallPlaneSmallEmptyArrowhead.getSymbol(),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-09"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(humpWallPlaneSmallSchemaArrowhead.getSymbol(),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-09"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneMedium.mirror();
		assertEquals(humpWallPlaneMediumMirrored.getSymbol(), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-01"), humpWallPlaneMedium.getSymbol());

		humpWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-01"), humpWallPlaneMediumEmptyArrowhead.getSymbol());

		humpWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-01"), humpWallPlaneMediumSchemaArrowhead.getSymbol());

		humpWallPlaneMediumMirrored.mirror();
		assertEquals(humpWallPlaneMedium.getSymbol(), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-09"), humpWallPlaneMediumMirrored.getSymbol());

		humpWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(humpWallPlaneMediumEmptyArrowhead.getSymbol(),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-09"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(humpWallPlaneMediumSchemaArrowhead.getSymbol(),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-09"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneLarge.mirror();
		assertEquals(humpWallPlaneLargeMirrored.getSymbol(), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-01"), humpWallPlaneLarge.getSymbol());

		humpWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol(),
				humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-01"), humpWallPlaneLargeEmptyArrowhead.getSymbol());

		humpWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol(),
				humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-01"), humpWallPlaneLargeSchemaArrowhead.getSymbol());

		humpWallPlaneLargeMirrored.mirror();
		assertEquals(humpWallPlaneLarge.getSymbol(), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-09"), humpWallPlaneLargeMirrored.getSymbol());

		humpWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(humpWallPlaneLargeEmptyArrowhead.getSymbol(),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-09"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(humpWallPlaneLargeSchemaArrowhead.getSymbol(),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-09"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmall.mirror();
		assertEquals(loopWallPlaneSmallMirrored.getSymbol(), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-01"), loopWallPlaneSmall.getSymbol());

		loopWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-01"), loopWallPlaneSmallEmptyArrowhead.getSymbol());

		loopWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-01"), loopWallPlaneSmallSchemaArrowhead.getSymbol());

		loopWallPlaneSmallMirrored.mirror();
		assertEquals(loopWallPlaneSmall.getSymbol(), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-09"), loopWallPlaneSmallMirrored.getSymbol());

		loopWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(loopWallPlaneSmallEmptyArrowhead.getSymbol(),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-09"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(loopWallPlaneSmallSchemaArrowhead.getSymbol(),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-09"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneMedium.mirror();
		assertEquals(loopWallPlaneMediumMirrored.getSymbol(), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-01"), loopWallPlaneMedium.getSymbol());

		loopWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-01"), loopWallPlaneMediumEmptyArrowhead.getSymbol());

		loopWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-01"), loopWallPlaneMediumSchemaArrowhead.getSymbol());

		loopWallPlaneMediumMirrored.mirror();
		assertEquals(loopWallPlaneMedium.getSymbol(), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-09"), loopWallPlaneMediumMirrored.getSymbol());

		loopWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(loopWallPlaneMediumEmptyArrowhead.getSymbol(),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-09"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(loopWallPlaneMediumSchemaArrowhead.getSymbol(),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-09"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneLarge.mirror();
		assertEquals(loopWallPlaneLargeMirrored.getSymbol(), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-01"), loopWallPlaneLarge.getSymbol());

		loopWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol(),
				loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-01"), loopWallPlaneLargeEmptyArrowhead.getSymbol());

		loopWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol(),
				loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-01"), loopWallPlaneLargeSchemaArrowhead.getSymbol());

		loopWallPlaneLargeMirrored.mirror();
		assertEquals(loopWallPlaneLarge.getSymbol(), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-09"), loopWallPlaneLargeMirrored.getSymbol());

		loopWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(loopWallPlaneLargeEmptyArrowhead.getSymbol(),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-09"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(loopWallPlaneLargeSchemaArrowhead.getSymbol(),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-09"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDouble.mirror();
		assertEquals(loopWallPlaneSmallDoubleMirrored.getSymbol(), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-01"), loopWallPlaneSmallDouble.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowhead.mirror();
		assertEquals(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol(),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-01"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowhead.mirror();
		assertEquals(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol(),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-01"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());

		loopWallPlaneSmallDoubleMirrored.mirror();
		assertEquals(loopWallPlaneSmallDouble.getSymbol(), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-09"), loopWallPlaneSmallDoubleMirrored.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.mirror();
		assertEquals(loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol(),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-09"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.mirror();
		assertEquals(loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol(),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-09"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmall.mirror();
		assertEquals(waveWallPlane2CurvesSmallMirrored.getSymbol(), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-01"), waveWallPlane2CurvesSmall.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowhead.mirror();
		assertEquals(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol(),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-01"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowhead.mirror();
		assertEquals(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol(),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-01"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesSmallMirrored.mirror();
		assertEquals(waveWallPlane2CurvesSmall.getSymbol(), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-09"), waveWallPlane2CurvesSmallMirrored.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.mirror();
		assertEquals(waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol(),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-09"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.mirror();
		assertEquals(waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol(),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-09"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMedium.mirror();
		assertEquals(waveWallPlane2CurvesMediumMirrored.getSymbol(), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-01"), waveWallPlane2CurvesMedium.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowhead.mirror();
		assertEquals(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol(),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-01"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowhead.mirror();
		assertEquals(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol(),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-01"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesMediumMirrored.mirror();
		assertEquals(waveWallPlane2CurvesMedium.getSymbol(), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-09"), waveWallPlane2CurvesMediumMirrored.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.mirror();
		assertEquals(waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol(),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-09"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.mirror();
		assertEquals(waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol(),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-09"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLarge.mirror();
		assertEquals(waveWallPlane2CurvesLargeMirrored.getSymbol(), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-01"), waveWallPlane2CurvesLarge.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowhead.mirror();
		assertEquals(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol(),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-01"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowhead.mirror();
		assertEquals(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol(),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-01"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesLargeMirrored.mirror();
		assertEquals(waveWallPlane2CurvesLarge.getSymbol(), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-09"), waveWallPlane2CurvesLargeMirrored.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.mirror();
		assertEquals(waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol(),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-09"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.mirror();
		assertEquals(waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol(),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-09"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmall.mirror();
		assertEquals(waveWallPlane3CurvesSmallMirrored.getSymbol(), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-01"), waveWallPlane3CurvesSmall.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowhead.mirror();
		assertEquals(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol(),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-01"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowhead.mirror();
		assertEquals(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol(),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-01"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesSmallMirrored.mirror();
		assertEquals(waveWallPlane3CurvesSmall.getSymbol(), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-09"), waveWallPlane3CurvesSmallMirrored.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.mirror();
		assertEquals(waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol(),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-09"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.mirror();
		assertEquals(waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol(),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-09"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMedium.mirror();
		assertEquals(waveWallPlane3CurvesMediumMirrored.getSymbol(), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-01"), waveWallPlane3CurvesMedium.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowhead.mirror();
		assertEquals(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol(),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-01"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowhead.mirror();
		assertEquals(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol(),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-01"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesMediumMirrored.mirror();
		assertEquals(waveWallPlane3CurvesMedium.getSymbol(), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-09"), waveWallPlane3CurvesMediumMirrored.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.mirror();
		assertEquals(waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol(),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-09"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.mirror();
		assertEquals(waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol(),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-09"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLarge.mirror();
		assertEquals(waveWallPlane3CurvesLargeMirrored.getSymbol(), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-01"), waveWallPlane3CurvesLarge.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowhead.mirror();
		assertEquals(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol(),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-01"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowhead.mirror();
		assertEquals(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol(),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-01"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesLargeMirrored.mirror();
		assertEquals(waveWallPlane3CurvesLarge.getSymbol(), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-09"), waveWallPlane3CurvesLargeMirrored.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.mirror();
		assertEquals(waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol(),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-09"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.mirror();
		assertEquals(waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol(),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-09"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlane.mirror();
		assertEquals(curveThenStraightMovementWallPlaneMirrored.getSymbol(),
				curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-01"), curveThenStraightMovementWallPlane.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol(),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-01"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol(),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-01"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneMirrored.mirror();
		assertEquals(curveThenStraightMovementWallPlane.getSymbol(),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-09"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol(),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-09"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol(),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-09"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmall.mirror();
		assertEquals(curvedCrossMovementWallPlaneSmallMirrored.getSymbol(),
				curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-01"), curvedCrossMovementWallPlaneSmall.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol(),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-01"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol(),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-01"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallMirrored.mirror();
		assertEquals(curvedCrossMovementWallPlaneSmall.getSymbol(),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-09"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol(),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-09"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol(),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-09"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMedium.mirror();
		assertEquals(curvedCrossMovementWallPlaneMediumMirrored.getSymbol(),
				curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-01"), curvedCrossMovementWallPlaneMedium.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol(),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-01"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol(),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-01"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumMirrored.mirror();
		assertEquals(curvedCrossMovementWallPlaneMedium.getSymbol(),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-09"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol(),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-09"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol(),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-09"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		rotationSingleWallPlane.mirror();
		assertEquals(rotationSingleWallPlaneMirrored.getSymbol(), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-01"), rotationSingleWallPlane.getSymbol());

		rotationSingleWallPlaneEmptyArrowhead.mirror();
		assertEquals(rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-01"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());

		rotationSingleWallPlaneSchemaArrowhead.mirror();
		assertEquals(rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-01"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());

		rotationSingleWallPlaneMirrored.mirror();
		assertEquals(rotationSingleWallPlane.getSymbol(), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-09"), rotationSingleWallPlaneMirrored.getSymbol());

		rotationSingleWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(rotationSingleWallPlaneEmptyArrowhead.getSymbol(),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-09"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationSingleWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(rotationSingleWallPlaneSchemaArrowhead.getSymbol(),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-09"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationDoubleWallPlane.mirror();
		assertEquals(rotationDoubleWallPlaneMirrored.getSymbol(), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-01"), rotationDoubleWallPlane.getSymbol());

		rotationDoubleWallPlaneEmptyArrowhead.mirror();
		assertEquals(rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-01"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		rotationDoubleWallPlaneSchemaArrowhead.mirror();
		assertEquals(rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-01"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		rotationDoubleWallPlaneMirrored.mirror();
		assertEquals(rotationDoubleWallPlane.getSymbol(), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-09"), rotationDoubleWallPlaneMirrored.getSymbol());

		rotationDoubleWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(rotationDoubleWallPlaneEmptyArrowhead.getSymbol(),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-09"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationDoubleWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(rotationDoubleWallPlaneSchemaArrowhead.getSymbol(),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-09"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationAlternateWallPlane.mirror();
		assertEquals(rotationAlternateWallPlaneMirrored.getSymbol(), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-01"), rotationAlternateWallPlane.getSymbol());

		rotationAlternateWallPlaneEmptyArrowhead.mirror();
		assertEquals(rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol(),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-01"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());

		rotationAlternateWallPlaneSchemaArrowhead.mirror();
		assertEquals(rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol(),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-01"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());

		rotationAlternateWallPlaneMirrored.mirror();
		assertEquals(rotationAlternateWallPlane.getSymbol(), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-09"), rotationAlternateWallPlaneMirrored.getSymbol());

		rotationAlternateWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(rotationAlternateWallPlaneEmptyArrowhead.getSymbol(),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-09"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationAlternateWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(rotationAlternateWallPlaneSchemaArrowhead.getSymbol(),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-09"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());

		shakingWallPlane.mirror();
		assertEquals(shakingWallPlaneMirrored.getSymbol(), shakingWallPlane.getSymbol());
		shakingWallPlane.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-01"), shakingWallPlane.getSymbol());

		shakingWallPlaneEmptyArrowhead.mirror();
		assertEquals(shakingWallPlaneEmptyArrowheadMirrored.getSymbol(), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-01"), shakingWallPlaneEmptyArrowhead.getSymbol());

		shakingWallPlaneSchemaArrowhead.mirror();
		assertEquals(shakingWallPlaneSchemaArrowheadMirrored.getSymbol(), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-01"), shakingWallPlaneSchemaArrowhead.getSymbol());

		shakingWallPlaneMirrored.mirror();
		assertEquals(shakingWallPlane.getSymbol(), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-09"), shakingWallPlaneMirrored.getSymbol());

		shakingWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(shakingWallPlaneEmptyArrowhead.getSymbol(), shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-09"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());

		shakingWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(shakingWallPlaneSchemaArrowhead.getSymbol(), shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.mirror();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-09"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanMirrorVertically() {

		assertTrue(curveWallPlaneQuarterSmall.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterSmallMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlaneQuarterMedium.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterMediumMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlaneQuarterLarge.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargeMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlaneQuarterLargest.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargestEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargestSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargestMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlaneHalfCircleSmall.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleSmallMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlaneHalfCircleMedium.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleMediumMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlaneHalfCircleLarge.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargeMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlaneHalfCircleLargest.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargestEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargestSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargestMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlane3QuarterCircleSmall.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleSmallMirrored.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveWallPlane3QuarterCircleMedium.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleMediumMirrored.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(humpWallPlaneSmall.canMirrorVertically());
		assertTrue(humpWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(humpWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(humpWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(humpWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(humpWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(humpWallPlaneMedium.canMirrorVertically());
		assertTrue(humpWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(humpWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(humpWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(humpWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(humpWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(humpWallPlaneLarge.canMirrorVertically());
		assertTrue(humpWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(humpWallPlaneLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(humpWallPlaneLargeMirrored.canMirrorVertically());
		assertTrue(humpWallPlaneLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(humpWallPlaneLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(loopWallPlaneSmall.canMirrorVertically());
		assertTrue(loopWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(loopWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(loopWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(loopWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(loopWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(loopWallPlaneMedium.canMirrorVertically());
		assertTrue(loopWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(loopWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(loopWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(loopWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(loopWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(loopWallPlaneLarge.canMirrorVertically());
		assertTrue(loopWallPlaneLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(loopWallPlaneLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(loopWallPlaneLargeMirrored.canMirrorVertically());
		assertTrue(loopWallPlaneLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(loopWallPlaneLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(loopWallPlaneSmallDouble.canMirrorVertically());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowhead.canMirrorVertically());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowhead.canMirrorVertically());
		assertTrue(loopWallPlaneSmallDoubleMirrored.canMirrorVertically());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(waveWallPlane2CurvesSmall.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesSmallMirrored.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(waveWallPlane2CurvesMedium.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesMediumMirrored.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(waveWallPlane2CurvesLarge.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesLargeMirrored.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(waveWallPlane3CurvesSmall.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesSmallMirrored.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(waveWallPlane3CurvesMedium.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesMediumMirrored.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(waveWallPlane3CurvesLarge.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesLargeEmptyArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesLargeSchemaArrowhead.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesLargeMirrored.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curveThenStraightMovementWallPlane.canMirrorVertically());
		assertTrue(curveThenStraightMovementWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(curveThenStraightMovementWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(curveThenStraightMovementWallPlaneMirrored.canMirrorVertically());
		assertTrue(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curvedCrossMovementWallPlaneSmall.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneSmallMirrored.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(curvedCrossMovementWallPlaneMedium.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneMediumMirrored.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(rotationSingleWallPlane.canMirrorVertically());
		assertTrue(rotationSingleWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(rotationSingleWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(rotationSingleWallPlaneMirrored.canMirrorVertically());
		assertTrue(rotationSingleWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(rotationSingleWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(rotationDoubleWallPlane.canMirrorVertically());
		assertTrue(rotationDoubleWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(rotationDoubleWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(rotationDoubleWallPlaneMirrored.canMirrorVertically());
		assertTrue(rotationDoubleWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(rotationDoubleWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(rotationAlternateWallPlane.canMirrorVertically());
		assertTrue(rotationAlternateWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(rotationAlternateWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(rotationAlternateWallPlaneMirrored.canMirrorVertically());
		assertTrue(rotationAlternateWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(rotationAlternateWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

		assertTrue(shakingWallPlane.canMirrorVertically());
		assertTrue(shakingWallPlaneEmptyArrowhead.canMirrorVertically());
		assertTrue(shakingWallPlaneSchemaArrowhead.canMirrorVertically());
		assertTrue(shakingWallPlaneMirrored.canMirrorVertically());
		assertTrue(shakingWallPlaneEmptyArrowheadMirrored.canMirrorVertically());
		assertTrue(shakingWallPlaneSchemaArrowheadMirrored.canMirrorVertically());

	}

	@Override
	public void testMirrorVertically() {

		curveWallPlaneQuarterSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-13"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-01"), curveWallPlaneQuarterSmall.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-13"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-01"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-13"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-01"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-05"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-09"), curveWallPlaneQuarterSmallMirrored.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-05"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-09"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-05"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-09"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-13"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-01"), curveWallPlaneQuarterMedium.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-13"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-01"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-13"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-01"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-05"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-09"), curveWallPlaneQuarterMediumMirrored.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-05"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-09"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-05"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-09"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-13"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-01"), curveWallPlaneQuarterLarge.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-13"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-01"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-13"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-01"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-05"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-09"), curveWallPlaneQuarterLargeMirrored.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-05"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-09"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-05"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-09"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargest.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-13"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-01"), curveWallPlaneQuarterLargest.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-13"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-01"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-13"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-01"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargestMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-05"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-09"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-05"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-09"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-05"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-09"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-13"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-01"), curveWallPlaneHalfCircleSmall.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-13"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-01"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-13"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-01"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-05"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-09"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-05"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-09"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-05"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-09"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-13"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-01"), curveWallPlaneHalfCircleMedium.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-13"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-01"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-13"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-01"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-05"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-09"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-05"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-09"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-05"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-09"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-13"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-01"), curveWallPlaneHalfCircleLarge.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-13"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-01"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-13"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-01"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-05"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-09"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-05"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-09"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-05"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-09"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargest.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-13"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-01"), curveWallPlaneHalfCircleLargest.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-13"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-01"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-13"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-01"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-05"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-09"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-05"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-09"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-05"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-09"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-13"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-01"), curveWallPlane3QuarterCircleSmall.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-13"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-01"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-13"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-01"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-05"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-09"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-05"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-09"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-05"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-09"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-13"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-01"), curveWallPlane3QuarterCircleMedium.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-13"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-01"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-13"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-01"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-05"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-09"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-05"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-09"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-05"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-09"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-13"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-01"), humpWallPlaneSmall.getSymbol());

		humpWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-13"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-01"), humpWallPlaneSmallEmptyArrowhead.getSymbol());

		humpWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-13"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-01"), humpWallPlaneSmallSchemaArrowhead.getSymbol());

		humpWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-05"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-09"), humpWallPlaneSmallMirrored.getSymbol());

		humpWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-05"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-09"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-05"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-09"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-13"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-01"), humpWallPlaneMedium.getSymbol());

		humpWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-13"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-01"), humpWallPlaneMediumEmptyArrowhead.getSymbol());

		humpWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-13"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-01"), humpWallPlaneMediumSchemaArrowhead.getSymbol());

		humpWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-05"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-09"), humpWallPlaneMediumMirrored.getSymbol());

		humpWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-05"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-09"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-05"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-09"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-13"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-01"), humpWallPlaneLarge.getSymbol());

		humpWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-13"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-01"), humpWallPlaneLargeEmptyArrowhead.getSymbol());

		humpWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-13"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-01"), humpWallPlaneLargeSchemaArrowhead.getSymbol());

		humpWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-05"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-09"), humpWallPlaneLargeMirrored.getSymbol());

		humpWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-05"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-09"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-05"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-09"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-13"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-01"), loopWallPlaneSmall.getSymbol());

		loopWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-13"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-01"), loopWallPlaneSmallEmptyArrowhead.getSymbol());

		loopWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-13"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-01"), loopWallPlaneSmallSchemaArrowhead.getSymbol());

		loopWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-05"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-09"), loopWallPlaneSmallMirrored.getSymbol());

		loopWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-05"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-09"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-05"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-09"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-13"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-01"), loopWallPlaneMedium.getSymbol());

		loopWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-13"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-01"), loopWallPlaneMediumEmptyArrowhead.getSymbol());

		loopWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-13"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-01"), loopWallPlaneMediumSchemaArrowhead.getSymbol());

		loopWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-05"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-09"), loopWallPlaneMediumMirrored.getSymbol());

		loopWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-05"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-09"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-05"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-09"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-13"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-01"), loopWallPlaneLarge.getSymbol());

		loopWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-13"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-01"), loopWallPlaneLargeEmptyArrowhead.getSymbol());

		loopWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-13"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-01"), loopWallPlaneLargeSchemaArrowhead.getSymbol());

		loopWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-05"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-09"), loopWallPlaneLargeMirrored.getSymbol());

		loopWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-05"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-09"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-05"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-09"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDouble.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-13"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-01"), loopWallPlaneSmallDouble.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-13"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-01"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-13"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-01"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());

		loopWallPlaneSmallDoubleMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-05"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-09"), loopWallPlaneSmallDoubleMirrored.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-05"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-09"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-05"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-09"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-13"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-01"), waveWallPlane2CurvesSmall.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-13"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-01"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-13"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-01"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-05"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-09"), waveWallPlane2CurvesSmallMirrored.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-05"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-09"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-05"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-09"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-13"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-01"), waveWallPlane2CurvesMedium.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-13"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-01"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-13"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-01"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-05"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-09"), waveWallPlane2CurvesMediumMirrored.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-05"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-09"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-05"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-09"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-13"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-01"), waveWallPlane2CurvesLarge.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-13"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-01"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-13"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-01"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-05"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-09"), waveWallPlane2CurvesLargeMirrored.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-05"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-09"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-05"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-09"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-13"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-01"), waveWallPlane3CurvesSmall.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-13"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-01"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-13"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-01"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-05"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-09"), waveWallPlane3CurvesSmallMirrored.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-05"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-09"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-05"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-09"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-13"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-01"), waveWallPlane3CurvesMedium.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-13"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-01"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-13"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-01"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-05"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-09"), waveWallPlane3CurvesMediumMirrored.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-05"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-09"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-05"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-09"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-13"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-01"), waveWallPlane3CurvesLarge.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-13"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-01"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-13"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-01"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-05"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-09"), waveWallPlane3CurvesLargeMirrored.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-05"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-09"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-05"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-09"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-13"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-01"), curveThenStraightMovementWallPlane.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-13"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-01"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-13"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-01"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-05"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-09"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-05"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-09"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-05"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-09"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-13"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-01"), curvedCrossMovementWallPlaneSmall.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-13"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-01"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-13"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-01"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-05"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-09"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-05"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-09"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-05"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-09"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-13"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-01"), curvedCrossMovementWallPlaneMedium.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-13"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-01"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-13"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-01"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-05"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-09"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-05"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-09"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-05"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-09"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		rotationSingleWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-13"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-01"), rotationSingleWallPlane.getSymbol());

		rotationSingleWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-13"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-01"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());

		rotationSingleWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-13"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-01"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());

		rotationSingleWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-05"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-09"), rotationSingleWallPlaneMirrored.getSymbol());

		rotationSingleWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-05"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-09"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationSingleWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-05"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-09"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationDoubleWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-13"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-01"), rotationDoubleWallPlane.getSymbol());

		rotationDoubleWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-13"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-01"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		rotationDoubleWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-13"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-01"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		rotationDoubleWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-05"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-09"), rotationDoubleWallPlaneMirrored.getSymbol());

		rotationDoubleWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-05"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-09"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationDoubleWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-05"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-09"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationAlternateWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-13"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-01"), rotationAlternateWallPlane.getSymbol());

		rotationAlternateWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-13"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-01"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());

		rotationAlternateWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-13"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-01"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());

		rotationAlternateWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-05"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-09"), rotationAlternateWallPlaneMirrored.getSymbol());

		rotationAlternateWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-05"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-09"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationAlternateWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-05"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-09"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());

		shakingWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-13"), shakingWallPlane.getSymbol());
		shakingWallPlane.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-01"), shakingWallPlane.getSymbol());

		shakingWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-13"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-01"), shakingWallPlaneEmptyArrowhead.getSymbol());

		shakingWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-13"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-01"), shakingWallPlaneSchemaArrowhead.getSymbol());

		shakingWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-05"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-09"), shakingWallPlaneMirrored.getSymbol());

		shakingWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-05"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-09"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());

		shakingWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-05"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.mirrorVertically();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-09"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanPitch() {

		assertFalse(curveWallPlaneQuarterSmall.canPitch());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowhead.canPitch());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowhead.canPitch());
		assertFalse(curveWallPlaneQuarterSmallMirrored.canPitch());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlaneQuarterMedium.canPitch());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowhead.canPitch());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowhead.canPitch());
		assertFalse(curveWallPlaneQuarterMediumMirrored.canPitch());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlaneQuarterLarge.canPitch());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowhead.canPitch());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowhead.canPitch());
		assertFalse(curveWallPlaneQuarterLargeMirrored.canPitch());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlaneQuarterLargest.canPitch());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowhead.canPitch());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowhead.canPitch());
		assertFalse(curveWallPlaneQuarterLargestMirrored.canPitch());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlaneHalfCircleSmall.canPitch());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowhead.canPitch());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowhead.canPitch());
		assertFalse(curveWallPlaneHalfCircleSmallMirrored.canPitch());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlaneHalfCircleMedium.canPitch());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowhead.canPitch());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowhead.canPitch());
		assertFalse(curveWallPlaneHalfCircleMediumMirrored.canPitch());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlaneHalfCircleLarge.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowhead.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowhead.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargeMirrored.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlaneHalfCircleLargest.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowhead.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowhead.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargestMirrored.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlane3QuarterCircleSmall.canPitch());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canPitch());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canPitch());
		assertFalse(curveWallPlane3QuarterCircleSmallMirrored.canPitch());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(curveWallPlane3QuarterCircleMedium.canPitch());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canPitch());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canPitch());
		assertFalse(curveWallPlane3QuarterCircleMediumMirrored.canPitch());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(humpWallPlaneSmall.canPitch());
		assertFalse(humpWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(humpWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(humpWallPlaneSmallMirrored.canPitch());
		assertFalse(humpWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(humpWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(humpWallPlaneMedium.canPitch());
		assertFalse(humpWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(humpWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(humpWallPlaneMediumMirrored.canPitch());
		assertFalse(humpWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(humpWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(humpWallPlaneLarge.canPitch());
		assertFalse(humpWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(humpWallPlaneLargeSchemaArrowhead.canPitch());
		assertFalse(humpWallPlaneLargeMirrored.canPitch());
		assertFalse(humpWallPlaneLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(humpWallPlaneLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(loopWallPlaneSmall.canPitch());
		assertFalse(loopWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(loopWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(loopWallPlaneSmallMirrored.canPitch());
		assertFalse(loopWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(loopWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(loopWallPlaneMedium.canPitch());
		assertFalse(loopWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(loopWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(loopWallPlaneMediumMirrored.canPitch());
		assertFalse(loopWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(loopWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(loopWallPlaneLarge.canPitch());
		assertFalse(loopWallPlaneLargeEmptyArrowhead.canPitch());
		assertFalse(loopWallPlaneLargeSchemaArrowhead.canPitch());
		assertFalse(loopWallPlaneLargeMirrored.canPitch());
		assertFalse(loopWallPlaneLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(loopWallPlaneLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(loopWallPlaneSmallDouble.canPitch());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowhead.canPitch());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowhead.canPitch());
		assertFalse(loopWallPlaneSmallDoubleMirrored.canPitch());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canPitch());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canPitch());

		assertFalse(waveWallPlane2CurvesSmall.canPitch());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowhead.canPitch());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowhead.canPitch());
		assertFalse(waveWallPlane2CurvesSmallMirrored.canPitch());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(waveWallPlane2CurvesMedium.canPitch());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowhead.canPitch());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowhead.canPitch());
		assertFalse(waveWallPlane2CurvesMediumMirrored.canPitch());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(waveWallPlane2CurvesLarge.canPitch());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowhead.canPitch());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowhead.canPitch());
		assertFalse(waveWallPlane2CurvesLargeMirrored.canPitch());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(waveWallPlane3CurvesSmall.canPitch());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowhead.canPitch());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowhead.canPitch());
		assertFalse(waveWallPlane3CurvesSmallMirrored.canPitch());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(waveWallPlane3CurvesMedium.canPitch());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowhead.canPitch());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowhead.canPitch());
		assertFalse(waveWallPlane3CurvesMediumMirrored.canPitch());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(waveWallPlane3CurvesLarge.canPitch());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowhead.canPitch());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowhead.canPitch());
		assertFalse(waveWallPlane3CurvesLargeMirrored.canPitch());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canPitch());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canPitch());

		assertFalse(curveThenStraightMovementWallPlane.canPitch());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowhead.canPitch());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowhead.canPitch());
		assertFalse(curveThenStraightMovementWallPlaneMirrored.canPitch());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(curvedCrossMovementWallPlaneSmall.canPitch());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canPitch());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canPitch());
		assertFalse(curvedCrossMovementWallPlaneSmallMirrored.canPitch());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canPitch());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canPitch());

		assertFalse(curvedCrossMovementWallPlaneMedium.canPitch());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canPitch());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canPitch());
		assertFalse(curvedCrossMovementWallPlaneMediumMirrored.canPitch());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canPitch());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canPitch());

		assertFalse(rotationSingleWallPlane.canPitch());
		assertFalse(rotationSingleWallPlaneEmptyArrowhead.canPitch());
		assertFalse(rotationSingleWallPlaneSchemaArrowhead.canPitch());
		assertFalse(rotationSingleWallPlaneMirrored.canPitch());
		assertFalse(rotationSingleWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(rotationSingleWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(rotationDoubleWallPlane.canPitch());
		assertFalse(rotationDoubleWallPlaneEmptyArrowhead.canPitch());
		assertFalse(rotationDoubleWallPlaneSchemaArrowhead.canPitch());
		assertFalse(rotationDoubleWallPlaneMirrored.canPitch());
		assertFalse(rotationDoubleWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(rotationDoubleWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(rotationAlternateWallPlane.canPitch());
		assertFalse(rotationAlternateWallPlaneEmptyArrowhead.canPitch());
		assertFalse(rotationAlternateWallPlaneSchemaArrowhead.canPitch());
		assertFalse(rotationAlternateWallPlaneMirrored.canPitch());
		assertFalse(rotationAlternateWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(rotationAlternateWallPlaneSchemaArrowheadMirrored.canPitch());

		assertFalse(shakingWallPlane.canPitch());
		assertFalse(shakingWallPlaneEmptyArrowhead.canPitch());
		assertFalse(shakingWallPlaneSchemaArrowhead.canPitch());
		assertFalse(shakingWallPlaneMirrored.canPitch());
		assertFalse(shakingWallPlaneEmptyArrowheadMirrored.canPitch());
		assertFalse(shakingWallPlaneSchemaArrowheadMirrored.canPitch());
	}

	@Override
	public void testPitch() {

	}

	@Override
	public void testCanRoll() {

		assertFalse(curveWallPlaneQuarterSmall.canRoll());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowhead.canRoll());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowhead.canRoll());
		assertFalse(curveWallPlaneQuarterSmallMirrored.canRoll());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlaneQuarterMedium.canRoll());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowhead.canRoll());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowhead.canRoll());
		assertFalse(curveWallPlaneQuarterMediumMirrored.canRoll());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlaneQuarterLarge.canRoll());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowhead.canRoll());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowhead.canRoll());
		assertFalse(curveWallPlaneQuarterLargeMirrored.canRoll());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlaneQuarterLargest.canRoll());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowhead.canRoll());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowhead.canRoll());
		assertFalse(curveWallPlaneQuarterLargestMirrored.canRoll());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlaneHalfCircleSmall.canRoll());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowhead.canRoll());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowhead.canRoll());
		assertFalse(curveWallPlaneHalfCircleSmallMirrored.canRoll());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlaneHalfCircleMedium.canRoll());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowhead.canRoll());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowhead.canRoll());
		assertFalse(curveWallPlaneHalfCircleMediumMirrored.canRoll());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlaneHalfCircleLarge.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowhead.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowhead.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargeMirrored.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlaneHalfCircleLargest.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowhead.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowhead.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargestMirrored.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlane3QuarterCircleSmall.canRoll());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canRoll());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canRoll());
		assertFalse(curveWallPlane3QuarterCircleSmallMirrored.canRoll());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(curveWallPlane3QuarterCircleMedium.canRoll());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canRoll());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canRoll());
		assertFalse(curveWallPlane3QuarterCircleMediumMirrored.canRoll());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(humpWallPlaneSmall.canRoll());
		assertFalse(humpWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(humpWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(humpWallPlaneSmallMirrored.canRoll());
		assertFalse(humpWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(humpWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(humpWallPlaneMedium.canRoll());
		assertFalse(humpWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(humpWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(humpWallPlaneMediumMirrored.canRoll());
		assertFalse(humpWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(humpWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(humpWallPlaneLarge.canRoll());
		assertFalse(humpWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(humpWallPlaneLargeSchemaArrowhead.canRoll());
		assertFalse(humpWallPlaneLargeMirrored.canRoll());
		assertFalse(humpWallPlaneLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(humpWallPlaneLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(loopWallPlaneSmall.canRoll());
		assertFalse(loopWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(loopWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(loopWallPlaneSmallMirrored.canRoll());
		assertFalse(loopWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(loopWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(loopWallPlaneMedium.canRoll());
		assertFalse(loopWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(loopWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(loopWallPlaneMediumMirrored.canRoll());
		assertFalse(loopWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(loopWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(loopWallPlaneLarge.canRoll());
		assertFalse(loopWallPlaneLargeEmptyArrowhead.canRoll());
		assertFalse(loopWallPlaneLargeSchemaArrowhead.canRoll());
		assertFalse(loopWallPlaneLargeMirrored.canRoll());
		assertFalse(loopWallPlaneLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(loopWallPlaneLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(loopWallPlaneSmallDouble.canRoll());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowhead.canRoll());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowhead.canRoll());
		assertFalse(loopWallPlaneSmallDoubleMirrored.canRoll());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canRoll());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canRoll());

		assertFalse(waveWallPlane2CurvesSmall.canRoll());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowhead.canRoll());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowhead.canRoll());
		assertFalse(waveWallPlane2CurvesSmallMirrored.canRoll());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(waveWallPlane2CurvesMedium.canRoll());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowhead.canRoll());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowhead.canRoll());
		assertFalse(waveWallPlane2CurvesMediumMirrored.canRoll());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(waveWallPlane2CurvesLarge.canRoll());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowhead.canRoll());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowhead.canRoll());
		assertFalse(waveWallPlane2CurvesLargeMirrored.canRoll());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(waveWallPlane3CurvesSmall.canRoll());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowhead.canRoll());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowhead.canRoll());
		assertFalse(waveWallPlane3CurvesSmallMirrored.canRoll());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(waveWallPlane3CurvesMedium.canRoll());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowhead.canRoll());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowhead.canRoll());
		assertFalse(waveWallPlane3CurvesMediumMirrored.canRoll());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(waveWallPlane3CurvesLarge.canRoll());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowhead.canRoll());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowhead.canRoll());
		assertFalse(waveWallPlane3CurvesLargeMirrored.canRoll());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canRoll());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canRoll());

		assertFalse(curveThenStraightMovementWallPlane.canRoll());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowhead.canRoll());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowhead.canRoll());
		assertFalse(curveThenStraightMovementWallPlaneMirrored.canRoll());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(curvedCrossMovementWallPlaneSmall.canRoll());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canRoll());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canRoll());
		assertFalse(curvedCrossMovementWallPlaneSmallMirrored.canRoll());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canRoll());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canRoll());

		assertFalse(curvedCrossMovementWallPlaneMedium.canRoll());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canRoll());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canRoll());
		assertFalse(curvedCrossMovementWallPlaneMediumMirrored.canRoll());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canRoll());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canRoll());

		assertFalse(rotationSingleWallPlane.canRoll());
		assertFalse(rotationSingleWallPlaneEmptyArrowhead.canRoll());
		assertFalse(rotationSingleWallPlaneSchemaArrowhead.canRoll());
		assertFalse(rotationSingleWallPlaneMirrored.canRoll());
		assertFalse(rotationSingleWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(rotationSingleWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(rotationDoubleWallPlane.canRoll());
		assertFalse(rotationDoubleWallPlaneEmptyArrowhead.canRoll());
		assertFalse(rotationDoubleWallPlaneSchemaArrowhead.canRoll());
		assertFalse(rotationDoubleWallPlaneMirrored.canRoll());
		assertFalse(rotationDoubleWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(rotationDoubleWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(rotationAlternateWallPlane.canRoll());
		assertFalse(rotationAlternateWallPlaneEmptyArrowhead.canRoll());
		assertFalse(rotationAlternateWallPlaneSchemaArrowhead.canRoll());
		assertFalse(rotationAlternateWallPlaneMirrored.canRoll());
		assertFalse(rotationAlternateWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(rotationAlternateWallPlaneSchemaArrowheadMirrored.canRoll());

		assertFalse(shakingWallPlane.canRoll());
		assertFalse(shakingWallPlaneEmptyArrowhead.canRoll());
		assertFalse(shakingWallPlaneSchemaArrowhead.canRoll());
		assertFalse(shakingWallPlaneMirrored.canRoll());
		assertFalse(shakingWallPlaneEmptyArrowheadMirrored.canRoll());
		assertFalse(shakingWallPlaneSchemaArrowheadMirrored.canRoll());
	}

	@Override
	public void testRoll() {

	}

	@Override
	public void testCanSwitchArrowHead() {

		assertTrue(curveWallPlaneQuarterSmall.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterSmallMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlaneQuarterMedium.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterMediumMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlaneQuarterLarge.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargeMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlaneQuarterLargest.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargestEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargestSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargestMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlaneHalfCircleSmall.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleSmallMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlaneHalfCircleMedium.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleMediumMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlaneHalfCircleLarge.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargeMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlaneHalfCircleLargest.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargestEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargestSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargestMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlane3QuarterCircleSmall.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleSmallMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveWallPlane3QuarterCircleMedium.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleMediumMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(humpWallPlaneSmall.canSwitchArrowHead());
		assertTrue(humpWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(humpWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(humpWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(humpWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(humpWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(humpWallPlaneMedium.canSwitchArrowHead());
		assertTrue(humpWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(humpWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(humpWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(humpWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(humpWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(humpWallPlaneLarge.canSwitchArrowHead());
		assertTrue(humpWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(humpWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(humpWallPlaneLargeMirrored.canSwitchArrowHead());
		assertTrue(humpWallPlaneLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(humpWallPlaneLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(loopWallPlaneSmall.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(loopWallPlaneMedium.canSwitchArrowHead());
		assertTrue(loopWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(loopWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(loopWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(loopWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(loopWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(loopWallPlaneLarge.canSwitchArrowHead());
		assertTrue(loopWallPlaneLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(loopWallPlaneLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(loopWallPlaneLargeMirrored.canSwitchArrowHead());
		assertTrue(loopWallPlaneLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(loopWallPlaneLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(loopWallPlaneSmallDouble.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowhead.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowhead.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallDoubleMirrored.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(waveWallPlane2CurvesSmall.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesSmallMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(waveWallPlane2CurvesMedium.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesMediumMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(waveWallPlane2CurvesLarge.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesLargeMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(waveWallPlane3CurvesSmall.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesSmallMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(waveWallPlane3CurvesMedium.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesMediumMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(waveWallPlane3CurvesLarge.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesLargeEmptyArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesLargeSchemaArrowhead.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesLargeMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curveThenStraightMovementWallPlane.canSwitchArrowHead());
		assertTrue(curveThenStraightMovementWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curveThenStraightMovementWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curveThenStraightMovementWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curvedCrossMovementWallPlaneSmall.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneSmallMirrored.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(curvedCrossMovementWallPlaneMedium.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneMediumMirrored.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(rotationSingleWallPlane.canSwitchArrowHead());
		assertTrue(rotationSingleWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(rotationSingleWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(rotationSingleWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(rotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(rotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(rotationDoubleWallPlane.canSwitchArrowHead());
		assertTrue(rotationDoubleWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(rotationDoubleWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(rotationDoubleWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(rotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(rotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(rotationAlternateWallPlane.canSwitchArrowHead());
		assertTrue(rotationAlternateWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(rotationAlternateWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(rotationAlternateWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(rotationAlternateWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(rotationAlternateWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

		assertTrue(shakingWallPlane.canSwitchArrowHead());
		assertTrue(shakingWallPlaneEmptyArrowhead.canSwitchArrowHead());
		assertTrue(shakingWallPlaneSchemaArrowhead.canSwitchArrowHead());
		assertTrue(shakingWallPlaneMirrored.canSwitchArrowHead());
		assertTrue(shakingWallPlaneEmptyArrowheadMirrored.canSwitchArrowHead());
		assertTrue(shakingWallPlaneSchemaArrowheadMirrored.canSwitchArrowHead());

	}

	@Override
	public void testSwitchArrowHead() {

		curveWallPlaneQuarterSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-01"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-01"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-01"), curveWallPlaneQuarterSmall.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-01"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-01"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-01"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-01"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-01"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-01"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-09"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-09"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-09"), curveWallPlaneQuarterSmallMirrored.getSymbol());

		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-09"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-09"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-09"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-01-09"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-02-09"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-01-03-09"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-01"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-01"), curveWallPlaneQuarterMedium.getSymbol());
		curveWallPlaneQuarterMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-01"), curveWallPlaneQuarterMedium.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-01"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-01"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-01"),
				curveWallPlaneQuarterMediumEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-01"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-01"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-01"),
				curveWallPlaneQuarterMediumSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-09"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-09"), curveWallPlaneQuarterMediumMirrored.getSymbol());
		curveWallPlaneQuarterMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-09"), curveWallPlaneQuarterMediumMirrored.getSymbol());

		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-09"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-09"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-09"),
				curveWallPlaneQuarterMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-01-09"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-02-09"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-02-03-09"),
				curveWallPlaneQuarterMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-01"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-01"), curveWallPlaneQuarterLarge.getSymbol());
		curveWallPlaneQuarterLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-01"), curveWallPlaneQuarterLarge.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-01"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-01"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-01"),
				curveWallPlaneQuarterLargeEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-01"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-01"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-01"),
				curveWallPlaneQuarterLargeSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-09"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-09"), curveWallPlaneQuarterLargeMirrored.getSymbol());
		curveWallPlaneQuarterLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-09"), curveWallPlaneQuarterLargeMirrored.getSymbol());

		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-09"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-09"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-09"),
				curveWallPlaneQuarterLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-01-09"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-02-09"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-03-03-09"),
				curveWallPlaneQuarterLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-01"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-01"), curveWallPlaneQuarterLargest.getSymbol());
		curveWallPlaneQuarterLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-01"), curveWallPlaneQuarterLargest.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-01"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-01"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-01"),
				curveWallPlaneQuarterLargestEmptyArrowhead.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-01"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-01"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-01"),
				curveWallPlaneQuarterLargestSchemaArrowhead.getSymbol());

		curveWallPlaneQuarterLargestMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-09"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-09"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());
		curveWallPlaneQuarterLargestMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-09"),
				curveWallPlaneQuarterLargestMirrored.getSymbol());

		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-09"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-09"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-09"),
				curveWallPlaneQuarterLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-01-09"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-02-09"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterLargestSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-001-04-03-09"),
				curveWallPlaneQuarterLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-01"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-01"), curveWallPlaneHalfCircleSmall.getSymbol());
		curveWallPlaneHalfCircleSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-01"), curveWallPlaneHalfCircleSmall.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-01"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-01"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-01"),
				curveWallPlaneHalfCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-01"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-01"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-01"),
				curveWallPlaneHalfCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-09"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-09"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-09"),
				curveWallPlaneHalfCircleSmallMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-09"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-09"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-09"),
				curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-01-09"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-02-09"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-01-03-09"),
				curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-01"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-01"), curveWallPlaneHalfCircleMedium.getSymbol());
		curveWallPlaneHalfCircleMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-01"), curveWallPlaneHalfCircleMedium.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-01"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-01"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-01"),
				curveWallPlaneHalfCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-01"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-01"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-01"),
				curveWallPlaneHalfCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-09"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-09"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-09"),
				curveWallPlaneHalfCircleMediumMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-09"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-09"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-09"),
				curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-01-09"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-02-09"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-02-03-09"),
				curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-01"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-01"), curveWallPlaneHalfCircleLarge.getSymbol());
		curveWallPlaneHalfCircleLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-01"), curveWallPlaneHalfCircleLarge.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-01"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-01"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-01"),
				curveWallPlaneHalfCircleLargeEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-01"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-01"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-01"),
				curveWallPlaneHalfCircleLargeSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-09"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-09"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-09"),
				curveWallPlaneHalfCircleLargeMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-09"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-09"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-09"),
				curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-01-09"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-02-09"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-03-03-09"),
				curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-01"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-01"), curveWallPlaneHalfCircleLargest.getSymbol());
		curveWallPlaneHalfCircleLargest.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-01"), curveWallPlaneHalfCircleLargest.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-01"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-01"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-01"),
				curveWallPlaneHalfCircleLargestEmptyArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-01"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-01"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-01"),
				curveWallPlaneHalfCircleLargestSchemaArrowhead.getSymbol());

		curveWallPlaneHalfCircleLargestMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-09"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-09"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-09"),
				curveWallPlaneHalfCircleLargestMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-09"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-09"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-09"),
				curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.getSymbol());

		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-01-09"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-02-09"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());
		curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-002-04-03-09"),
				curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-01"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-01"), curveWallPlane3QuarterCircleSmall.getSymbol());
		curveWallPlane3QuarterCircleSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-01"), curveWallPlane3QuarterCircleSmall.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-01"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-01"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-01"),
				curveWallPlane3QuarterCircleSmallEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-01"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-01"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-01"),
				curveWallPlane3QuarterCircleSmallSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-09"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-09"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-09"),
				curveWallPlane3QuarterCircleSmallMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-09"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-09"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-09"),
				curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-01-09"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-02-09"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-01-03-09"),
				curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-01"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-01"), curveWallPlane3QuarterCircleMedium.getSymbol());
		curveWallPlane3QuarterCircleMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-01"), curveWallPlane3QuarterCircleMedium.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-01"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-01"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-01"),
				curveWallPlane3QuarterCircleMediumEmptyArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-01"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-01"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-01"),
				curveWallPlane3QuarterCircleMediumSchemaArrowhead.getSymbol());

		curveWallPlane3QuarterCircleMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-09"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-09"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-09"),
				curveWallPlane3QuarterCircleMediumMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-09"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-09"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-09"),
				curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.getSymbol());

		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-01-09"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-02-09"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());
		curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-003-02-03-09"),
				curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-01"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-01"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-01"), humpWallPlaneSmall.getSymbol());

		humpWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-01"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-01"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-01"), humpWallPlaneSmallEmptyArrowhead.getSymbol());

		humpWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-01"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-01"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-01"), humpWallPlaneSmallSchemaArrowhead.getSymbol());

		humpWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-09"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-09"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-09"), humpWallPlaneSmallMirrored.getSymbol());

		humpWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-09"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-09"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-09"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-01-09"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-02-09"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-01-03-09"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-01"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-01"), humpWallPlaneMedium.getSymbol());
		humpWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-01"), humpWallPlaneMedium.getSymbol());

		humpWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-01"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-01"), humpWallPlaneMediumEmptyArrowhead.getSymbol());
		humpWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-01"), humpWallPlaneMediumEmptyArrowhead.getSymbol());

		humpWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-01"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-01"), humpWallPlaneMediumSchemaArrowhead.getSymbol());
		humpWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-01"), humpWallPlaneMediumSchemaArrowhead.getSymbol());

		humpWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-09"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-09"), humpWallPlaneMediumMirrored.getSymbol());
		humpWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-09"), humpWallPlaneMediumMirrored.getSymbol());

		humpWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-09"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-09"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-09"),
				humpWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-01-09"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-02-09"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-02-03-09"),
				humpWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-01"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-01"), humpWallPlaneLarge.getSymbol());
		humpWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-01"), humpWallPlaneLarge.getSymbol());

		humpWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-01"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-01"), humpWallPlaneLargeEmptyArrowhead.getSymbol());
		humpWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-01"), humpWallPlaneLargeEmptyArrowhead.getSymbol());

		humpWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-01"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-01"), humpWallPlaneLargeSchemaArrowhead.getSymbol());
		humpWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-01"), humpWallPlaneLargeSchemaArrowhead.getSymbol());

		humpWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-09"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-09"), humpWallPlaneLargeMirrored.getSymbol());
		humpWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-09"), humpWallPlaneLargeMirrored.getSymbol());

		humpWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-09"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-09"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-09"),
				humpWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		humpWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-01-09"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-02-09"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		humpWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-004-03-03-09"),
				humpWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-01"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-01"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-01"), loopWallPlaneSmall.getSymbol());

		loopWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-01"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-01"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-01"), loopWallPlaneSmallEmptyArrowhead.getSymbol());

		loopWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-01"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-01"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-01"), loopWallPlaneSmallSchemaArrowhead.getSymbol());

		loopWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-09"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-09"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-09"), loopWallPlaneSmallMirrored.getSymbol());

		loopWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-09"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-09"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-09"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-01-09"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-02-09"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-01-03-09"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-01"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-01"), loopWallPlaneMedium.getSymbol());
		loopWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-01"), loopWallPlaneMedium.getSymbol());

		loopWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-01"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-01"), loopWallPlaneMediumEmptyArrowhead.getSymbol());
		loopWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-01"), loopWallPlaneMediumEmptyArrowhead.getSymbol());

		loopWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-01"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-01"), loopWallPlaneMediumSchemaArrowhead.getSymbol());
		loopWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-01"), loopWallPlaneMediumSchemaArrowhead.getSymbol());

		loopWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-09"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-09"), loopWallPlaneMediumMirrored.getSymbol());
		loopWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-09"), loopWallPlaneMediumMirrored.getSymbol());

		loopWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-09"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-09"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-09"),
				loopWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-01-09"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-02-09"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-02-03-09"),
				loopWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-01"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-01"), loopWallPlaneLarge.getSymbol());
		loopWallPlaneLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-01"), loopWallPlaneLarge.getSymbol());

		loopWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-01"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-01"), loopWallPlaneLargeEmptyArrowhead.getSymbol());
		loopWallPlaneLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-01"), loopWallPlaneLargeEmptyArrowhead.getSymbol());

		loopWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-01"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-01"), loopWallPlaneLargeSchemaArrowhead.getSymbol());
		loopWallPlaneLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-01"), loopWallPlaneLargeSchemaArrowhead.getSymbol());

		loopWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-09"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-09"), loopWallPlaneLargeMirrored.getSymbol());
		loopWallPlaneLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-09"), loopWallPlaneLargeMirrored.getSymbol());

		loopWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-09"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-09"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-09"),
				loopWallPlaneLargeEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-01-09"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-02-09"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-03-03-09"),
				loopWallPlaneLargeSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDouble.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-01"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-01"), loopWallPlaneSmallDouble.getSymbol());
		loopWallPlaneSmallDouble.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-01"), loopWallPlaneSmallDouble.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-01"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-01"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-01"),
				loopWallPlaneSmallDoubleEmptyArrowhead.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-01"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-01"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-01"),
				loopWallPlaneSmallDoubleSchemaArrowhead.getSymbol());

		loopWallPlaneSmallDoubleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-09"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-09"), loopWallPlaneSmallDoubleMirrored.getSymbol());
		loopWallPlaneSmallDoubleMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-09"), loopWallPlaneSmallDoubleMirrored.getSymbol());

		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-09"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-09"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-09"),
				loopWallPlaneSmallDoubleEmptyArrowheadMirrored.getSymbol());

		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-01-09"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-02-09"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());
		loopWallPlaneSmallDoubleSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-005-04-03-09"),
				loopWallPlaneSmallDoubleSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-01"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-01"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-01"), waveWallPlane2CurvesSmall.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-01"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-01"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-01"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-01"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-01"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-01"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-09"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-09"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-09"), waveWallPlane2CurvesSmallMirrored.getSymbol());

		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-09"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-09"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-09"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-01-09"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-02-09"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-01-03-09"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-01"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-01"), waveWallPlane2CurvesMedium.getSymbol());
		waveWallPlane2CurvesMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-01"), waveWallPlane2CurvesMedium.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-01"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-01"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-01"),
				waveWallPlane2CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-01"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-01"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-01"),
				waveWallPlane2CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-09"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-09"), waveWallPlane2CurvesMediumMirrored.getSymbol());
		waveWallPlane2CurvesMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-09"), waveWallPlane2CurvesMediumMirrored.getSymbol());

		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-09"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-09"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-09"),
				waveWallPlane2CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-01-09"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-02-09"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-02-03-09"),
				waveWallPlane2CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-01"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-01"), waveWallPlane2CurvesLarge.getSymbol());
		waveWallPlane2CurvesLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-01"), waveWallPlane2CurvesLarge.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-01"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-01"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-01"),
				waveWallPlane2CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-01"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-01"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-01"),
				waveWallPlane2CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane2CurvesLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-09"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-09"), waveWallPlane2CurvesLargeMirrored.getSymbol());
		waveWallPlane2CurvesLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-09"), waveWallPlane2CurvesLargeMirrored.getSymbol());

		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-09"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-09"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-09"),
				waveWallPlane2CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-01-09"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-02-09"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-03-03-09"),
				waveWallPlane2CurvesLargeSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-01"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-01"), waveWallPlane3CurvesSmall.getSymbol());
		waveWallPlane3CurvesSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-01"), waveWallPlane3CurvesSmall.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-01"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-01"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-01"),
				waveWallPlane3CurvesSmallEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-01"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-01"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-01"),
				waveWallPlane3CurvesSmallSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-09"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-09"), waveWallPlane3CurvesSmallMirrored.getSymbol());
		waveWallPlane3CurvesSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-09"), waveWallPlane3CurvesSmallMirrored.getSymbol());

		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-09"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-09"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-09"),
				waveWallPlane3CurvesSmallEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-01-09"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-02-09"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-04-03-09"),
				waveWallPlane3CurvesSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-01"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-01"), waveWallPlane3CurvesMedium.getSymbol());
		waveWallPlane3CurvesMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-01"), waveWallPlane3CurvesMedium.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-01"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-01"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-01"),
				waveWallPlane3CurvesMediumEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-01"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-01"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-01"),
				waveWallPlane3CurvesMediumSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-09"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-09"), waveWallPlane3CurvesMediumMirrored.getSymbol());
		waveWallPlane3CurvesMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-09"), waveWallPlane3CurvesMediumMirrored.getSymbol());

		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-09"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-09"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-09"),
				waveWallPlane3CurvesMediumEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-01-09"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-02-09"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-05-03-09"),
				waveWallPlane3CurvesMediumSchemaArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-01"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-01"), waveWallPlane3CurvesLarge.getSymbol());
		waveWallPlane3CurvesLarge.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-01"), waveWallPlane3CurvesLarge.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-01"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-01"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-01"),
				waveWallPlane3CurvesLargeEmptyArrowhead.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-01"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-01"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-01"),
				waveWallPlane3CurvesLargeSchemaArrowhead.getSymbol());

		waveWallPlane3CurvesLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-09"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-09"), waveWallPlane3CurvesLargeMirrored.getSymbol());
		waveWallPlane3CurvesLargeMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-09"), waveWallPlane3CurvesLargeMirrored.getSymbol());

		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-09"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-09"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-09"),
				waveWallPlane3CurvesLargeEmptyArrowheadMirrored.getSymbol());

		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-01-09"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-02-09"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());
		waveWallPlane3CurvesLargeSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-006-06-03-09"),
				waveWallPlane3CurvesLargeSchemaArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-01"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-01"), curveThenStraightMovementWallPlane.getSymbol());
		curveThenStraightMovementWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-01"), curveThenStraightMovementWallPlane.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-01"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-01"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-01"),
				curveThenStraightMovementWallPlaneEmptyArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-01"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-01"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-01"),
				curveThenStraightMovementWallPlaneSchemaArrowhead.getSymbol());

		curveThenStraightMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-09"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-09"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());
		curveThenStraightMovementWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-09"),
				curveThenStraightMovementWallPlaneMirrored.getSymbol());

		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-09"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-09"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-09"),
				curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.getSymbol());

		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-01-09"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-02-09"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());
		curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-01-03-09"),
				curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-01"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-01"), curvedCrossMovementWallPlaneSmall.getSymbol());
		curvedCrossMovementWallPlaneSmall.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-01"), curvedCrossMovementWallPlaneSmall.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-01"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-01"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-01"),
				curvedCrossMovementWallPlaneSmallEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-01"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-01"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-01"),
				curvedCrossMovementWallPlaneSmallSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-09"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-09"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-09"),
				curvedCrossMovementWallPlaneSmallMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-09"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-09"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-09"),
				curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-01-09"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-02-09"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-02-03-09"),
				curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-01"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-01"), curvedCrossMovementWallPlaneMedium.getSymbol());
		curvedCrossMovementWallPlaneMedium.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-01"), curvedCrossMovementWallPlaneMedium.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-01"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-01"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-01"),
				curvedCrossMovementWallPlaneMediumEmptyArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-01"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-01"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-01"),
				curvedCrossMovementWallPlaneMediumSchemaArrowhead.getSymbol());

		curvedCrossMovementWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-09"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-09"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-09"),
				curvedCrossMovementWallPlaneMediumMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-09"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-09"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-09"),
				curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.getSymbol());

		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-01-09"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-02-09"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());
		curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-007-03-03-09"),
				curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.getSymbol());

		rotationSingleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-01"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-01"), rotationSingleWallPlane.getSymbol());
		rotationSingleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-01"), rotationSingleWallPlane.getSymbol());

		rotationSingleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-01"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-01"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());
		rotationSingleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-01"),
				rotationSingleWallPlaneEmptyArrowhead.getSymbol());

		rotationSingleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-01"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-01"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());
		rotationSingleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-01"),
				rotationSingleWallPlaneSchemaArrowhead.getSymbol());

		rotationSingleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-09"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-09"), rotationSingleWallPlaneMirrored.getSymbol());
		rotationSingleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-09"), rotationSingleWallPlaneMirrored.getSymbol());

		rotationSingleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-09"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-09"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-09"),
				rotationSingleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationSingleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-01-09"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-02-09"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationSingleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-008-01-03-09"),
				rotationSingleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationDoubleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-01"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-01"), rotationDoubleWallPlane.getSymbol());
		rotationDoubleWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-01"), rotationDoubleWallPlane.getSymbol());

		rotationDoubleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-01"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-01"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());
		rotationDoubleWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-01"),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		rotationDoubleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-01"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-01"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());
		rotationDoubleWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-01"),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		rotationDoubleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-09"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-09"), rotationDoubleWallPlaneMirrored.getSymbol());
		rotationDoubleWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-09"), rotationDoubleWallPlaneMirrored.getSymbol());

		rotationDoubleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-09"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-09"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-09"),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationDoubleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-01-09"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-02-09"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationDoubleWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-009-01-03-09"),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

		rotationAlternateWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-01"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-01"), rotationAlternateWallPlane.getSymbol());
		rotationAlternateWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-01"), rotationAlternateWallPlane.getSymbol());

		rotationAlternateWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-01"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-01"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());
		rotationAlternateWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-01"),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());

		rotationAlternateWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-01"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-01"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());
		rotationAlternateWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-01"),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());

		rotationAlternateWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-09"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-09"), rotationAlternateWallPlaneMirrored.getSymbol());
		rotationAlternateWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-09"), rotationAlternateWallPlaneMirrored.getSymbol());

		rotationAlternateWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-09"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-09"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-09"),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationAlternateWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-01-09"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-02-09"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());
		rotationAlternateWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-010-01-03-09"),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());

		shakingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-01"), shakingWallPlane.getSymbol());
		shakingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-01"), shakingWallPlane.getSymbol());
		shakingWallPlane.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-01"), shakingWallPlane.getSymbol());

		shakingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-01"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-01"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneEmptyArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-01"), shakingWallPlaneEmptyArrowhead.getSymbol());

		shakingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-01"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-01"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-01"), shakingWallPlaneSchemaArrowhead.getSymbol());

		shakingWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-09"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-09"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-09"), shakingWallPlaneMirrored.getSymbol());

		shakingWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-09"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-09"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-09"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());

		shakingWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-01-09"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-02-09"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.switchArrowHead();
		assertEquals(symbolFactory.createSymbol("02-06-011-01-03-09"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanSwitchToNormalArrows() {

		assertFalse(curveWallPlaneQuarterSmall.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterSmallMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlaneQuarterMedium.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterMediumMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlaneQuarterLarge.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargeMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlaneQuarterLargest.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargestMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlaneHalfCircleSmall.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleSmallMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlaneHalfCircleMedium.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleMediumMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlaneHalfCircleLarge.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargeMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlaneHalfCircleLargest.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargestMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlane3QuarterCircleSmall.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveWallPlane3QuarterCircleMedium.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(humpWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(humpWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(humpWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneLargeMirrored.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(humpWallPlaneLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(loopWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(loopWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(loopWallPlaneLarge.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneLargeMirrored.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(loopWallPlaneSmallDouble.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallDoubleMirrored.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(waveWallPlane2CurvesSmall.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesSmallMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(waveWallPlane2CurvesMedium.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesMediumMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(waveWallPlane2CurvesLarge.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesLargeMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(waveWallPlane3CurvesSmall.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesSmallMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(waveWallPlane3CurvesMedium.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesMediumMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(waveWallPlane3CurvesLarge.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesLargeMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curveThenStraightMovementWallPlane.canSwitchToNormalArrows());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curveThenStraightMovementWallPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curvedCrossMovementWallPlaneSmall.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallMirrored.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(curvedCrossMovementWallPlaneMedium.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumMirrored.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(rotationSingleWallPlane.canSwitchToNormalArrows());
		assertFalse(rotationSingleWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(rotationSingleWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(rotationSingleWallPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(rotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(rotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(rotationDoubleWallPlane.canSwitchToNormalArrows());
		assertFalse(rotationDoubleWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(rotationDoubleWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(rotationDoubleWallPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(rotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(rotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertTrue(rotationAlternateWallPlane.canSwitchToNormalArrows());
		assertTrue(rotationAlternateWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertTrue(rotationAlternateWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertTrue(rotationAlternateWallPlaneMirrored.canSwitchToNormalArrows());
		assertTrue(rotationAlternateWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertTrue(rotationAlternateWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());

		assertFalse(shakingWallPlane.canSwitchToNormalArrows());
		assertFalse(shakingWallPlaneEmptyArrowhead.canSwitchToNormalArrows());
		assertFalse(shakingWallPlaneSchemaArrowhead.canSwitchToNormalArrows());
		assertFalse(shakingWallPlaneMirrored.canSwitchToNormalArrows());
		assertFalse(shakingWallPlaneEmptyArrowheadMirrored.canSwitchToNormalArrows());
		assertFalse(shakingWallPlaneSchemaArrowheadMirrored.canSwitchToNormalArrows());
	}

	@Override
	public void testSwitchToNormalArrows() {

		rotationAlternateWallPlane.switchToNormalArrows();
		assertEquals(rotationDoubleWallPlane.getSymbol(), rotationAlternateWallPlane.getSymbol());

		rotationAlternateWallPlaneEmptyArrowhead.switchToNormalArrows();
		assertEquals(rotationDoubleWallPlaneEmptyArrowhead.getSymbol(),
				rotationAlternateWallPlaneEmptyArrowhead.getSymbol());

		rotationAlternateWallPlaneSchemaArrowhead.switchToNormalArrows();
		assertEquals(rotationDoubleWallPlaneSchemaArrowhead.getSymbol(),
				rotationAlternateWallPlaneSchemaArrowhead.getSymbol());

		rotationAlternateWallPlaneMirrored.switchToNormalArrows();
		assertEquals(rotationDoubleWallPlaneMirrored.getSymbol(), rotationAlternateWallPlaneMirrored.getSymbol());

		rotationAlternateWallPlaneEmptyArrowheadMirrored.switchToNormalArrows();
		assertEquals(rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol(),
				rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationAlternateWallPlaneSchemaArrowheadMirrored.switchToNormalArrows();
		assertEquals(rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol(),
				rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanSwitchToAlternatingArrows() {

		assertFalse(curveWallPlaneQuarterSmall.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlaneQuarterMedium.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlaneQuarterLarge.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlaneQuarterLargest.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargestMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlaneHalfCircleSmall.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlaneHalfCircleMedium.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlaneHalfCircleLarge.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlaneHalfCircleLargest.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargestMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlane3QuarterCircleSmall.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveWallPlane3QuarterCircleMedium.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(humpWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(humpWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(humpWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(humpWallPlaneLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(loopWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(loopWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(loopWallPlaneLarge.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(loopWallPlaneSmallDouble.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallDoubleMirrored.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(waveWallPlane2CurvesSmall.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(waveWallPlane2CurvesMedium.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(waveWallPlane2CurvesLarge.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(waveWallPlane3CurvesSmall.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(waveWallPlane3CurvesMedium.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(waveWallPlane3CurvesLarge.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesLargeMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curveThenStraightMovementWallPlane.canSwitchToAlternatingArrows());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curveThenStraightMovementWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curvedCrossMovementWallPlaneSmall.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallMirrored.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(curvedCrossMovementWallPlaneMedium.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumMirrored.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(rotationSingleWallPlane.canSwitchToAlternatingArrows());
		assertFalse(rotationSingleWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(rotationSingleWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(rotationSingleWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(rotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(rotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertTrue(rotationDoubleWallPlane.canSwitchToAlternatingArrows());
		assertTrue(rotationDoubleWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertTrue(rotationDoubleWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertTrue(rotationDoubleWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertTrue(rotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertTrue(rotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(rotationAlternateWallPlane.canSwitchToAlternatingArrows());
		assertFalse(rotationAlternateWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(rotationAlternateWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(rotationAlternateWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(rotationAlternateWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(rotationAlternateWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

		assertFalse(shakingWallPlane.canSwitchToAlternatingArrows());
		assertFalse(shakingWallPlaneEmptyArrowhead.canSwitchToAlternatingArrows());
		assertFalse(shakingWallPlaneSchemaArrowhead.canSwitchToAlternatingArrows());
		assertFalse(shakingWallPlaneMirrored.canSwitchToAlternatingArrows());
		assertFalse(shakingWallPlaneEmptyArrowheadMirrored.canSwitchToAlternatingArrows());
		assertFalse(shakingWallPlaneSchemaArrowheadMirrored.canSwitchToAlternatingArrows());

	}

	@Override
	public void testSwitchToAlternatingArrows() {
		rotationDoubleWallPlane.switchToAlternatingArrows();
		assertEquals(rotationAlternateWallPlane.getSymbol(), rotationDoubleWallPlane.getSymbol());

		rotationDoubleWallPlaneEmptyArrowhead.switchToAlternatingArrows();
		assertEquals(rotationAlternateWallPlaneEmptyArrowhead.getSymbol(),
				rotationDoubleWallPlaneEmptyArrowhead.getSymbol());

		rotationDoubleWallPlaneSchemaArrowhead.switchToAlternatingArrows();
		assertEquals(rotationAlternateWallPlaneSchemaArrowhead.getSymbol(),
				rotationDoubleWallPlaneSchemaArrowhead.getSymbol());

		rotationDoubleWallPlaneMirrored.switchToAlternatingArrows();
		assertEquals(rotationAlternateWallPlaneMirrored.getSymbol(), rotationDoubleWallPlaneMirrored.getSymbol());

		rotationDoubleWallPlaneEmptyArrowheadMirrored.switchToAlternatingArrows();
		assertEquals(rotationAlternateWallPlaneEmptyArrowheadMirrored.getSymbol(),
				rotationDoubleWallPlaneEmptyArrowheadMirrored.getSymbol());

		rotationDoubleWallPlaneSchemaArrowheadMirrored.switchToAlternatingArrows();
		assertEquals(rotationAlternateWallPlaneSchemaArrowheadMirrored.getSymbol(),
				rotationDoubleWallPlaneSchemaArrowheadMirrored.getSymbol());

	}

	@Override
	public void testCanSwitchStartingPoint() {

		assertFalse(curveWallPlaneQuarterSmall.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterSmallMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlaneQuarterMedium.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterMediumMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlaneQuarterLarge.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargeMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlaneQuarterLargest.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargestMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlaneHalfCircleSmall.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleSmallMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlaneHalfCircleMedium.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleMediumMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlaneHalfCircleLarge.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargeMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlaneHalfCircleLargest.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargestMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlane3QuarterCircleSmall.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleSmallMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveWallPlane3QuarterCircleMedium.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleMediumMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(humpWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(humpWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(humpWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(humpWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(humpWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(humpWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(humpWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(humpWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(humpWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(humpWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(humpWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(humpWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(humpWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(humpWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(humpWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(humpWallPlaneLargeMirrored.canSwitchStartingPoint());
		assertFalse(humpWallPlaneLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(humpWallPlaneLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(loopWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(loopWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(loopWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(loopWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(loopWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(loopWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(loopWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(loopWallPlaneLarge.canSwitchStartingPoint());
		assertFalse(loopWallPlaneLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(loopWallPlaneLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(loopWallPlaneLargeMirrored.canSwitchStartingPoint());
		assertFalse(loopWallPlaneLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(loopWallPlaneLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(loopWallPlaneSmallDouble.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallDoubleMirrored.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(waveWallPlane2CurvesSmall.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesSmallMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(waveWallPlane2CurvesMedium.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesMediumMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(waveWallPlane2CurvesLarge.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesLargeMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(waveWallPlane3CurvesSmall.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesSmallMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(waveWallPlane3CurvesMedium.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesMediumMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(waveWallPlane3CurvesLarge.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesLargeMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curveThenStraightMovementWallPlane.canSwitchStartingPoint());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curveThenStraightMovementWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curvedCrossMovementWallPlaneSmall.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneSmallMirrored.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(curvedCrossMovementWallPlaneMedium.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneMediumMirrored.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(rotationSingleWallPlane.canSwitchStartingPoint());
		assertFalse(rotationSingleWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(rotationSingleWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(rotationSingleWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(rotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(rotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(rotationDoubleWallPlane.canSwitchStartingPoint());
		assertFalse(rotationDoubleWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(rotationDoubleWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(rotationDoubleWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(rotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(rotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(rotationAlternateWallPlane.canSwitchStartingPoint());
		assertFalse(rotationAlternateWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(rotationAlternateWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(rotationAlternateWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(rotationAlternateWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(rotationAlternateWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

		assertFalse(shakingWallPlane.canSwitchStartingPoint());
		assertFalse(shakingWallPlaneEmptyArrowhead.canSwitchStartingPoint());
		assertFalse(shakingWallPlaneSchemaArrowhead.canSwitchStartingPoint());
		assertFalse(shakingWallPlaneMirrored.canSwitchStartingPoint());
		assertFalse(shakingWallPlaneEmptyArrowheadMirrored.canSwitchStartingPoint());
		assertFalse(shakingWallPlaneSchemaArrowheadMirrored.canSwitchStartingPoint());

	}

	@Override
	public void testSwitchStartingPoint() {

	}

	@Override
	public void testCanSwitchPlane() {

		assertTrue(curveWallPlaneQuarterSmall.canSwitchPlane());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowhead.canSwitchPlane());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowhead.canSwitchPlane());
		assertTrue(curveWallPlaneQuarterSmallMirrored.canSwitchPlane());
		assertTrue(curveWallPlaneQuarterSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(curveWallPlaneQuarterSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlaneQuarterMedium.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterMediumMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlaneQuarterLarge.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargeMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlaneQuarterLargest.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargestMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargestEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneQuarterLargestSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlaneHalfCircleSmall.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleSmallMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlaneHalfCircleMedium.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleMediumMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlaneHalfCircleLarge.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargeMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlaneHalfCircleLargest.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargestMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargestEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlaneHalfCircleLargestSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlane3QuarterCircleSmall.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleSmallMirrored.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveWallPlane3QuarterCircleMedium.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleMediumMirrored.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveWallPlane3QuarterCircleMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertTrue(humpWallPlaneSmall.canSwitchPlane());
		assertTrue(humpWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertTrue(humpWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertTrue(humpWallPlaneSmallMirrored.canSwitchPlane());
		assertTrue(humpWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(humpWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(humpWallPlaneMedium.canSwitchPlane());
		assertFalse(humpWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(humpWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(humpWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(humpWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(humpWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(humpWallPlaneLarge.canSwitchPlane());
		assertFalse(humpWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(humpWallPlaneLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(humpWallPlaneLargeMirrored.canSwitchPlane());
		assertFalse(humpWallPlaneLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(humpWallPlaneLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertTrue(loopWallPlaneSmall.canSwitchPlane());
		assertTrue(loopWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertTrue(loopWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertTrue(loopWallPlaneSmallMirrored.canSwitchPlane());
		assertTrue(loopWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(loopWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(loopWallPlaneMedium.canSwitchPlane());
		assertFalse(loopWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(loopWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(loopWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(loopWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(loopWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(loopWallPlaneLarge.canSwitchPlane());
		assertFalse(loopWallPlaneLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(loopWallPlaneLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(loopWallPlaneLargeMirrored.canSwitchPlane());
		assertFalse(loopWallPlaneLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(loopWallPlaneLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(loopWallPlaneSmallDouble.canSwitchPlane());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowhead.canSwitchPlane());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowhead.canSwitchPlane());
		assertFalse(loopWallPlaneSmallDoubleMirrored.canSwitchPlane());
		assertFalse(loopWallPlaneSmallDoubleEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(loopWallPlaneSmallDoubleSchemaArrowheadMirrored.canSwitchPlane());

		assertTrue(waveWallPlane2CurvesSmall.canSwitchPlane());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowhead.canSwitchPlane());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowhead.canSwitchPlane());
		assertTrue(waveWallPlane2CurvesSmallMirrored.canSwitchPlane());
		assertTrue(waveWallPlane2CurvesSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(waveWallPlane2CurvesSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(waveWallPlane2CurvesMedium.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesMediumMirrored.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(waveWallPlane2CurvesLarge.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesLargeMirrored.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(waveWallPlane2CurvesLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(waveWallPlane3CurvesSmall.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesSmallMirrored.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(waveWallPlane3CurvesMedium.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesMediumMirrored.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(waveWallPlane3CurvesLarge.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowhead.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesLargeMirrored.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesLargeEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(waveWallPlane3CurvesLargeSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curveThenStraightMovementWallPlane.canSwitchPlane());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(curveThenStraightMovementWallPlaneMirrored.canSwitchPlane());
		assertFalse(curveThenStraightMovementWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curveThenStraightMovementWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curvedCrossMovementWallPlaneSmall.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowhead.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowhead.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneSmallMirrored.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneSmallEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneSmallSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(curvedCrossMovementWallPlaneMedium.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowhead.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowhead.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneMediumMirrored.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneMediumEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(curvedCrossMovementWallPlaneMediumSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(rotationSingleWallPlane.canSwitchPlane());
		assertFalse(rotationSingleWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(rotationSingleWallPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(rotationSingleWallPlaneMirrored.canSwitchPlane());
		assertFalse(rotationSingleWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(rotationSingleWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(rotationDoubleWallPlane.canSwitchPlane());
		assertFalse(rotationDoubleWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(rotationDoubleWallPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(rotationDoubleWallPlaneMirrored.canSwitchPlane());
		assertFalse(rotationDoubleWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(rotationDoubleWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertFalse(rotationAlternateWallPlane.canSwitchPlane());
		assertFalse(rotationAlternateWallPlaneEmptyArrowhead.canSwitchPlane());
		assertFalse(rotationAlternateWallPlaneSchemaArrowhead.canSwitchPlane());
		assertFalse(rotationAlternateWallPlaneMirrored.canSwitchPlane());
		assertFalse(rotationAlternateWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertFalse(rotationAlternateWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

		assertTrue(shakingWallPlane.canSwitchPlane());
		assertTrue(shakingWallPlaneEmptyArrowhead.canSwitchPlane());
		assertTrue(shakingWallPlaneSchemaArrowhead.canSwitchPlane());
		assertTrue(shakingWallPlaneMirrored.canSwitchPlane());
		assertTrue(shakingWallPlaneEmptyArrowheadMirrored.canSwitchPlane());
		assertTrue(shakingWallPlaneSchemaArrowheadMirrored.canSwitchPlane());

	}

	@Override
	public void testSwitchPlane() {

		// TODO add all rotations
		curveWallPlaneQuarterSmall.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-001-01-01-01"), curveWallPlaneQuarterSmall.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-001-01-02-01"),
				curveWallPlaneQuarterSmallEmptyArrowhead.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-001-01-03-01"),
				curveWallPlaneQuarterSmallSchemaArrowhead.getSymbol());
		curveWallPlaneQuarterSmallMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-001-01-01-02"), curveWallPlaneQuarterSmallMirrored.getSymbol());
		curveWallPlaneQuarterSmallEmptyArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-001-01-02-02"),
				curveWallPlaneQuarterSmallEmptyArrowheadMirrored.getSymbol());
		curveWallPlaneQuarterSmallSchemaArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-001-01-03-02"),
				curveWallPlaneQuarterSmallSchemaArrowheadMirrored.getSymbol());

		humpWallPlaneSmall.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-002-01-01-01"), humpWallPlaneSmall.getSymbol());
		humpWallPlaneSmallEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-002-01-02-01"), humpWallPlaneSmallEmptyArrowhead.getSymbol());
		humpWallPlaneSmallSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-002-01-03-01"), humpWallPlaneSmallSchemaArrowhead.getSymbol());
		humpWallPlaneSmallMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-002-01-01-02"), humpWallPlaneSmallMirrored.getSymbol());
		humpWallPlaneSmallEmptyArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-002-01-02-02"),
				humpWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		humpWallPlaneSmallSchemaArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-002-01-03-02"),
				humpWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		loopWallPlaneSmall.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-003-01-01-01"), loopWallPlaneSmall.getSymbol());
		loopWallPlaneSmallEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-003-01-02-01"), loopWallPlaneSmallEmptyArrowhead.getSymbol());
		loopWallPlaneSmallSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-003-01-03-01"), loopWallPlaneSmallSchemaArrowhead.getSymbol());
		loopWallPlaneSmallMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-003-01-01-02"), loopWallPlaneSmallMirrored.getSymbol());
		loopWallPlaneSmallEmptyArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-003-01-02-02"),
				loopWallPlaneSmallEmptyArrowheadMirrored.getSymbol());
		loopWallPlaneSmallSchemaArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-003-01-03-02"),
				loopWallPlaneSmallSchemaArrowheadMirrored.getSymbol());

		waveWallPlane2CurvesSmall.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-004-01-01-01"), waveWallPlane2CurvesSmall.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-004-01-02-01"),
				waveWallPlane2CurvesSmallEmptyArrowhead.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-004-01-03-01"),
				waveWallPlane2CurvesSmallSchemaArrowhead.getSymbol());
		waveWallPlane2CurvesSmallMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-004-01-01-02"), waveWallPlane2CurvesSmallMirrored.getSymbol());
		waveWallPlane2CurvesSmallEmptyArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-004-01-02-02"),
				waveWallPlane2CurvesSmallEmptyArrowheadMirrored.getSymbol());
		waveWallPlane2CurvesSmallSchemaArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-07-004-01-03-02"),
				waveWallPlane2CurvesSmallSchemaArrowheadMirrored.getSymbol());

		shakingWallPlane.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-09-008-01-01-01"), shakingWallPlane.getSymbol());
		shakingWallPlaneEmptyArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-09-008-01-02-01"), shakingWallPlaneEmptyArrowhead.getSymbol());
		shakingWallPlaneSchemaArrowhead.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-09-008-01-03-01"), shakingWallPlaneSchemaArrowhead.getSymbol());
		shakingWallPlaneMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-09-008-01-01-09"), shakingWallPlaneMirrored.getSymbol());
		shakingWallPlaneEmptyArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-09-008-01-02-09"),
				shakingWallPlaneEmptyArrowheadMirrored.getSymbol());
		shakingWallPlaneSchemaArrowheadMirrored.switchPlane();
		assertEquals(symbolFactory.createSymbol("02-09-008-01-03-09"),
				shakingWallPlaneSchemaArrowheadMirrored.getSymbol());

	}
}
